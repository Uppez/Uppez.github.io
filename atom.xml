<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>教书的先生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-27T23:57:00.115Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王荣胜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于显卡</title>
    <link href="http://yoursite.com/2019/10/28/%E5%85%B3%E4%BA%8E%E6%98%BE%E5%8D%A1/"/>
    <id>http://yoursite.com/2019/10/28/关于显卡/</id>
    <published>2019-10-27T23:07:50.000Z</published>
    <updated>2019-10-27T23:57:00.115Z</updated>
    
    <content type="html"><![CDATA[<p>为了便于理解，全文形象化介绍。</p><a id="more"></a><p>首先，<strong>显卡是电脑上绘制图像的东西</strong>，我们所看到的图像都是显卡<strong>一张一张</strong>“画”出来的，然后通过高速连续的播放，形成了我们看到的连贯图像。</p><h2 id="显卡性能的关键参数"><a href="#显卡性能的关键参数" class="headerlink" title="显卡性能的关键参数"></a>显卡性能的关键参数</h2><p>（1）流处理器数量（CUDA核心）</p><p>可以理解为人类世界的“画师”。比如：</p><p><a href="https://sm.ms/image/pKGzfNXTUmrRwkj" target="_blank"><img src="https://i.loli.net/2019/10/28/pKGzfNXTUmrRwkj.png"></a></p><p>我们可以看到流处理器单元为1536units，相当于这个显卡为1536个“画师”。</p><p>此时我们可以知道，“画师”数量越多，画画的速度也就越快，也就是我们所说的游戏帧数高。</p><p>由此，显卡的性能优劣就可以对比出来，但是仅仅是比“画师”的数量是不够的，还要看画画的水平。</p><p>（2）显卡的架构</p><p>比如：老的麦克斯架构的GTX960显卡，与同级别但是采用帕斯卡架构的显卡中，后者是比前者性能要好的，由此我们看到，新架构的显卡的效率更高，性能更强。</p><p>我们平时利用显卡来跑深度学习程序的时候，对显卡架构来说并不用很关心，大部分关于显卡架构的工作，我们的CUDA库和所使用的深度学习库都帮我们处理了，我们平时用的GTX 1080ti、GTX 1080以及所有10系列的显卡，使用的是 <strong>Pascal 架构</strong> ，而最新出来的RTX 2080、RTX 2080ti则使用的是<strong>Turning(图灵架构)</strong> ，而之前的服务器级别显卡P100则使用的是<strong>Volta架构</strong> 。</p><p><strong>流处理器和架构是最影响显卡性能的参数。</strong></p><p>（3）显卡的核心频率</p><p>这里我们可以理解为“画师”的画画速度。</p><p>在相同的流处理器和架构情况下，显卡的核心频率越高，显卡的性能也就越好。</p><p>但是我们也可以通过<strong>显卡超频（Over Clock，OC）</strong> ，也就是压榨“画师”多多来工作，去强行提升这个频率，但是要记住，<strong>超频有风险</strong>，折腾需谨慎。</p><p>（4）显存容量/位宽/频率</p><p>我们可以理解为“画师”做好了画，是需要空间<strong>存贮这些画</strong> 的。</p><ul><li><p>显存位宽：表示小车将画从“画师”那里运送到仓库的数据大小，一般为128-bit或者64-bit。</p></li><li><p>显存频率：表示小车每秒能运输多少次。</p></li><li><p>显存容量：表示仓库的大小。</p></li></ul><p><a href="https://sm.ms/image/vFH7p1wlbUG3yNk" target="_blank"><img src="https://i.loli.net/2019/10/28/vFH7p1wlbUG3yNk.png"></a></p><h2 id="公版显卡与非公版显卡"><a href="#公版显卡与非公版显卡" class="headerlink" title="公版显卡与非公版显卡"></a>公版显卡与非公版显卡</h2><ul><li><p>公版显卡：显卡研发厂家（英伟达或者AMD）官方出售的显卡，以稳定著称。</p></li><li><p>非公版显卡：各大品牌厂家购买官方的显卡芯片后进行自己组装拼凑出来的显卡。</p></li></ul><p>常见情况下我们所使用和购买的显卡都为非公版显卡。</p><h2 id="N卡-A卡-买哪个？"><a href="#N卡-A卡-买哪个？" class="headerlink" title="N卡/A卡/买哪个？"></a>N卡/A卡/买哪个？</h2><ul><li><p>N卡是英伟达芯片的显卡。</p></li><li><p>A卡是AMD芯片的显卡。</p></li></ul><p>如今N卡与A卡在游戏上的区别并不是很大，但是很多游戏的话对N卡的优化比较好，所以<strong>买就买N卡</strong>吧。</p><p>下面给出一个显卡性能的天梯图（来自2019年）：</p><p><a href="https://sm.ms/image/9Kfkbr7NesaO3Gv" target="_blank"><img src="https://i.loli.net/2019/10/28/9Kfkbr7NesaO3Gv.jpg"></a></p><p>最后推荐购买高性能显卡中的<strong>RTX 2080ti、2080</strong> （价格在1w左右），图灵架构，拥有深度学习超采样技术和光线追踪两大黑科技。</p><p>但是相比之下，华硕ROG GTX1060 6GB猛禽、华硕 GTX1060 6G雪豹、索泰 GTX1060 6G至尊更适合我们这种低端玩家（俗称穷鬼），其性价比是不错的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了便于理解，全文形象化介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="显卡" scheme="http://yoursite.com/tags/%E6%98%BE%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>学生信息管理系统（python语言）</title>
    <link href="http://yoursite.com/2019/10/27/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88python%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/27/学生信息管理系统（python语言）/</id>
    <published>2019-10-27T10:06:03.000Z</published>
    <updated>2019-10-27T10:11:05.670Z</updated>
    
    <content type="html"><![CDATA[<p>本程序包含main.py和gro.py两个函数<br>可以使用<strong>python main.py</strong> 直接运行！</p><a id="more"></a><p>主函数：main.py</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> gro <span class="hljs-keyword">import</span> gro</span><br><span class="line"><span class="hljs-keyword">import</span> pickle <span class="hljs-keyword">as</span> pk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printMenu</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">        print(<span class="hljs-string">"      学生管理系统"</span>)  <span class="hljs-comment"># class maked</span></span><br><span class="line">        print(<span class="hljs-string">"1.添加学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"2.删除学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"3.修改学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"4.查询学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"5.显示所有学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"6.导出外部文件"</span>)</span><br><span class="line">        <span class="hljs-comment">#print("7.导入外部文件")</span></span><br><span class="line">        print(<span class="hljs-string">"7.导出外部文件并加密"</span>)</span><br><span class="line">        <span class="hljs-comment">#print("9.导入外部加密文件并解读")</span></span><br><span class="line">        print(<span class="hljs-string">"0.退出系统"</span>)</span><br><span class="line">        print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line"></span><br><span class="line">    CS1 = gro()</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">        <span class="hljs-comment"># 打印提示信息</span></span><br><span class="line">        printMenu()</span><br><span class="line">        key = input(<span class="hljs-string">"请输入你要选择的操作："</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> key == <span class="hljs-string">'0'</span>:</span><br><span class="line">            exit()</span><br><span class="line">        <span class="hljs-keyword">if</span> key == <span class="hljs-string">'1'</span>:</span><br><span class="line">            <span class="hljs-comment"># 添加学生信息</span></span><br><span class="line">            CS1.addstu_in()</span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'2'</span>:</span><br><span class="line">            CS1.del_itemin()</span><br><span class="line">            <span class="hljs-comment"># 删除学生信息</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'3'</span>:</span><br><span class="line">            CS1.modifystu()</span><br><span class="line">            <span class="hljs-comment"># 修改学生信息</span></span><br><span class="line">            <span class="hljs-comment"># modifystu</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'4'</span>:</span><br><span class="line">            CS1.sc_stu()</span><br><span class="line">            <span class="hljs-comment"># 查询学生信息</span></span><br><span class="line">            <span class="hljs-comment"># sc_stu</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'5'</span>:</span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            print(<span class="hljs-string">"学生的信息如下："</span>)</span><br><span class="line">            print(<span class="hljs-string">"序号  学号  姓名            成绩  "</span>)</span><br><span class="line">            i = <span class="hljs-number">0</span></span><br><span class="line">            <span class="hljs-keyword">for</span> tempInfo <span class="hljs-keyword">in</span> CS1.allstu:</span><br><span class="line">                print(<span class="hljs-string">"%d     %s     %s      %s"</span></span><br><span class="line">                      % (i + <span class="hljs-number">1</span>, CS1.allstu[i].get(<span class="hljs-string">'stuid'</span>), CS1.allstu[i].get(<span class="hljs-string">'stuname'</span>),CS1.allstu[i].get(<span class="hljs-string">'score'</span>)))</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'6'</span>:</span><br><span class="line">            CS1.Output_txt()</span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            print(<span class="hljs-string">"外部文件已导出..."</span>)</span><br><span class="line">            <span class="hljs-comment"># Output_txt</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'7'</span>:</span><br><span class="line">            CS1.Input_txt()</span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            <span class="hljs-comment"># Input_txt</span></span><br><span class="line">            print(<span class="hljs-string">"外部文件数据已导入..."</span>)</span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'8'</span>:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            <span class="hljs-comment"># Output_txt_s(stu_collection)</span></span><br><span class="line">            print(<span class="hljs-string">"外部加密文件已导出..."</span>)</span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'9'</span>:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            <span class="hljs-comment"># Input_txt_s(stu_collection)</span></span><br><span class="line">            print(<span class="hljs-string">"外部文件数据已解读..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>子函数：gro.py</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stu</span>:</span></span><br><span class="line">    stuid = <span class="hljs-string">"001"</span>;</span><br><span class="line">    stuname = <span class="hljs-string">"zhangsan"</span>;</span><br><span class="line">    score = <span class="hljs-number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printstu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(self.stuid)</span><br><span class="line">        print(self.stuname)</span><br><span class="line">        print(self.score)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">savestudent</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        exmaple = &#123;<span class="hljs-string">'stuid'</span>: <span class="hljs-number">123</span>, <span class="hljs-string">'stuname'</span>: <span class="hljs-string">'xxx'</span>, <span class="hljs-string">'score'</span>: <span class="hljs-number">100</span>&#125;</span><br><span class="line">        temp = exmaple.fromkeys([<span class="hljs-string">'stuid'</span>, <span class="hljs-string">'stuname'</span>, <span class="hljs-string">'score'</span>])</span><br><span class="line">        temp[<span class="hljs-string">'stuid'</span>] = self.stuid</span><br><span class="line">        temp[<span class="hljs-string">'stuname'</span>] = self.stuname</span><br><span class="line">        temp[<span class="hljs-string">'score'</span>] = self.score</span><br><span class="line">        <span class="hljs-keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gro</span>:</span></span><br><span class="line">    allstu = []</span><br><span class="line">    groname = <span class="hljs-string">'CS1'</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inputstu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        newstu = stu()</span><br><span class="line">        newstu.stuid = int(input(<span class="hljs-string">"请输入学号:\n"</span>))</span><br><span class="line">        newstu.stuname = input(<span class="hljs-string">"请输入学生姓名:\n"</span>)</span><br><span class="line">        newstu.score = int(input(<span class="hljs-string">"请输入成绩:\n"</span>))</span><br><span class="line">        newstu.savestudent()</span><br><span class="line">        <span class="hljs-keyword">return</span> newstu.savestudent()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addstu</span><span class="hljs-params">(self, stuobj)</span>:</span></span><br><span class="line">        self.allstu.append(stuobj)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addstu_in</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        allnew = self.inputstu()</span><br><span class="line">        self.addstu(allnew)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_itemin</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> self.allstu[s][<span class="hljs-string">'stuid'</span>] == int(input(<span class="hljs-string">"输入删除学生的学号:\n"</span>)):</span><br><span class="line">                self.allstu.pop(s)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"没有此学生相关信息!\n"</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modifystu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> self.allstu[s].get(<span class="hljs-string">'stuid'</span>) == int(input(<span class="hljs-string">"输入修改的学生学号:\n"</span>)):</span><br><span class="line">                self.allstu[s][<span class="hljs-string">'stuname'</span>] = input(<span class="hljs-string">"请输入预修改值(姓名):\n"</span>)</span><br><span class="line">                self.allstu[s][<span class="hljs-string">'score'</span>] = int(input(<span class="hljs-string">"请输入预修改值(成绩):\n"</span>))</span><br><span class="line">                print(<span class="hljs-string">"已修改!\n"</span>)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"没有此学生相关信息!"</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printallstu</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment"># 未使用</span></span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.allstu:</span><br><span class="line">            s.printstu()</span><br><span class="line">            print(<span class="hljs-string">"-"</span> * <span class="hljs-number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sc_stu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> self.allstu[s].get(<span class="hljs-string">'stuid'</span>) == int(input(<span class="hljs-string">"输入查询的学生学号:\n"</span>)):</span><br><span class="line">                print(str(self.allstu[s].get(<span class="hljs-string">'stuid'</span>)) +<span class="hljs-string">'  '</span> +str(self.allstu[s].get(<span class="hljs-string">'stuname'</span>)) + <span class="hljs-string">'  '</span> +str(self.allstu[s].get(<span class="hljs-string">'score'</span>)))</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"没有此学生相关信息!"</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Output_txt</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        f = open(<span class="hljs-string">"pydata.txt"</span>, <span class="hljs-string">"wt"</span>)</span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            f.writelines(self.allstu[s] + <span class="hljs-string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Input_txt</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        fw = open(<span class="hljs-string">"pydata.txt"</span>, <span class="hljs-string">"rt"</span>)</span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fw:</span><br><span class="line">            string = fw.readline()</span><br><span class="line">            print(string)</span><br><span class="line">            ts = string</span><br><span class="line">            print(type(ts))</span><br><span class="line">            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(len(self.allstu)):</span><br><span class="line">                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (ts.get(<span class="hljs-string">'stuid'</span>) == self.allstu[s].get(<span class="hljs-string">'stuid'</span>)):</span><br><span class="line">                    self.allstu.append(ts)</span><br><span class="line">        print(<span class="hljs-string">"读取成功!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本程序包含main.py和gro.py两个函数&lt;br&gt;可以使用&lt;strong&gt;python main.py&lt;/strong&gt; 直接运行！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="学生信息管理系统" scheme="http://yoursite.com/tags/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>pytorch实现神经网络</title>
    <link href="http://yoursite.com/2019/10/27/pytorch%E5%AE%9E%E7%8E%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/10/27/pytorch实现神经网络/</id>
    <published>2019-10-27T09:18:28.000Z</published>
    <updated>2019-10-27T09:22:04.959Z</updated>
    
    <content type="html"><![CDATA[<p>神经网络是通过torch.nn包来构建的</p><a id="more"></a><p>然后我们先看一个神经网络的处理流程：</p><p>1 定义网络架构</p><p>2 将输入喂入神经网络</p><p>3 神经网络计算输入得出输出</p><p>3 对比输出与真实标签数据</p><p>4 计算第3步中输出与真实标签的差距，也就是loss</p><p>5 如果loss太大，就反向传播回去调整网络参数。再重复、2，3，4，知道loss小到我们的要求为止。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> torch</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span><span class="hljs-params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        <span class="hljs-comment">#定义卷积核 1是输入通道数，6是输出通道数，5是指5×5的卷积</span></span><br><span class="line">        <span class="hljs-comment">#所以类推就是第一个参数是输入通道，第二个是输出通道，第三个是卷积核尺寸</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>)</span><br><span class="line">        <span class="hljs-comment">#定义全连接参数</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="hljs-number">16</span>*<span class="hljs-number">5</span>*<span class="hljs-number">5</span>, <span class="hljs-number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="hljs-number">120</span>, <span class="hljs-number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="hljs-number">84</span>, <span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#定义前向传播</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        <span class="hljs-comment">#将第一层卷积后的结果放入激活函数relu 再 最大池化一下，（2，2）是池化的步长</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))</span><br><span class="line">        <span class="hljs-comment">#同上一层一样，不过有一点不一样就是如果x是正方形，也就是长宽都相等的话，步长可以只指定一个数字</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="hljs-number">2</span>)</span><br><span class="line">        <span class="hljs-comment"># 这个是将x变成一维数组，为全连接层做准备</span></span><br><span class="line">        x = x.view(<span class="hljs-number">-1</span>, self.num_flat_features(x))</span><br><span class="line">        <span class="hljs-comment">#全连接层</span></span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="hljs-keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_flat_features</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        <span class="hljs-comment">#第一个维度不要，因为第一个维度是输入数据的batch，batch也就是一次输入多少张图片</span></span><br><span class="line">        size = x.size()[<span class="hljs-number">1</span>:]</span><br><span class="line">        num_features = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> size:</span><br><span class="line">            num_features*=s</span><br><span class="line">        <span class="hljs-keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br><span class="line"></span><br><span class="line">params = list(net.parameters())</span><br><span class="line"></span><br><span class="line">print(len(params))</span><br><span class="line">print(params[<span class="hljs-number">0</span>].size())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#自定义一个输入32*32的数据</span></span><br><span class="line">input = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>)</span><br><span class="line">out = net(input)</span><br><span class="line">print(out)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#将所有梯度清零，然后反向传播</span></span><br><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))</span><br><span class="line"></span><br><span class="line">output = net(input)</span><br><span class="line">target = torch.randn(<span class="hljs-number">10</span>)  <span class="hljs-comment">#我们定义的真实值</span></span><br><span class="line">target = target.view(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)<span class="hljs-comment">#将真实值的维度改成和输出值的维度</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">print(loss)</span><br><span class="line">print(loss.grad_fn)  <span class="hljs-comment"># MSELoss</span></span><br><span class="line">print(loss.grad_fn.next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])  <span class="hljs-comment"># Linear</span></span><br><span class="line">print(loss.grad_fn.next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#清零梯度</span></span><br><span class="line">net.zero_grad()</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'反向传播前第一层参数b'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'反向传播后第一层参数b'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="hljs-number">0.01</span></span><br><span class="line"><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> net.parameters():</span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="hljs-number">0.01</span>)</span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神经网络是通过torch.nn包来构建的&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>pytorch与tensorflow两大框架对比</title>
    <link href="http://yoursite.com/2019/10/27/pytorch%E4%B8%8Etensorflow%E4%B8%A4%E5%A4%A7%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2019/10/27/pytorch与tensorflow两大框架对比/</id>
    <published>2019-10-27T08:35:59.000Z</published>
    <updated>2019-10-27T08:57:58.061Z</updated>
    
    <content type="html"><![CDATA[<p>如果你在读这篇文章，那么你可能已经开始了自己的深度学习之旅。如果你对这一领域还不是很熟悉，那么简单来说，深度学习使用了「人工神经网络」，这是一种类似大脑的特殊架构，这个领域的发展目标是开发出能解决真实世界问题的类人计算机。为了帮助开发这些架构，谷歌、Facebook 和 Uber 等科技巨头已经为 Python 深度学习环境发布了多款框架，这让人们可以更轻松地学习、构建和训练不同类型的神经网络。</p><a id="more"></a><p>目录</p><ul><li>谷歌的 TensorFlow</li><li>Facebook 的 PyTorch</li><li>我们可以用 TensorFlow 和 PyTorch 构建什么？</li><li>PyTorch 和 TensorFlow 对比</li><li>PyTorch 和 TensorFlow 的优点和缺点</li><li>PyTorch 和 TensorFlow 安装、版本、更新</li><li>TensorFlow 还是 PyTorch？我的建议</li></ul><h2 id="1-谷歌的-TensorFlow"><a href="#1-谷歌的-TensorFlow" class="headerlink" title="1.谷歌的 TensorFlow"></a>1.谷歌的 TensorFlow</h2><p>TensorFlow 是谷歌的开发者创造的一款开源的深度学习框架，于 2015 年发布。官方研究发布于论文《TensorFlow：异构分布式系统上的大规模机器学习》。</p><p>论文地址：<a href="http://download.tensorflow.org/paper/whitepaper2015.pdf" target="_blank" rel="noopener">http://download.tensorflow.org/paper/whitepaper2015.pdf</a></p><p>TensorFlow 现已被公司、企业与创业公司广泛用于自动化工作任务和开发新系统，其在分布式训练支持、可扩展的生产和部署选项、多种设备（比如安卓）支持方面备受好评。</p><h2 id="2-Facebook-的-PyTorch"><a href="#2-Facebook-的-PyTorch" class="headerlink" title="2.Facebook 的 PyTorch"></a>2.Facebook 的 PyTorch</h2><p>PyTorch 是最新的深度学习框架之一，由 Facebook 的团队开发，并于 2017 年在 GitHub 上开源。有关其开发的更多信息请参阅论文《PyTorch 中的自动微分》。</p><p>论文地址：<a href="https://openreview.net/pdf?id=BJJsrmfCZ" target="_blank" rel="noopener">https://openreview.net/pdf?id=BJJsrmfCZ</a></p><p>PyTorch 很简洁、易于使用、支持动态计算图而且内存使用很高效，因此越来越受欢迎。接下来还会更详细地介绍。</p><h2 id="3-我们可以用-TensorFlow-和-PyTorch-构建什么？"><a href="#3-我们可以用-TensorFlow-和-PyTorch-构建什么？" class="headerlink" title="3.我们可以用 TensorFlow 和 PyTorch 构建什么？"></a>3.我们可以用 TensorFlow 和 PyTorch 构建什么？</h2><p>神经网络起初是被用于解决手写数字识别或用相机识别汽车注册车牌等简单的分类问题。但随着近来框架的发展以及英伟达高计算性能图形处理单元（GPU）的进步，我们可以在 TB 级的数据上训练神经网络并求解远远更加复杂的问题。一个值得提及的成就是在 TensorFlow 和 PyTorch 中实现的卷积神经网络在 ImageNet 上都达到了当前最佳的表现。训练后的模型可以用在不同的应用中，比如目标检测、图像语义分割等等。</p><p>尽管神经网络架构可以基于任何框架实现，但结果却并不一样。训练过程有大量参数都与框架息息相关。举个例子，如果你在 PyTorch 上训练一个数据集，那么你可以使用 GPU 来增强其训练过程，因为它们运行在 CUDA（一种 C++ 后端）上。TensorFlow 也能使用 GPU，但它使用的是自己内置的 GPU 加速。因此，根据你所选框架的不同，训练模型的时间也总是各不相同。</p><p>一、TensorFlow 顶级项目</p><ol><li><p>Magenta：一个探索将机器学习用作创造过程的工具的开源研究项目：<a href="https://magenta.tensorflow.org/" target="_blank" rel="noopener">https://magenta.tensorflow.org/</a></p></li><li><p>Sonnet：这是一个基于 TensorFlow 的软件库，可用于构建复杂的神经网络：<a href="https://sonnet.dev/" target="_blank" rel="noopener">https://sonnet.dev/</a></p></li><li><p>Ludwig：这是一个无需写代码就能训练和测试深度学习模型的工具箱：<a href="https://uber.github.io/ludwig/" target="_blank" rel="noopener">https://uber.github.io/ludwig/</a></p></li></ol><p>二、PyTorch 顶级项目</p><ol><li><p>CheXNet：使用深度学习来分析胸部 X 光照片，能实现放射科医生水平的肺炎监测：<a href="https://stanfordmlgroup.github.io/projects/chexnet/" target="_blank" rel="noopener">https://stanfordmlgroup.github.io/projects/chexnet/</a></p></li><li><p>PYRO：这是一种用 Python 编写的通用概率编程语言（PPL），后端由 PyTorch 支持：<a href="https://pyro.ai" target="_blank" rel="noopener">https://pyro.ai</a> (<a href="https://pyro.ai/" target="_blank" rel="noopener">https://pyro.ai/</a>)</p></li><li><p>Horizon：一个用于应用强化学习（Applied RL）的平台：<a href="https://horizonrl.com" target="_blank" rel="noopener">https://horizonrl.com</a> (<a href="https://horizonrl.com/" target="_blank" rel="noopener">https://horizonrl.com/</a>)</p></li></ol><p>这些只是基于 TensorFlow 和 PyTorch 构建的少量框架和项目。你能在 TensorFlow 和 PyTorch 的 GitHub 和官网上找到更多。</p><h2 id="4-PyTorch-和-TensorFlow-对比"><a href="#4-PyTorch-和-TensorFlow-对比" class="headerlink" title="4.PyTorch 和 TensorFlow 对比"></a>4.PyTorch 和 TensorFlow 对比</h2><p>PyTorch 和 TensorFlow 的关键差异是它们执行代码的方式。这两个框架都基于基础数据类型张量（tensor）而工作。你可以将张量看作是下图所示的多维数组。</p><p><a href="https://imgchr.com/i/Ks4OHK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks4OHK.md.jpg" alt="Ks4OHK.jpg" border="0"></a></p><p><strong>机制：动态图定义与静态图定义</strong></p><p>TensorFlow 框架由两个核心构建模块组成：</p><ul><li>一个用于定义计算图以及在各种不同硬件上执行这些图的运行时间的软件库。</li><li>一个具有许多优点的计算图（后面很快就会介绍这些优点）。</li></ul><p>计算图是一种将计算描述成有向图的抽象方式。图是一种由节点（顶点）和边构成的数据结构，是由有向的边成对连接的顶点的集合。</p><p>当你在 TensorFlow 中运行代码时，计算图是以静态方式定义的。与外部世界的所有通信都是通过 tf.Sessionobject 和 tf.Placeholder 执行，它们是在运行时会被外部数据替换的张量。例如，看看以下代码段：</p><p><a href="https://imgchr.com/i/Ks5S9H" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5S9H.md.jpg" alt="Ks5S9H.jpg" border="0"></a></p><p>下图是 TensorFlow 中运行代码之前以静态方式生成计算图的方式。计算图的核心优势是能实现并行化或依赖驱动式调度（dependency driving scheduling），这能让训练速度更快，更有效率。</p><p><a href="https://imgchr.com/i/Ks59gA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks59gA.md.jpg" alt="Ks59gA.jpg" border="0"></a></p><p>类似于 TensorFlow，PyTorch 也有两个核心模块：</p><ul><li>计算图的按需和动态构建</li><li>Autograd：执行动态图的自动微分</li></ul><p>可以在下图中看到，图会随着执行过程而改变和执行节点，没有特殊的会话接口或占位符。整体而言，这个框架与 Python 语言的整合更紧密，大多数时候感觉更本地化。因此，PyTorch 是更 Python 化的框架，而 TensorFlow 则感觉完全是一种新语言。</p><p><a href="https://imgchr.com/i/Ks5CjI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5CjI.md.jpg" alt="Ks5CjI.jpg" border="0"></a></p><p>根据你所用的框架，在软件领域有很大的不同。TensorFlow 提供了使用 TensorFlow Fold 库实现动态图的方式，而 PyTorch 的动态图是内置的。</p><p><strong>分布式训练</strong></p><p>PyTorch 和 TensorFlow 的一个主要差异特点是数据并行化。PyTorch 优化性能的方式是利用 Python 对异步执行的本地支持。而用 TensorFlow 时，你必须手动编写代码，并微调要在特定设备上运行的每个操作，以实现分布式训练。但是，你可以将 PyTorch 中的所有功能都复现到 TensorFlow 中，但这需要做很多工作。下面的代码片段展示了用 PyTorch 为模型实现分布式训练的简单示例：</p><p><a href="https://imgchr.com/i/Ks5Z4g" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5Z4g.md.jpg" alt="Ks5Z4g.jpg" border="0"></a></p><p><strong>可视化</strong></p><p>在训练过程的可视化方面，TensorFlow 更有优势。可视化能帮助开发者跟踪训练过程以及实现更方便的调试。TensorFlow 的可视化库名为 TensorBoard。PyTorch 开发者则使用 Visdom，但是 Visdom 提供的功能很简单且有限，所以 TensorBoard 在训练过程可视化方面更好。</p><p>TensorBoard 的特性：</p><ul><li>跟踪和可视化损失和准确度等指标</li><li>可视化计算图（操作和层）</li><li>查看权重、偏差或其它张量随时间变化的直方图</li><li>展示图像、文本和音频数据</li><li>分析 TensorFlow 程序</li></ul><p><a href="https://imgchr.com/i/Ks5Quq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5Quq.md.jpg" alt="Ks5Quq.jpg" border="0"></a></p><p>Visdom 的特性</p><ul><li>处理回调</li><li>绘制图表和细节</li><li>管理环境</li></ul><p><a href="https://imgchr.com/i/Ks51bV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks51bV.md.jpg" alt="Ks51bV.jpg" border="0"></a></p><p><strong>生产部署</strong></p><p>在将训练好的模型部署到生产方面，TensorFlow 显然是赢家。我们可以直接使用 TensorFlow serving 在 TensorFlow 中部署模型，这是一种使用了 REST Client API 的框架。</p><p>使用 PyTorch 时，在最新的 1.0 稳定版中，生产部署要容易一些，但它没有提供任何用于在网络上直接部署模型的框架。你必须使用 Flask 或 Django 作为后端服务器。所以，如果要考虑性能，TensorFlow serving 可能是更好的选择。</p><p><strong>用 PyTorch 和 TensorFlow 定义一个简单的神经网络</strong></p><p>我们比较一下如何在 PyTorch 和 TensorFlow 中声明神经网络。</p><p>在 PyTorch 中，神经网络是一个类，我们可以使用 torch.nn 软件包导入构建架构所必需的层。所有的层都首先在 <strong>init</strong>() 方法中声明，然后在 forward() 方法中定义输入 x 在网络所有层中的遍历方式。最后，我们声明一个变量模型并将其分配给定义的架构（model = NeuralNet()）。</p><p><a href="https://imgchr.com/i/Ks5avR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5avR.md.jpg" alt="Ks5avR.jpg" border="0"></a></p><p>近期 Keras 被合并到了 TensorFlow 库中，这是一个使用 TensorFlow 作为后端的神经网络框架。从那时起，在 TensorFlow 中声明层的句法就与 Keras 的句法类似了。首先，我们声明变量并将其分配给我们将要声明的架构类型，这里的例子是一个 Sequential() 架构。</p><p>接下来，我们使用 model.add() 方法以序列方式直接添加层。层的类型可以从 tf.layers 导入，如下代码片段所示：</p><p><a href="https://imgchr.com/i/Ks5cPe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5cPe.md.jpg" alt="Ks5cPe.jpg" border="0"></a></p><h2 id="5-TensorFlow-和-PyTorch-的优缺点"><a href="#5-TensorFlow-和-PyTorch-的优缺点" class="headerlink" title="5.TensorFlow 和 PyTorch 的优缺点"></a>5.TensorFlow 和 PyTorch 的优缺点</h2><p>TensorFlow和PyTorch各有其优缺点。</p><p>TensorFlow 的优点：</p><ul><li>简单的内置高级 API</li><li>使用 TensorBoard 可视化训练</li><li>通过 TensorFlow serving 容易实现生产部署</li><li>很容易的移动平台支持</li><li>开源</li><li>良好的文档和社区支持</li></ul><p>TensorFlow 的缺点：</p><ul><li>静态图</li><li>调试方法</li><li>难以快速修改</li></ul><p>PyTorch 的优点</p><ul><li>类 Python 的代码</li><li>动态图</li><li>轻松快速的编辑</li><li>良好的文档和社区支持</li><li>开源</li><li>很多项目都使用 PyTorch</li></ul><p>PyTorch 的缺点：</p><ul><li>可视化需要第三方</li><li>生产部署需要 API 服务器</li></ul><h2 id="6-PyTorch-和-TensorFlow-安装、版本、更新"><a href="#6-PyTorch-和-TensorFlow-安装、版本、更新" class="headerlink" title="6.PyTorch 和 TensorFlow 安装、版本、更新"></a>6.PyTorch 和 TensorFlow 安装、版本、更新</h2><p>具体看我的另外一篇文章：:point_right: <a href="https://uppez.github.io/2019/09/15/%E4%B8%BAAnaconda3%E5%AE%89%E8%A3%85tensorflow%E7%AD%89/#more" target="_blank" rel="noopener">Anaconda3安装tf/pytorch/keras</a></p><h2 id="7-TensorFlow-还是-PyTorch？"><a href="#7-TensorFlow-还是-PyTorch？" class="headerlink" title="7.TensorFlow 还是 PyTorch？"></a>7.TensorFlow 还是 PyTorch？</h2><blockquote><p>TensorFlow 是一种非常强大和成熟的深度学习库，具有很强的可视化功能和多个用于高级模型开发的选项。它有面向生产部署的选项，并且支持移动平台。另一方面，PyTorch 框架还很年轻，拥有更强的社区动员，而且它对 Python 友好。<br> 我的建议是如果你想更快速地开发和构建 AI 相关产品，TensorFlow 是很好的选择。建议研究型开发者使用 PyTorch，因为它支持快速和动态的训练。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你在读这篇文章，那么你可能已经开始了自己的深度学习之旅。如果你对这一领域还不是很熟悉，那么简单来说，深度学习使用了「人工神经网络」，这是一种类似大脑的特殊架构，这个领域的发展目标是开发出能解决真实世界问题的类人计算机。为了帮助开发这些架构，谷歌、Facebook 和 Uber 等科技巨头已经为 Python 深度学习环境发布了多款框架，这让人们可以更轻松地学习、构建和训练不同类型的神经网络。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="深度学习框架" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>1024节日快乐</title>
    <link href="http://yoursite.com/2019/10/24/1024%E8%8A%82%E6%97%A5%E5%BF%AB%E4%B9%90/"/>
    <id>http://yoursite.com/2019/10/24/1024节日快乐/</id>
    <published>2019-10-24T12:31:55.000Z</published>
    <updated>2019-10-24T12:48:02.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1024程序猿节日来源"><a href="#1024程序猿节日来源" class="headerlink" title="1024程序猿节日来源"></a>1024程序猿节日来源</h1><p>1024 是 2 的 10 次方，常用于存储空间的定义：1M = 1024K 。程序员就像是一个个 1024，以最低调、踏实、核心的功能模块搭建起这个科技世界。1G=1024M，而 1G 与 1 级谐音，也有一级棒的意思。<br>从 2015 年起，每年 10 月 24 日被定义为程序员节。向通过 Coding 改变世界，追求技术知识创新的程序员们致敬。</p><a id="more"></a><p>结果呢？随着 IT 行业高收入，大家对程序员越来越关注，都以为程序员是：</p><img src="https://s2.ax1x.com/2019/10/24/KaSl4O.jpg" alt="别人眼中的他们" border="0"><p>而实际上他们是：</p><img src="https://s2.ax1x.com/2019/10/24/KaSQUK.jpg" alt="他们眼中的自己" border="0"><p>“多金”也是程序员的重要标签<br>根据饿了么与挖财发布的<br>《互联网从业者生活品质报告》统计<br>10%程序员的年收入高于50万<br>有近5成的程序员年薪在20万以上</p><img src="https://s2.ax1x.com/2019/10/24/KaSJvd.jpg" alt="KaSJvd.jpg" border="0"><p>还有很多人说程序员木讷、不解风情<br>其实是你不懂程序员的浪漫<br>95后程序员韦若琛曾错过常人眼中的“520”，选择在5月22日表白，因为在他头脑里，5×16×16+2×16+2=1282+32=1314，522是16进制的1314，是黑客情人节。<br>正所谓“程序员浪起漫来，真没你啥事了”<br>看看下面这串代码感受一下</p><img src="https://s2.ax1x.com/2019/10/24/KapJiT.gif" alt="KapJiT.gif" border="0"><p>如今，在父母们眼里<br>程序员高收入、工作稳定、老实不容易出轨<br>俨然成了相亲市场上的“抢手货”<br>就在去年阿里巴巴举办的开发者大会上<br>有位家长就到现场为女儿张贴了征婚启示<br>指定要“程序员”</p><p>曾有打油诗如此形容程序员这一职业<br>“十年编程两茫茫，工期短，需求长。<br>千行代码，Bug 何处藏。<br>纵使上线又如何，新版本，继续忙。<br>黑白颠倒没商量，睡地铺，吃食堂。<br>夜半梦醒，无人在身旁。<br>最怕灯火阑珊时，手机响，心里慌。”</p><img src="https://s2.ax1x.com/2019/10/24/KaSGgH.jpg" alt="KaSGgH.jpg" border="0"><h1 id="未来可期"><a href="#未来可期" class="headerlink" title="未来可期"></a>未来可期</h1><img src="https://s2.ax1x.com/2019/10/24/KaS88e.jpg" alt="KaS88e.jpg" border="0"><p>程序员之歌<br>在那山的那边海的那边有一群程序猿<br>他们老实又腼腆<br>他们聪明又有钱<br>他们一天到晚坐在那里认真地改bug<br>他们饿了就吃一口方便面<br>噢~<br>可爱的程序员~<br>可爱的程序员~<br>只要一提需求他们就要重新改一遍<br>可是时间只剩下最后一天</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1024程序猿节日来源&quot;&gt;&lt;a href=&quot;#1024程序猿节日来源&quot; class=&quot;headerlink&quot; title=&quot;1024程序猿节日来源&quot;&gt;&lt;/a&gt;1024程序猿节日来源&lt;/h1&gt;&lt;p&gt;1024 是 2 的 10 次方，常用于存储空间的定义：1M = 1024K 。程序员就像是一个个 1024，以最低调、踏实、核心的功能模块搭建起这个科技世界。1G=1024M，而 1G 与 1 级谐音，也有一级棒的意思。&lt;br&gt;从 2015 年起，每年 10 月 24 日被定义为程序员节。向通过 Coding 改变世界，追求技术知识创新的程序员们致敬。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="1024快乐" scheme="http://yoursite.com/tags/1024%E5%BF%AB%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>pytorch的基石-tensor张量</title>
    <link href="http://yoursite.com/2019/10/23/pytorch%E7%9A%84%E5%9F%BA%E7%9F%B3-tensor%E5%BC%A0%E9%87%8F/"/>
    <id>http://yoursite.com/2019/10/23/pytorch的基石-tensor张量/</id>
    <published>2019-10-23T12:31:17.000Z</published>
    <updated>2019-10-23T13:10:06.313Z</updated>
    
    <content type="html"><![CDATA[<p>学习使用前准备：</p><p><a href="http://pytorch.org" target="_blank" rel="noopener">安装pytorch</a></p><p><a href="https://zhuanlan.zhihu.com/p/56936691" target="_blank" rel="noopener">pytorch安装问题解决</a></p><p>目前我的pytorch仍然存在使用问题…</p><a id="more"></a><h2 id="1-tensor数学"><a href="#1-tensor数学" class="headerlink" title="1.tensor数学"></a>1.tensor数学</h2><p>要介绍Tensor这个数据类型，我觉得有必要扯一下数学。</p><p>我们都知道：</p><p>标量（Scalar）是只有大小，没有方向的量，如1，2，3等</p><p>向量（Vector）是有大小和方向的量，其实就是一串数字，如(1,2)</p><p>矩阵（Matrix）是好几个向量拍成一排合并而成的一堆数字，如[1,2;3,4]</p><p><img src="https://i.loli.net/2019/10/23/P9ob7ESkndh2CmZ.png" alt="如图，我们可以看出，矩阵是二维的，向量是一维的，标量是零维的。"></p><p>那么张量（Tensor）是什么呢？是按照三维排列的一堆数字？</p><p>是的。但是也不完全正确。</p><p>其实标量，向量，矩阵它们三个也是张量，标量是零维的张量，向量是一维的张量，矩阵是二维的张量。</p><p><img src="https://i.loli.net/2019/10/23/kLCAUNwI4jdViGb.png" alt="张量就是按照任意维排列的一堆数字的推广。如图所示，矩阵不过是三维张量下的一个二维切面。要找到三维张量下的一个标量，需要三个维度的坐标来定位。"></p><p>除此之外，张量还可以是四维的、五维的等等</p><p>数学扯完了，我们撸串代码操练操练。</p><h2 id="2-基础练习"><a href="#2-基础练习" class="headerlink" title="2.基础练习"></a>2.基础练习</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> torch <span class="hljs-comment">#引用torch包</span></span><br><span class="line">x = torch.Tensor(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">#构造一个2x3的矩阵，没初始化但仍然会有值</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">8.0118e+28  4.5768e-41  8.0118e+28</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">4.5768e-41  2.9747e-37  1.4013e-45</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">[torch.FloatTensor of size 2x3]  #可以看出数据类型是浮点数的2x3矩阵</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><p>看矩阵看不出张量的道道，我们来点刺激的</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">y=torch.Tensor(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">#构造一个4x2x3的张量，没初始化</span></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">(0 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  2.5244  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">2.5244  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">(1 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">(2 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">(3 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">2.5244  0.0000  2.5244</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">[torch.FloatTensor of size 4x2x3]</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><p>我们从上面的返回值可以看出，4x2x3的张量y由4个2x3的矩阵构成，这符合了我们数学上的定义。</p><h2 id="3-Tensor的加法-四种"><a href="#3-Tensor的加法-四种" class="headerlink" title="3.Tensor的加法(四种)"></a>3.Tensor的加法(四种)</h2><p>我们先初始化两个张量：</p><p><img src="https://i.loli.net/2019/10/23/aKb2mHCZu3VgITl.png" alt></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;a+b</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;torch.add(a,b)</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;result = torch.Tensor(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;torch.add(a,b,out=result) <span class="hljs-comment">#把运算结果存储在result上</span></span><br><span class="line"></span><br><span class="line">第四种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;b.add_(a) <span class="hljs-comment">#把运算结果覆盖掉b</span></span><br></pre></td></tr></table></figure><h2 id="4-Tensor的部分截取"><a href="#4-Tensor的部分截取" class="headerlink" title="4.Tensor的部分截取"></a>4.Tensor的部分截取</h2><p><img src="https://i.loli.net/2019/10/23/5f3mkoFLcSiWOgt.png" alt></p><h2 id="5-Tensor的其他操作"><a href="#5-Tensor的其他操作" class="headerlink" title="5.Tensor的其他操作"></a>5.Tensor的其他操作</h2><p>除了加法以外，还有上百种张量的操作，比如说转置（transposing），切片（slicing）等，送个<a href="https://pytorch.org/docs/stable/torch.html" target="_blank" rel="noopener">链接</a> 给少侠，少侠自己在家慢慢操练了🏇。</p><h2 id="6-Tensor与numpy的Array的相互转换"><a href="#6-Tensor与numpy的Array的相互转换" class="headerlink" title="6.Tensor与numpy的Array的相互转换"></a>6.Tensor与numpy的Array的相互转换</h2><p>torch的tensor可以与numpy的array进行转换</p><h3 id="（1）tensor⇒array"><a href="#（1）tensor⇒array" class="headerlink" title="（1）tensor⇒array"></a>（1）tensor⇒array</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b = a.numpy() <span class="hljs-comment">#a为tensor</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/23/RAFfxeu1wGcoMNP.png" alt></p><h3 id="（2）array⇒tensor"><a href="#（2）array⇒tensor" class="headerlink" title="（2）array⇒tensor"></a>（2）array⇒tensor</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b = torch.from_numpy(a)  <span class="hljs-comment">#a为numpy的array</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/23/GV7ltc4BhqrvyxW.png" alt></p><h2 id="7-CUDA"><a href="#7-CUDA" class="headerlink" title="7.CUDA"></a>7.CUDA</h2><p>假如少侠你有一块nvidia的显卡并支持cuda（如GTX 1080），那么恭喜你，你可以使用显卡gpu进行tensor的运算。假如你我一样没有，考虑买一个吧</p><p>购买指南：<a href="http://www.sohu.com/a/106650024_157627" target="_blank" rel="noopener">为你的深度学习任务挑选最合适GPU:从性能到价格的全方位指南</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;torch.cuda.is_available()  <span class="hljs-comment">#看看是否支持cuda</span></span><br></pre></td></tr></table></figure><p>假如返回的是True那么，下面的代码将带你飞。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = x.cuda()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;y = y.cuda()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;x+y           <span class="hljs-comment">#这里的x和y都是tensor，使用cuda函数以后，x和y的所有运算均会调用gpu来运算。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习使用前准备：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pytorch.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装pytorch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56936691&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pytorch安装问题解决&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前我的pytorch仍然存在使用问题…&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="pytorch张量" scheme="http://yoursite.com/tags/pytorch%E5%BC%A0%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>动态展示K-means算法</title>
    <link href="http://yoursite.com/2019/10/22/%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BAK-means%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/22/动态展示K-means算法/</id>
    <published>2019-10-22T04:42:05.000Z</published>
    <updated>2019-10-22T04:48:22.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据集及其源代码"><a href="#1-数据集及其源代码" class="headerlink" title="1.数据集及其源代码"></a>1.数据集及其源代码</h2><p><a href="http://pan.sqdxwz.com/?/python/k-means算法/" target="_blank" rel="noopener">下载</a></p><a id="more"></a><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> matplotlib.animation <span class="hljs-keyword">import</span> FuncAnimation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMeans</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, data)</span>:</span></span><br><span class="line">        <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">        data: 要分类的数据，二维数组，每一行是一个样本，列数为样本特征数</span></span><br><span class="line"><span class="hljs-string">        '''</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.calc_classes = np.frompyfunc(          <span class="hljs-comment"># 自定义ufunc，将所有样本分类</span></span><br><span class="line">            self.calc_distance, data.shape[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.fig, self.ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_distance</span><span class="hljs-params">(self, *features)</span>:</span></span><br><span class="line">        <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">        计算单个样本与每个中心的距离，然后将其归于最近的一类</span></span><br><span class="line"><span class="hljs-string">        features: 样本的特征值</span></span><br><span class="line"><span class="hljs-string">        返回样本新的类别</span></span><br><span class="line"><span class="hljs-string">        '''</span></span><br><span class="line">        x = np.array(features)      <span class="hljs-comment"># 将样本的特征转换为一个向量</span></span><br><span class="line">        <span class="hljs-keyword">return</span> np.argmin(np.square(self.center - x).sum(axis=<span class="hljs-number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clustering</span><span class="hljs-params">(self, k)</span>:</span></span><br><span class="line">        <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">        k: 要聚类的数量</span></span><br><span class="line"><span class="hljs-string">        '''</span></span><br><span class="line">        self.k = k</span><br><span class="line">        self.sizes = np.linspace(<span class="hljs-number">40</span>, <span class="hljs-number">100</span>, num=k)</span><br><span class="line">        choices = np.random.randint(<span class="hljs-number">0</span>, self.data.shape[<span class="hljs-number">0</span>], size=k) </span><br><span class="line">        self.center = np.copy(self.data[choices])   <span class="hljs-comment"># 从data中随机选取k行作为随机中心</span></span><br><span class="line">        </span><br><span class="line">        anim = FuncAnimation(self.fig,  <span class="hljs-comment"># 设置动画</span></span><br><span class="line">                func=self.update,       <span class="hljs-comment"># 回调函数，FuncAnimation会在每一帧都调用该函数</span></span><br><span class="line">                frames=np.arange(<span class="hljs-number">8</span>),    <span class="hljs-comment"># 帧数</span></span><br><span class="line">                init_func=self.setup,   <span class="hljs-comment"># 动画初始化</span></span><br><span class="line">                interval=<span class="hljs-number">1000</span>)          <span class="hljs-comment"># 每帧间隔</span></span><br><span class="line">        anim.save(<span class="hljs-string">'clustering.gif'</span>, dpi=<span class="hljs-number">80</span>, writer=<span class="hljs-string">'pillow'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup</span><span class="hljs-params">(self, colors=[<span class="hljs-string">'r'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'k'</span>])</span>:</span></span><br><span class="line">        <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">        动画初始化函数</span></span><br><span class="line"><span class="hljs-string">        '''</span></span><br><span class="line">        cs = self.get_classified_sample()</span><br><span class="line">        </span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(self.k):     <span class="hljs-comment"># 绘制已分类的样本</span></span><br><span class="line">            tmp.append(self.ax.scatter(cs[i][:,<span class="hljs-number">0</span>], cs[i][:,<span class="hljs-number">1</span>], c=colors[i], animated=<span class="hljs-literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(self.k):     <span class="hljs-comment"># 绘制中心</span></span><br><span class="line">            tmp.append(self.ax.scatter(self.center[i,<span class="hljs-number">0</span>], self.center[i,<span class="hljs-number">1</span>], c=colors[i], s=<span class="hljs-number">150</span>, marker=<span class="hljs-string">'x'</span>, animated=<span class="hljs-literal">True</span>))</span><br><span class="line"></span><br><span class="line">        self.sc = tuple(tmp)            <span class="hljs-comment"># 必须转换为元组</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(self.k):     <span class="hljs-comment"># 更新每个簇的中心</span></span><br><span class="line">            self.center[i,:] = cs[i].mean(axis=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.sc      <span class="hljs-comment"># 返回必须是元组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_classified_sample</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">        将所有样本分为k类</span></span><br><span class="line"><span class="hljs-string">        返回一个列表，列表中的每个元素是被归于同一类的样本</span></span><br><span class="line"><span class="hljs-string">        '''</span></span><br><span class="line">        cols = list(self.data.T)</span><br><span class="line">        self.classes = self.calc_classes(*cols)     <span class="hljs-comment"># 计算所有样本的类别</span></span><br><span class="line">        <span class="hljs-keyword">return</span> [self.data[self.classes==i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(self.k)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">(self, j)</span>:</span></span><br><span class="line">        print(j)</span><br><span class="line"></span><br><span class="line">        cs = self.get_classified_sample()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(self.k):</span><br><span class="line">            self.sc[i].set_offsets(cs[i])                       <span class="hljs-comment"># 更新每个簇的点的坐标</span></span><br><span class="line">            self.sc[i]._sizes[<span class="hljs-number">0</span>] = self.sizes[(i+j) % self.k]   <span class="hljs-comment"># 动态调增点的大小，增加视觉对比</span></span><br><span class="line">            self.sc[i+self.k].set_offsets(self.center[i])       <span class="hljs-comment"># 更新每个簇中心的坐标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(self.k):         <span class="hljs-comment"># 更新每个簇的中心</span></span><br><span class="line">            self.center[i,:] = cs[i].mean(axis=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.sc      <span class="hljs-comment"># 返回必须是元组</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    data = np.loadtxt(<span class="hljs-string">'./test.txt'</span>)</span><br><span class="line">    km = KMeans(data)</span><br><span class="line">    km.clustering(<span class="hljs-number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="3-动画展示"><a href="#3-动画展示" class="headerlink" title="3.动画展示"></a>3.动画展示</h2><p><a href="https://sm.ms/image/awHv7bM8WtYGnBc" target="_blank"><img src="https://i.loli.net/2019/10/22/awHv7bM8WtYGnBc.gif"></a></p><p><a href="https://sm.ms/image/Sb8KIlhgtaNXjE6" target="_blank"><img src="https://i.loli.net/2019/10/22/Sb8KIlhgtaNXjE6.gif"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-数据集及其源代码&quot;&gt;&lt;a href=&quot;#1-数据集及其源代码&quot; class=&quot;headerlink&quot; title=&quot;1.数据集及其源代码&quot;&gt;&lt;/a&gt;1.数据集及其源代码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://pan.sqdxwz.com/?/python/k-means算法/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="k-means算法" scheme="http://yoursite.com/tags/k-means%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>当你的贪吃蛇吃满屏幕后...</title>
    <link href="http://yoursite.com/2019/10/21/%E5%BD%93%E4%BD%A0%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87%E5%90%83%E6%BB%A1%E5%B1%8F%E5%B9%95%E5%90%8E/"/>
    <id>http://yoursite.com/2019/10/21/当你的贪吃蛇吃满屏幕后/</id>
    <published>2019-10-21T13:36:41.000Z</published>
    <updated>2019-10-21T13:45:54.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>A snake AI written in python. Use curses module, Windows users<br>should install it first: <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses</a></p><a id="more"></a><p><strong>注意:</strong>curses库在windows可以安装但还是有许多问题，建议在linux和mac下运行代码！</p><p>怎么样运行代码？</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python snake.py</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> curses</span><br><span class="line"><span class="hljs-keyword">from</span> curses <span class="hljs-keyword">import</span> KEY_RIGHT, KEY_LEFT, KEY_UP, KEY_DOWN</span><br><span class="line"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 蛇运动的场地长宽</span></span><br><span class="line">HEIGHT = <span class="hljs-number">10</span></span><br><span class="line">WIDTH = <span class="hljs-number">20</span></span><br><span class="line">FIELD_SIZE = HEIGHT * WIDTH</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 蛇头总是位于snake数组的第一个元素</span></span><br><span class="line">HEAD = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 用来代表不同东西的数字，由于矩阵上每个格子会处理成到达食物的路径长度，</span></span><br><span class="line"><span class="hljs-comment"># 因此这三个变量间需要有足够大的间隔(&gt;HEIGHT*WIDTH)</span></span><br><span class="line">FOOD = <span class="hljs-number">0</span></span><br><span class="line">UNDEFINED = (HEIGHT + <span class="hljs-number">1</span>) * (WIDTH + <span class="hljs-number">1</span>)</span><br><span class="line">SNAKE = <span class="hljs-number">2</span> * UNDEFINED</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 由于snake是一维数组，所以对应元素直接加上以下值就表示向四个方向移动</span></span><br><span class="line">LEFT = <span class="hljs-number">-1</span></span><br><span class="line">RIGHT = <span class="hljs-number">1</span></span><br><span class="line">UP = -WIDTH</span><br><span class="line">DOWN = WIDTH</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 错误码</span></span><br><span class="line">ERR = <span class="hljs-number">-1111</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 用一维数组来表示二维的东西</span></span><br><span class="line"><span class="hljs-comment"># board表示蛇运动的矩形场地</span></span><br><span class="line"><span class="hljs-comment"># 初始化蛇头在(1,1)的地方，第0行，HEIGHT行，第0列，WIDTH列为围墙，不可用</span></span><br><span class="line"><span class="hljs-comment"># 初始蛇长度为1</span></span><br><span class="line">board = [<span class="hljs-number">0</span>] * FIELD_SIZE</span><br><span class="line">snake = [<span class="hljs-number">0</span>] * (FIELD_SIZE+<span class="hljs-number">1</span>)</span><br><span class="line">snake[HEAD] = <span class="hljs-number">1</span>*WIDTH+<span class="hljs-number">1</span></span><br><span class="line">snake_size = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-comment"># 与上面变量对应的临时变量，蛇试探性地移动时使用</span></span><br><span class="line">tmpboard = [<span class="hljs-number">0</span>] * FIELD_SIZE</span><br><span class="line">tmpsnake = [<span class="hljs-number">0</span>] * (FIELD_SIZE+<span class="hljs-number">1</span>)</span><br><span class="line">tmpsnake[HEAD] = <span class="hljs-number">1</span>*WIDTH+<span class="hljs-number">1</span></span><br><span class="line">tmpsnake_size = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># food:食物位置(0~FIELD_SIZE-1),初始在(3, 3)</span></span><br><span class="line"><span class="hljs-comment"># best_move: 运动方向</span></span><br><span class="line">food = <span class="hljs-number">3</span> * WIDTH + <span class="hljs-number">3</span></span><br><span class="line">best_move = ERR</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 运动方向数组</span></span><br><span class="line">mov = [LEFT, RIGHT, UP, DOWN]</span><br><span class="line"><span class="hljs-comment"># 接收到的键 和 分数</span></span><br><span class="line">key = KEY_RIGHT                                                    </span><br><span class="line">score = <span class="hljs-number">1</span> <span class="hljs-comment">#分数也表示蛇长</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 检查一个cell有没有被蛇身覆盖，没有覆盖则为free，返回true</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_cell_free</span><span class="hljs-params">(idx, psize, psnake)</span>:</span></span><br><span class="line">    <span class="hljs-comment">#return not (idx in psnake[:]) #错！psnake后面还有很多没用上的单元</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(psize):</span><br><span class="line">        <span class="hljs-keyword">if</span> idx == psnake[i]: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 检查某个位置idx是否可向move方向运动</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_move_possible</span><span class="hljs-params">(idx, move)</span>:</span></span><br><span class="line">    flag = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">if</span> move == LEFT:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx%WIDTH &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> move == RIGHT:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx%WIDTH &lt; (WIDTH<span class="hljs-number">-2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> move == UP:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx &gt; (<span class="hljs-number">2</span>*WIDTH<span class="hljs-number">-1</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># 即idx/WIDTH &gt; 1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> move == DOWN:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx &lt; (FIELD_SIZE<span class="hljs-number">-2</span>*WIDTH) <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># 即idx/WIDTH &lt; HEIGHT-2</span></span><br><span class="line">    <span class="hljs-keyword">return</span> flag</span><br><span class="line"><span class="hljs-comment"># 重置board</span></span><br><span class="line"><span class="hljs-comment"># board_refresh后，UNDEFINED值都变为了到达食物的路径长度</span></span><br><span class="line"><span class="hljs-comment"># 如需要还原，则要重置它</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">board_reset</span><span class="hljs-params">(psnake, psize, pboard)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(FIELD_SIZE):</span><br><span class="line">       <span class="hljs-comment"># f.write('hello ' + str(len(pboard)) +' ' +str(i)+'\n')</span></span><br><span class="line">        <span class="hljs-keyword">if</span> i == food:</span><br><span class="line">            pboard[i] = FOOD</span><br><span class="line">        <span class="hljs-keyword">elif</span> is_cell_free(i, psize, psnake): <span class="hljs-comment"># 该位置为空</span></span><br><span class="line">            pboard[i] = UNDEFINED</span><br><span class="line">        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 该位置为蛇身</span></span><br><span class="line">            pboard[i] = SNAKE</span><br><span class="line">    </span><br><span class="line"><span class="hljs-comment"># def board_refresh(pfood, psnake, pboard):</span></span><br><span class="line"><span class="hljs-comment">#     board_changed = True</span></span><br><span class="line"><span class="hljs-comment">#     found = False</span></span><br><span class="line"><span class="hljs-comment">#     while board_changed: # 一直更新board，直到每个格子上的数都对应到达食物的步数，不能再改变为止</span></span><br><span class="line"><span class="hljs-comment">#         board_changed = False</span></span><br><span class="line"><span class="hljs-comment">#         for i in xrange(FIELD_SIZE):</span></span><br><span class="line"><span class="hljs-comment">#             if pboard[i] &lt; SNAKE: </span></span><br><span class="line"><span class="hljs-comment">#                 min = pboard[i]</span></span><br><span class="line"><span class="hljs-comment">#                 for j in xrange(4):</span></span><br><span class="line"><span class="hljs-comment">#                     if is_move_possible(i, mov[j]) and pboard[i+mov[j]] &lt; min:</span></span><br><span class="line"><span class="hljs-comment">#                         min = pboard[i+mov[j]]</span></span><br><span class="line"><span class="hljs-comment">#                 if pboard[i] &gt; min+1:</span></span><br><span class="line"><span class="hljs-comment">#                     pboard[i] = min + 1</span></span><br><span class="line"><span class="hljs-comment">#                     board_changed = True</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#         if ~board_changed: break # 不再改变，退出</span></span><br><span class="line"><span class="hljs-comment">#         board_changed = False</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#         for i in xrange(FIELD_SIZE-1, -1, -1): # [FIELD_SIZE-1, 0]</span></span><br><span class="line"><span class="hljs-comment">#             if pboard[i] &lt; SNAKE:</span></span><br><span class="line"><span class="hljs-comment">#                 min = pboard[i]</span></span><br><span class="line"><span class="hljs-comment">#                 for j in xrange(4):</span></span><br><span class="line"><span class="hljs-comment">#                     if is_move_possible(i, mov[j]) and pboard[i+mov[j]] &lt; min:</span></span><br><span class="line"><span class="hljs-comment">#                         min = pboard[i+mov[j]]</span></span><br><span class="line"><span class="hljs-comment">#                 if pboard[i] &gt; min+1:</span></span><br><span class="line"><span class="hljs-comment">#                     pboard[i] = min + 1</span></span><br><span class="line"><span class="hljs-comment">#                     board_changed = True</span></span><br><span class="line"><span class="hljs-comment">#     for i in xrange(4):</span></span><br><span class="line"><span class="hljs-comment">#         if is_move_possible(psnake[HEAD], mov[i]) and pboard[psnake[HEAD]+mov[i]]&lt;UNDEFINED:</span></span><br><span class="line"><span class="hljs-comment">#             flag = True</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#     return flag</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 广度优先搜索遍历整个board，</span></span><br><span class="line"><span class="hljs-comment"># 计算出board中每个非SNAKE元素到达食物的路径长度</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">board_refresh</span><span class="hljs-params">(pfood, psnake, pboard)</span>:</span></span><br><span class="line">    queue = []</span><br><span class="line">    queue.append(pfood)</span><br><span class="line">    inqueue = [<span class="hljs-number">0</span>] * FIELD_SIZE</span><br><span class="line">    found = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-comment"># while循环结束后，除了蛇的身体，</span></span><br><span class="line">    <span class="hljs-comment"># 其它每个方格中的数字代码从它到食物的路径长度</span></span><br><span class="line">    <span class="hljs-comment">#f.write('bfs begin:\n')</span></span><br><span class="line">    <span class="hljs-keyword">while</span> len(queue)!=<span class="hljs-number">0</span>: </span><br><span class="line">        idx = queue.pop(<span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> inqueue[idx] == <span class="hljs-number">1</span>: <span class="hljs-keyword">continue</span></span><br><span class="line">        <span class="hljs-comment">#f.write(str(idx)+'\n')</span></span><br><span class="line">        inqueue[idx] = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> is_move_possible(idx, mov[i]):</span><br><span class="line">                <span class="hljs-keyword">if</span> idx + mov[i] == psnake[HEAD]:</span><br><span class="line">                    found = <span class="hljs-literal">True</span></span><br><span class="line">                <span class="hljs-keyword">if</span> pboard[idx+mov[i]] &lt; SNAKE: <span class="hljs-comment"># 如果该点不是蛇的身体</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-keyword">if</span> pboard[idx+mov[i]] &gt; pboard[idx]+<span class="hljs-number">1</span>:</span><br><span class="line">                        pboard[idx+mov[i]] = pboard[idx] + <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">if</span> inqueue[idx+mov[i]] == <span class="hljs-number">0</span>:</span><br><span class="line">                        queue.append(idx+mov[i])</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#f.write('bfs end\n')</span></span><br><span class="line">    <span class="hljs-comment">#f.write('found: ' + str(found) +'\n')</span></span><br><span class="line">    <span class="hljs-keyword">return</span> found</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 从蛇头开始，根据board中元素值，</span></span><br><span class="line"><span class="hljs-comment"># 从蛇头周围4个领域点中选择最短路径</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choose_shortest_safe_move</span><span class="hljs-params">(psnake, pboard)</span>:</span></span><br><span class="line">    best_move = ERR</span><br><span class="line">    min = SNAKE</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(psnake[HEAD], mov[i]) <span class="hljs-keyword">and</span> pboard[psnake[HEAD]+mov[i]]&lt;min:</span><br><span class="line">            min = pboard[psnake[HEAD]+mov[i]]</span><br><span class="line">            best_move = mov[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> best_move</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 从蛇头开始，根据board中元素值，</span></span><br><span class="line"><span class="hljs-comment"># 从蛇头周围4个领域点中选择最远路径</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choose_longest_safe_move</span><span class="hljs-params">(psnake, pboard)</span>:</span></span><br><span class="line">    best_move = ERR</span><br><span class="line">    max = <span class="hljs-number">-1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(psnake[HEAD], mov[i]) <span class="hljs-keyword">and</span> pboard[psnake[HEAD]+mov[i]]&lt;UNDEFINED <span class="hljs-keyword">and</span> pboard[psnake[HEAD]+mov[i]]&gt;max:</span><br><span class="line">            max = pboard[psnake[HEAD]+mov[i]]</span><br><span class="line">            best_move = mov[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> best_move</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 检查是否可以追着蛇尾运动，即蛇头和蛇尾间是有路径的</span></span><br><span class="line"><span class="hljs-comment"># 为的是避免蛇头陷入死路</span></span><br><span class="line"><span class="hljs-comment"># 虚拟操作，在tmpboard,tmpsnake中进行</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_tail_inside</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> tmpboard, tmpsnake, food, tmpsnake_size</span><br><span class="line">    tmpboard[tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>]] = <span class="hljs-number">0</span> <span class="hljs-comment"># 虚拟地将蛇尾变为食物(因为是虚拟的，所以在tmpsnake,tmpboard中进行)</span></span><br><span class="line">    tmpboard[food] = SNAKE <span class="hljs-comment"># 放置食物的地方，看成蛇身</span></span><br><span class="line">    result = board_refresh(tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>], tmpsnake, tmpboard) <span class="hljs-comment"># 求得每个位置到蛇尾的路径长度</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>): <span class="hljs-comment"># 如果蛇头和蛇尾紧挨着，则返回False。即不能follow_tail，追着蛇尾运动了</span></span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(tmpsnake[HEAD], mov[i]) <span class="hljs-keyword">and</span> tmpsnake[HEAD]+mov[i]==tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>] <span class="hljs-keyword">and</span> tmpsnake_size&gt;<span class="hljs-number">3</span>:</span><br><span class="line">            result = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 让蛇头朝着蛇尾运行一步</span></span><br><span class="line"><span class="hljs-comment"># 不管蛇身阻挡，朝蛇尾方向运行</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">follow_tail</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> tmpboard, tmpsnake, food, tmpsnake_size</span><br><span class="line">    tmpsnake_size = snake_size</span><br><span class="line">    tmpsnake = snake[:]</span><br><span class="line">    board_reset(tmpsnake, tmpsnake_size, tmpboard) <span class="hljs-comment"># 重置虚拟board</span></span><br><span class="line">    tmpboard[tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>]] = FOOD <span class="hljs-comment"># 让蛇尾成为食物</span></span><br><span class="line">    tmpboard[food] = SNAKE <span class="hljs-comment"># 让食物的地方变成蛇身</span></span><br><span class="line">    board_refresh(tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>], tmpsnake, tmpboard) <span class="hljs-comment"># 求得各个位置到达蛇尾的路径长度</span></span><br><span class="line">    tmpboard[tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>]] = SNAKE <span class="hljs-comment"># 还原蛇尾</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># return choose_longest_safe_move(tmpsnake, tmpboard) # 返回运行方向(让蛇头运动1步)</span></span><br><span class="line">    <span class="hljs-keyword">return</span> choose_longest_safe_move(tmpsnake, tmpboard)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 在各种方案都不行时，随便找一个可行的方向来走(1步),</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">any_possible_move</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> food , snake, snake_size, board</span><br><span class="line">    best_move = ERR</span><br><span class="line">    board_reset(snake, snake_size, board)</span><br><span class="line">    board_refresh(food, snake, board)</span><br><span class="line">    min = SNAKE</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(snake[HEAD], mov[i]) <span class="hljs-keyword">and</span> board[snake[HEAD]+mov[i]]&lt;min:</span><br><span class="line">            min = board[snake[HEAD]+mov[i]]</span><br><span class="line">            best_move = mov[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> best_move</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shift_array</span><span class="hljs-params">(arr, size)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(size, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">        arr[i] = arr[i<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_food</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> food, snake_size</span><br><span class="line">    <span class="hljs-keyword">if</span> snake_size &gt;= FIELD_SIZE<span class="hljs-number">-1</span>: <span class="hljs-keyword">return</span></span><br><span class="line">    cell_free = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> cell_free:</span><br><span class="line">        w = randint(<span class="hljs-number">1</span>, WIDTH<span class="hljs-number">-2</span>)</span><br><span class="line">        h = randint(<span class="hljs-number">1</span>, HEIGHT<span class="hljs-number">-2</span>)</span><br><span class="line">        food = h * WIDTH + w</span><br><span class="line">        cell_free = is_cell_free(food, snake_size, snake)</span><br><span class="line">    win.addch(food/WIDTH, food%WIDTH, <span class="hljs-string">'@'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 真正的蛇在这个函数中，朝pbest_move走1步</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_move</span><span class="hljs-params">(pbest_move)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> key, snake, board, snake_size, score</span><br><span class="line">    shift_array(snake, snake_size)</span><br><span class="line">    snake[HEAD] += pbest_move</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 按esc退出，getch同时保证绘图的流畅性，没有它只会看到最终结果</span></span><br><span class="line">    win.timeout(<span class="hljs-number">10</span>)</span><br><span class="line">    event = win.getch()</span><br><span class="line">    key = key <span class="hljs-keyword">if</span> event == <span class="hljs-number">-1</span> <span class="hljs-keyword">else</span> event</span><br><span class="line">    <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>: <span class="hljs-keyword">return</span></span><br><span class="line"></span><br><span class="line">    p = snake[HEAD]</span><br><span class="line">    win.addch(p/WIDTH, p%WIDTH, <span class="hljs-string">'*'</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># 如果新加入的蛇头就是食物的位置</span></span><br><span class="line">    <span class="hljs-comment"># 蛇长加1，产生新的食物，重置board(因为原来那些路径长度已经用不上了)</span></span><br><span class="line">    <span class="hljs-keyword">if</span> snake[HEAD] == food:</span><br><span class="line">        board[snake[HEAD]] = SNAKE <span class="hljs-comment"># 新的蛇头</span></span><br><span class="line">        snake_size += <span class="hljs-number">1</span></span><br><span class="line">        score += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> snake_size &lt; FIELD_SIZE: new_food()</span><br><span class="line">        <span class="hljs-comment">#board_reset(snake, board) # </span></span><br><span class="line">        <span class="hljs-comment">#return True</span></span><br><span class="line">    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果新加入的蛇头不是食物的位置</span></span><br><span class="line">        board[snake[HEAD]] = SNAKE <span class="hljs-comment"># 新的蛇头</span></span><br><span class="line">        board[snake[snake_size]] = UNDEFINED <span class="hljs-comment"># 蛇尾变为空格</span></span><br><span class="line">        win.addch(snake[snake_size]/WIDTH, snake[snake_size]%WIDTH, <span class="hljs-string">' '</span>)</span><br><span class="line">        <span class="hljs-comment">#return False</span></span><br><span class="line">    <span class="hljs-comment"># test 打印tmpboard</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(HEIGHT):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(WIDTH):</span><br><span class="line">            k = board[i*WIDTH+j]</span><br><span class="line">            f.write(str(k)+<span class="hljs-string">' '</span>)</span><br><span class="line">        f.write(<span class="hljs-string">'\n'</span>)</span><br><span class="line">    <span class="hljs-comment"># print symbol</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(HEIGHT):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(WIDTH):</span><br><span class="line">            k = board[i*WIDTH+j]</span><br><span class="line">            <span class="hljs-keyword">if</span> k == UNDEFINED:</span><br><span class="line">                f.write(<span class="hljs-string">'# '</span>)</span><br><span class="line">            <span class="hljs-keyword">elif</span> k == SNAKE:</span><br><span class="line">                <span class="hljs-keyword">if</span> i*WIDTH+j == snake[HEAD]:</span><br><span class="line">                    f.write(<span class="hljs-string">'+ '</span>) <span class="hljs-comment"># 蛇头</span></span><br><span class="line">                <span class="hljs-keyword">elif</span> i*WIDTH+j == snake[snake_size<span class="hljs-number">-1</span>]:</span><br><span class="line">                    f.write(<span class="hljs-string">'- '</span>) <span class="hljs-comment"># 蛇尾</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    f.write(<span class="hljs-string">'* '</span>)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                f.write(str(k)+<span class="hljs-string">' '</span>)</span><br><span class="line">        f.write(<span class="hljs-string">'\n'</span>)</span><br><span class="line">    f.write(<span class="hljs-string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 虚拟地运行一次，然后在调用处检查这次运行可否可行</span></span><br><span class="line"><span class="hljs-comment"># 可行才真实运行。</span></span><br><span class="line"><span class="hljs-comment"># 虚拟运行吃到食物后，得到虚拟下蛇在board的位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">virtual_shortest_move</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> snake, board, snake_size, tmpsnake, tmpboard, tmpsnake_size, food</span><br><span class="line">    <span class="hljs-comment">#f.write('i am in virtual\n')</span></span><br><span class="line">    tmpsnake_size = snake_size</span><br><span class="line">    tmpsnake = snake[:] <span class="hljs-comment"># 如果直接tmpsnake=snake，则两者指向同一处内存</span></span><br><span class="line">    tmpboard = board[:] <span class="hljs-comment"># board中已经是各位置到达食物的路径长度了，不用再计算</span></span><br><span class="line">    board_reset(tmpsnake, tmpsnake_size, tmpboard)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># test 打印tmpboard</span></span><br><span class="line">    <span class="hljs-comment"># for i in xrange(HEIGHT):</span></span><br><span class="line">    <span class="hljs-comment">#     for j in xrange(WIDTH):</span></span><br><span class="line">    <span class="hljs-comment">#         k = tmpboard[i*WIDTH+j]</span></span><br><span class="line">    <span class="hljs-comment">#         f.write(str(k)+' ')</span></span><br><span class="line">    <span class="hljs-comment">#     f.write('\n')</span></span><br><span class="line">    </span><br><span class="line">    food_eated = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> food_eated:</span><br><span class="line">        board_refresh(food, tmpsnake, tmpboard)    </span><br><span class="line">        move = choose_shortest_safe_move(tmpsnake, tmpboard)</span><br><span class="line">        shift_array(tmpsnake, tmpsnake_size)</span><br><span class="line">        tmpsnake[HEAD] += move <span class="hljs-comment"># 在蛇头前加入一个新的位置</span></span><br><span class="line">        <span class="hljs-comment">#f.write('snake head: '+str(tmpsnake[HEAD])+'\n')</span></span><br><span class="line">        <span class="hljs-comment"># 如果新加入的蛇头的位置正好是食物的位置</span></span><br><span class="line">        <span class="hljs-comment"># 则长度加1，重置board，食物那个位置变为蛇的一部分(SNAKE)</span></span><br><span class="line">        <span class="hljs-keyword">if</span> tmpsnake[HEAD] == food:</span><br><span class="line">            tmpsnake_size += <span class="hljs-number">1</span></span><br><span class="line">            board_reset(tmpsnake, tmpsnake_size, tmpboard) <span class="hljs-comment"># 虚拟运行后，蛇在board的位置(label101010)</span></span><br><span class="line">            tmpboard[food] = SNAKE</span><br><span class="line">            food_eated = <span class="hljs-literal">True</span></span><br><span class="line">        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果蛇头不是食物的位置，则新加入的位置为蛇头，最后一个变为空格</span></span><br><span class="line">            tmpboard[tmpsnake[HEAD]] = SNAKE</span><br><span class="line">            tmpboard[tmpsnake[tmpsnake_size]] = UNDEFINED</span><br><span class="line">    <span class="hljs-comment">#f.write('i am out virtual\n')</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 如果蛇与食物间有路径，则调用本函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_safe_way</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> snake, board</span><br><span class="line">    safe_move = ERR</span><br><span class="line">    <span class="hljs-comment"># 虚拟地运行一次，因为已经确保蛇与食物间有路径，所以执行有效</span></span><br><span class="line">    <span class="hljs-comment"># 运行后得到虚拟下蛇在board中的位置，即tmpboard，见label101010</span></span><br><span class="line">    virtual_shortest_move() <span class="hljs-comment"># 该函数唯一调用处</span></span><br><span class="line">    <span class="hljs-keyword">if</span> is_tail_inside(): <span class="hljs-comment"># 如果虚拟运行后，蛇头蛇尾间有通路，则选最短路运行(1步)</span></span><br><span class="line">        <span class="hljs-keyword">return</span> choose_shortest_safe_move(snake, board)</span><br><span class="line">    safe_move = follow_tail() <span class="hljs-comment"># 否则虚拟地follow_tail 1步，如果可以做到，返回true</span></span><br><span class="line">    <span class="hljs-keyword">return</span> safe_move</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curses.initscr()</span><br><span class="line">win = curses.newwin(HEIGHT, WIDTH, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br><span class="line">win.keypad(<span class="hljs-number">1</span>)</span><br><span class="line">curses.noecho()</span><br><span class="line">curses.curs_set(<span class="hljs-number">0</span>)</span><br><span class="line">win.border(<span class="hljs-number">0</span>)</span><br><span class="line">win.nodelay(<span class="hljs-number">1</span>)</span><br><span class="line">win.addch(food/WIDTH, food%WIDTH, <span class="hljs-string">'@'</span>)</span><br><span class="line"></span><br><span class="line">f = file(<span class="hljs-string">'log'</span>, <span class="hljs-string">'w'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">while</span> key != <span class="hljs-number">27</span>:</span><br><span class="line">    win.border(<span class="hljs-number">0</span>)</span><br><span class="line">    win.addstr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'s:'</span> + str(score) + <span class="hljs-string">' '</span>)               </span><br><span class="line">    <span class="hljs-comment">#win.addstr(0, WIDTH/2-3, ' SNAKE ')                                  </span></span><br><span class="line">    win.timeout(<span class="hljs-number">10</span>)</span><br><span class="line">    <span class="hljs-comment"># 接收键盘输入，同时也使显示流畅</span></span><br><span class="line">    event = win.getch()</span><br><span class="line">    key = key <span class="hljs-keyword">if</span> event == <span class="hljs-number">-1</span> <span class="hljs-keyword">else</span> event</span><br><span class="line">    <span class="hljs-keyword">if</span> snake_size &gt;= FIELD_SIZE: <span class="hljs-keyword">continue</span></span><br><span class="line">    <span class="hljs-comment"># 重置矩阵</span></span><br><span class="line">    board_reset(snake, snake_size, board)</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># 如果蛇可以吃到食物，board_refresh返回true</span></span><br><span class="line">    <span class="hljs-comment"># 并且board中除了蛇身(=SNAKE)，其它的元素值表示从该点运动到食物的最短路径长</span></span><br><span class="line">    <span class="hljs-keyword">if</span> board_refresh(food, snake, board):</span><br><span class="line">        best_move  = find_safe_way() <span class="hljs-comment"># find_safe_way的唯一调用处</span></span><br><span class="line">        f.write(<span class="hljs-string">'find safe way: '</span> + str(best_move) + <span class="hljs-string">'\n'</span>)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        best_move = follow_tail()</span><br><span class="line">        f.write(<span class="hljs-string">'follow tail: '</span> + str(best_move) +<span class="hljs-string">'\n'</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="hljs-keyword">if</span> best_move == ERR:</span><br><span class="line">        best_move = any_possible_move()</span><br><span class="line">        f.write(<span class="hljs-string">'any possible move: '</span> + str(best_move) + <span class="hljs-string">'\n'</span>)</span><br><span class="line">    <span class="hljs-comment"># 上面一次思考，只得出一个方向，运行一步</span></span><br><span class="line">    <span class="hljs-keyword">if</span> best_move != ERR: make_move(best_move)   </span><br><span class="line">    <span class="hljs-keyword">else</span>: <span class="hljs-keyword">break</span>        </span><br><span class="line">        </span><br><span class="line">f.close()</span><br><span class="line">curses.endwin()</span><br><span class="line">print(<span class="hljs-string">"\nScore - "</span> + str(score))</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> curses</span><br><span class="line"><span class="hljs-keyword">from</span> curses <span class="hljs-keyword">import</span> KEY_RIGHT, KEY_LEFT, KEY_UP, KEY_DOWN</span><br><span class="line"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 蛇运动的场地长宽</span></span><br><span class="line">HEIGHT = <span class="hljs-number">10</span></span><br><span class="line">WIDTH = <span class="hljs-number">20</span></span><br><span class="line">FIELD_SIZE = HEIGHT * WIDTH</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 蛇头总是位于snake数组的第一个元素</span></span><br><span class="line">HEAD = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 用来代表不同东西的数字，由于矩阵上每个格子会处理成到达食物的路径长度，</span></span><br><span class="line"><span class="hljs-comment"># 因此这三个变量间需要有足够大的间隔(&gt;HEIGHT*WIDTH)</span></span><br><span class="line">FOOD = <span class="hljs-number">0</span></span><br><span class="line">UNDEFINED = (HEIGHT + <span class="hljs-number">1</span>) * (WIDTH + <span class="hljs-number">1</span>)</span><br><span class="line">SNAKE = <span class="hljs-number">2</span> * UNDEFINED</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 由于snake是一维数组，所以对应元素直接加上以下值就表示向四个方向移动</span></span><br><span class="line">LEFT = <span class="hljs-number">-1</span></span><br><span class="line">RIGHT = <span class="hljs-number">1</span></span><br><span class="line">UP = -WIDTH</span><br><span class="line">DOWN = WIDTH</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 错误码</span></span><br><span class="line">ERR = <span class="hljs-number">-1111</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 用一维数组来表示二维的东西</span></span><br><span class="line"><span class="hljs-comment"># board表示蛇运动的矩形场地</span></span><br><span class="line"><span class="hljs-comment"># 初始化蛇头在(1,1)的地方，第0行，HEIGHT行，第0列，WIDTH列为围墙，不可用</span></span><br><span class="line"><span class="hljs-comment"># 初始蛇长度为1</span></span><br><span class="line">board = [<span class="hljs-number">0</span>] * FIELD_SIZE</span><br><span class="line">snake = [<span class="hljs-number">0</span>] * (FIELD_SIZE+<span class="hljs-number">1</span>)</span><br><span class="line">snake[HEAD] = <span class="hljs-number">1</span>*WIDTH+<span class="hljs-number">1</span></span><br><span class="line">snake_size = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-comment"># 与上面变量对应的临时变量，蛇试探性地移动时使用</span></span><br><span class="line">tmpboard = [<span class="hljs-number">0</span>] * FIELD_SIZE</span><br><span class="line">tmpsnake = [<span class="hljs-number">0</span>] * (FIELD_SIZE+<span class="hljs-number">1</span>)</span><br><span class="line">tmpsnake[HEAD] = <span class="hljs-number">1</span>*WIDTH+<span class="hljs-number">1</span></span><br><span class="line">tmpsnake_size = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># food:食物位置(0~FIELD_SIZE-1),初始在(3, 3)</span></span><br><span class="line"><span class="hljs-comment"># best_move: 运动方向</span></span><br><span class="line">food = <span class="hljs-number">3</span> * WIDTH + <span class="hljs-number">3</span></span><br><span class="line">best_move = ERR</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 运动方向数组</span></span><br><span class="line">mov = [LEFT, RIGHT, UP, DOWN]</span><br><span class="line"><span class="hljs-comment"># 接收到的键 和 分数</span></span><br><span class="line">key = KEY_RIGHT                                                    </span><br><span class="line">score = <span class="hljs-number">1</span> <span class="hljs-comment">#分数也表示蛇长</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 检查一个cell有没有被蛇身覆盖，没有覆盖则为free，返回true</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_cell_free</span><span class="hljs-params">(idx, psize, psnake)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> (idx <span class="hljs-keyword">in</span> psnake[:psize]) </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 检查某个位置idx是否可向move方向运动</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_move_possible</span><span class="hljs-params">(idx, move)</span>:</span></span><br><span class="line">    flag = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">if</span> move == LEFT:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx%WIDTH &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> move == RIGHT:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx%WIDTH &lt; (WIDTH<span class="hljs-number">-2</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> move == UP:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx &gt; (<span class="hljs-number">2</span>*WIDTH<span class="hljs-number">-1</span>) <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># 即idx/WIDTH &gt; 1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> move == DOWN:</span><br><span class="line">        flag = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> idx &lt; (FIELD_SIZE<span class="hljs-number">-2</span>*WIDTH) <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># 即idx/WIDTH &lt; HEIGHT-2</span></span><br><span class="line">    <span class="hljs-keyword">return</span> flag</span><br><span class="line"><span class="hljs-comment"># 重置board</span></span><br><span class="line"><span class="hljs-comment"># board_refresh后，UNDEFINED值都变为了到达食物的路径长度</span></span><br><span class="line"><span class="hljs-comment"># 如需要还原，则要重置它</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">board_reset</span><span class="hljs-params">(psnake, psize, pboard)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(FIELD_SIZE):</span><br><span class="line">        <span class="hljs-keyword">if</span> i == food:</span><br><span class="line">            pboard[i] = FOOD</span><br><span class="line">        <span class="hljs-keyword">elif</span> is_cell_free(i, psize, psnake): <span class="hljs-comment"># 该位置为空</span></span><br><span class="line">            pboard[i] = UNDEFINED</span><br><span class="line">        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 该位置为蛇身</span></span><br><span class="line">            pboard[i] = SNAKE</span><br><span class="line">    </span><br><span class="line"><span class="hljs-comment"># 广度优先搜索遍历整个board，</span></span><br><span class="line"><span class="hljs-comment"># 计算出board中每个非SNAKE元素到达食物的路径长度</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">board_refresh</span><span class="hljs-params">(pfood, psnake, pboard)</span>:</span></span><br><span class="line">    queue = []</span><br><span class="line">    queue.append(pfood)</span><br><span class="line">    inqueue = [<span class="hljs-number">0</span>] * FIELD_SIZE</span><br><span class="line">    found = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-comment"># while循环结束后，除了蛇的身体，</span></span><br><span class="line">    <span class="hljs-comment"># 其它每个方格中的数字代码从它到食物的路径长度</span></span><br><span class="line">    <span class="hljs-keyword">while</span> len(queue)!=<span class="hljs-number">0</span>: </span><br><span class="line">        idx = queue.pop(<span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> inqueue[idx] == <span class="hljs-number">1</span>: <span class="hljs-keyword">continue</span></span><br><span class="line">        inqueue[idx] = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> is_move_possible(idx, mov[i]):</span><br><span class="line">                <span class="hljs-keyword">if</span> idx + mov[i] == psnake[HEAD]:</span><br><span class="line">                    found = <span class="hljs-literal">True</span></span><br><span class="line">                <span class="hljs-keyword">if</span> pboard[idx+mov[i]] &lt; SNAKE: <span class="hljs-comment"># 如果该点不是蛇的身体</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-keyword">if</span> pboard[idx+mov[i]] &gt; pboard[idx]+<span class="hljs-number">1</span>:</span><br><span class="line">                        pboard[idx+mov[i]] = pboard[idx] + <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">if</span> inqueue[idx+mov[i]] == <span class="hljs-number">0</span>:</span><br><span class="line">                        queue.append(idx+mov[i])</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> found</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 从蛇头开始，根据board中元素值，</span></span><br><span class="line"><span class="hljs-comment"># 从蛇头周围4个领域点中选择最短路径</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choose_shortest_safe_move</span><span class="hljs-params">(psnake, pboard)</span>:</span></span><br><span class="line">    best_move = ERR</span><br><span class="line">    min = SNAKE</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(psnake[HEAD], mov[i]) <span class="hljs-keyword">and</span> pboard[psnake[HEAD]+mov[i]]&lt;min:</span><br><span class="line">            min = pboard[psnake[HEAD]+mov[i]]</span><br><span class="line">            best_move = mov[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> best_move</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 从蛇头开始，根据board中元素值，</span></span><br><span class="line"><span class="hljs-comment"># 从蛇头周围4个领域点中选择最远路径</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choose_longest_safe_move</span><span class="hljs-params">(psnake, pboard)</span>:</span></span><br><span class="line">    best_move = ERR</span><br><span class="line">    max = <span class="hljs-number">-1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(psnake[HEAD], mov[i]) <span class="hljs-keyword">and</span> pboard[psnake[HEAD]+mov[i]]&lt;UNDEFINED <span class="hljs-keyword">and</span> pboard[psnake[HEAD]+mov[i]]&gt;max:</span><br><span class="line">            max = pboard[psnake[HEAD]+mov[i]]</span><br><span class="line">            best_move = mov[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> best_move</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 检查是否可以追着蛇尾运动，即蛇头和蛇尾间是有路径的</span></span><br><span class="line"><span class="hljs-comment"># 为的是避免蛇头陷入死路</span></span><br><span class="line"><span class="hljs-comment"># 虚拟操作，在tmpboard,tmpsnake中进行</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_tail_inside</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> tmpboard, tmpsnake, food, tmpsnake_size</span><br><span class="line">    tmpboard[tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>]] = <span class="hljs-number">0</span> <span class="hljs-comment"># 虚拟地将蛇尾变为食物(因为是虚拟的，所以在tmpsnake,tmpboard中进行)</span></span><br><span class="line">    tmpboard[food] = SNAKE <span class="hljs-comment"># 放置食物的地方，看成蛇身</span></span><br><span class="line">    result = board_refresh(tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>], tmpsnake, tmpboard) <span class="hljs-comment"># 求得每个位置到蛇尾的路径长度</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>): <span class="hljs-comment"># 如果蛇头和蛇尾紧挨着，则返回False。即不能follow_tail，追着蛇尾运动了</span></span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(tmpsnake[HEAD], mov[i]) <span class="hljs-keyword">and</span> tmpsnake[HEAD]+mov[i]==tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>] <span class="hljs-keyword">and</span> tmpsnake_size&gt;<span class="hljs-number">3</span>:</span><br><span class="line">            result = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 让蛇头朝着蛇尾运行一步</span></span><br><span class="line"><span class="hljs-comment"># 不管蛇身阻挡，朝蛇尾方向运行</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">follow_tail</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> tmpboard, tmpsnake, food, tmpsnake_size</span><br><span class="line">    tmpsnake_size = snake_size</span><br><span class="line">    tmpsnake = snake[:]</span><br><span class="line">    board_reset(tmpsnake, tmpsnake_size, tmpboard) <span class="hljs-comment"># 重置虚拟board</span></span><br><span class="line">    tmpboard[tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>]] = FOOD <span class="hljs-comment"># 让蛇尾成为食物</span></span><br><span class="line">    tmpboard[food] = SNAKE <span class="hljs-comment"># 让食物的地方变成蛇身</span></span><br><span class="line">    board_refresh(tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>], tmpsnake, tmpboard) <span class="hljs-comment"># 求得各个位置到达蛇尾的路径长度</span></span><br><span class="line">    tmpboard[tmpsnake[tmpsnake_size<span class="hljs-number">-1</span>]] = SNAKE <span class="hljs-comment"># 还原蛇尾</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> choose_longest_safe_move(tmpsnake, tmpboard) <span class="hljs-comment"># 返回运行方向(让蛇头运动1步)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 在各种方案都不行时，随便找一个可行的方向来走(1步),</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">any_possible_move</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> food , snake, snake_size, board</span><br><span class="line">    best_move = ERR</span><br><span class="line">    board_reset(snake, snake_size, board)</span><br><span class="line">    board_refresh(food, snake, board)</span><br><span class="line">    min = SNAKE</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> is_move_possible(snake[HEAD], mov[i]) <span class="hljs-keyword">and</span> board[snake[HEAD]+mov[i]]&lt;min:</span><br><span class="line">            min = board[snake[HEAD]+mov[i]]</span><br><span class="line">            best_move = mov[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> best_move</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shift_array</span><span class="hljs-params">(arr, size)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(size, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">        arr[i] = arr[i<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_food</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> food, snake_size</span><br><span class="line">    cell_free = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> cell_free:</span><br><span class="line">        w = randint(<span class="hljs-number">1</span>, WIDTH<span class="hljs-number">-2</span>)</span><br><span class="line">        h = randint(<span class="hljs-number">1</span>, HEIGHT<span class="hljs-number">-2</span>)</span><br><span class="line">        food = h * WIDTH + w</span><br><span class="line">        cell_free = is_cell_free(food, snake_size, snake)</span><br><span class="line">    win.addch(food/WIDTH, food%WIDTH, <span class="hljs-string">'@'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 真正的蛇在这个函数中，朝pbest_move走1步</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_move</span><span class="hljs-params">(pbest_move)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> key, snake, board, snake_size, score</span><br><span class="line">    shift_array(snake, snake_size)</span><br><span class="line">    snake[HEAD] += pbest_move</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 按esc退出，getch同时保证绘图的流畅性，没有它只会看到最终结果</span></span><br><span class="line">    win.timeout(<span class="hljs-number">10</span>)</span><br><span class="line">    event = win.getch()</span><br><span class="line">    key = key <span class="hljs-keyword">if</span> event == <span class="hljs-number">-1</span> <span class="hljs-keyword">else</span> event</span><br><span class="line">    <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>: <span class="hljs-keyword">return</span></span><br><span class="line"></span><br><span class="line">    p = snake[HEAD]</span><br><span class="line">    win.addch(p/WIDTH, p%WIDTH, <span class="hljs-string">'*'</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># 如果新加入的蛇头就是食物的位置</span></span><br><span class="line">    <span class="hljs-comment"># 蛇长加1，产生新的食物，重置board(因为原来那些路径长度已经用不上了)</span></span><br><span class="line">    <span class="hljs-keyword">if</span> snake[HEAD] == food:</span><br><span class="line">        board[snake[HEAD]] = SNAKE <span class="hljs-comment"># 新的蛇头</span></span><br><span class="line">        snake_size += <span class="hljs-number">1</span></span><br><span class="line">        score += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> snake_size &lt; FIELD_SIZE: new_food()</span><br><span class="line">    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果新加入的蛇头不是食物的位置</span></span><br><span class="line">        board[snake[HEAD]] = SNAKE <span class="hljs-comment"># 新的蛇头</span></span><br><span class="line">        board[snake[snake_size]] = UNDEFINED <span class="hljs-comment"># 蛇尾变为空格</span></span><br><span class="line">        win.addch(snake[snake_size]/WIDTH, snake[snake_size]%WIDTH, <span class="hljs-string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 虚拟地运行一次，然后在调用处检查这次运行可否可行</span></span><br><span class="line"><span class="hljs-comment"># 可行才真实运行。</span></span><br><span class="line"><span class="hljs-comment"># 虚拟运行吃到食物后，得到虚拟下蛇在board的位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">virtual_shortest_move</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> snake, board, snake_size, tmpsnake, tmpboard, tmpsnake_size, food</span><br><span class="line">    tmpsnake_size = snake_size</span><br><span class="line">    tmpsnake = snake[:] <span class="hljs-comment"># 如果直接tmpsnake=snake，则两者指向同一处内存</span></span><br><span class="line">    tmpboard = board[:] <span class="hljs-comment"># board中已经是各位置到达食物的路径长度了，不用再计算</span></span><br><span class="line">    board_reset(tmpsnake, tmpsnake_size, tmpboard)</span><br><span class="line">    </span><br><span class="line">    food_eated = <span class="hljs-literal">False</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> food_eated:</span><br><span class="line">        board_refresh(food, tmpsnake, tmpboard)    </span><br><span class="line">        move = choose_shortest_safe_move(tmpsnake, tmpboard)</span><br><span class="line">        shift_array(tmpsnake, tmpsnake_size)</span><br><span class="line">        tmpsnake[HEAD] += move <span class="hljs-comment"># 在蛇头前加入一个新的位置</span></span><br><span class="line">        <span class="hljs-comment"># 如果新加入的蛇头的位置正好是食物的位置</span></span><br><span class="line">        <span class="hljs-comment"># 则长度加1，重置board，食物那个位置变为蛇的一部分(SNAKE)</span></span><br><span class="line">        <span class="hljs-keyword">if</span> tmpsnake[HEAD] == food:</span><br><span class="line">            tmpsnake_size += <span class="hljs-number">1</span></span><br><span class="line">            board_reset(tmpsnake, tmpsnake_size, tmpboard) <span class="hljs-comment"># 虚拟运行后，蛇在board的位置(label101010)</span></span><br><span class="line">            tmpboard[food] = SNAKE</span><br><span class="line">            food_eated = <span class="hljs-literal">True</span></span><br><span class="line">        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果蛇头不是食物的位置，则新加入的位置为蛇头，最后一个变为空格</span></span><br><span class="line">            tmpboard[tmpsnake[HEAD]] = SNAKE</span><br><span class="line">            tmpboard[tmpsnake[tmpsnake_size]] = UNDEFINED</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 如果蛇与食物间有路径，则调用本函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_safe_way</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">global</span> snake, board</span><br><span class="line">    safe_move = ERR</span><br><span class="line">    <span class="hljs-comment"># 虚拟地运行一次，因为已经确保蛇与食物间有路径，所以执行有效</span></span><br><span class="line">    <span class="hljs-comment"># 运行后得到虚拟下蛇在board中的位置，即tmpboard，见label101010</span></span><br><span class="line">    virtual_shortest_move() <span class="hljs-comment"># 该函数唯一调用处</span></span><br><span class="line">    <span class="hljs-keyword">if</span> is_tail_inside(): <span class="hljs-comment"># 如果虚拟运行后，蛇头蛇尾间有通路，则选最短路运行(1步)</span></span><br><span class="line">        <span class="hljs-keyword">return</span> choose_shortest_safe_move(snake, board)</span><br><span class="line">    safe_move = follow_tail() <span class="hljs-comment"># 否则虚拟地follow_tail 1步，如果可以做到，返回true</span></span><br><span class="line">    <span class="hljs-keyword">return</span> safe_move</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curses.initscr()</span><br><span class="line">win = curses.newwin(HEIGHT, WIDTH, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br><span class="line">win.keypad(<span class="hljs-number">1</span>)</span><br><span class="line">curses.noecho()</span><br><span class="line">curses.curs_set(<span class="hljs-number">0</span>)</span><br><span class="line">win.border(<span class="hljs-number">0</span>)</span><br><span class="line">win.nodelay(<span class="hljs-number">1</span>)</span><br><span class="line">win.addch(food/WIDTH, food%WIDTH, <span class="hljs-string">'@'</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">while</span> key != <span class="hljs-number">27</span>:</span><br><span class="line">    win.border(<span class="hljs-number">0</span>)</span><br><span class="line">    win.addstr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'S:'</span> + str(score) + <span class="hljs-string">' '</span>)               </span><br><span class="line">    win.timeout(<span class="hljs-number">10</span>)</span><br><span class="line">    <span class="hljs-comment"># 接收键盘输入，同时也使显示流畅</span></span><br><span class="line">    event = win.getch()</span><br><span class="line">    key = key <span class="hljs-keyword">if</span> event == <span class="hljs-number">-1</span> <span class="hljs-keyword">else</span> event</span><br><span class="line">    <span class="hljs-comment"># 重置矩阵</span></span><br><span class="line">    board_reset(snake, snake_size, board)</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># 如果蛇可以吃到食物，board_refresh返回true</span></span><br><span class="line">    <span class="hljs-comment"># 并且board中除了蛇身(=SNAKE)，其它的元素值表示从该点运动到食物的最短路径长</span></span><br><span class="line">    <span class="hljs-keyword">if</span> board_refresh(food, snake, board):</span><br><span class="line">        best_move  = find_safe_way() <span class="hljs-comment"># find_safe_way的唯一调用处</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        best_move = follow_tail()</span><br><span class="line">            </span><br><span class="line">    <span class="hljs-keyword">if</span> best_move == ERR:</span><br><span class="line">        best_move = any_possible_move()</span><br><span class="line">    <span class="hljs-comment"># 上面一次思考，只得出一个方向，运行一步</span></span><br><span class="line">    <span class="hljs-keyword">if</span> best_move != ERR: make_move(best_move)   </span><br><span class="line">    <span class="hljs-keyword">else</span>: <span class="hljs-keyword">break</span>        </span><br><span class="line">        </span><br><span class="line">curses.endwin()</span><br><span class="line">print(<span class="hljs-string">"\nScore - "</span> + str(score))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;A snake AI written in python. Use curses module, Windows users&lt;br&gt;should install it first: &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="贪吃蛇" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    
  </entry>
  
  <entry>
    <title>b站爱5预告片评论简单分析</title>
    <link href="http://yoursite.com/2019/10/21/b%E7%AB%99%E7%88%B15%E9%A2%84%E5%91%8A%E7%89%87%E8%AF%84%E8%AE%BA%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/10/21/b站爱5预告片评论简单分析/</id>
    <published>2019-10-21T11:59:45.000Z</published>
    <updated>2019-10-21T12:10:28.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据爬取"><a href="#1-数据爬取" class="headerlink" title="1.数据爬取"></a>1.数据爬取</h2><p>借用cid</p><a id="more"></a><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd </span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">"http://comment.bilibili.com/123519261.xml"</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = <span class="hljs-string">"utf8"</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html.text, <span class="hljs-string">"lxml"</span>)</span><br><span class="line">results = soup.find_all(<span class="hljs-string">"d"</span>)</span><br><span class="line"></span><br><span class="line">comments = [comment.text <span class="hljs-keyword">for</span> comment <span class="hljs-keyword">in</span> results]</span><br><span class="line">comments_dict = &#123;<span class="hljs-string">"comments"</span>: comments&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(comments_dict)</span><br><span class="line">df.to_csv(<span class="hljs-string">"bilibili_data.csv"</span>, encoding=<span class="hljs-string">"utf-8-sig"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">"爬取完成！"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-数据分析"><a href="#2-数据分析" class="headerlink" title="2.数据分析"></a>2.数据分析</h2><h3 id="2-1数据查看"><a href="#2-1数据查看" class="headerlink" title="2.1数据查看"></a>2.1数据查看</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="hljs-string">"bilibili_data.csv"</span>)</span><br><span class="line"><span class="hljs-keyword">del</span>(data[<span class="hljs-string">"Unnamed: 0"</span>])</span><br><span class="line">data.head(<span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>comments</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>啊啊啊啊啊啊啊</td>    </tr>    <tr>      <td>1</td>      <td>高三</td>    </tr>    <tr>      <td>2</td>      <td>高二加1</td>    </tr>    <tr>      <td>3</td>      <td>可惜了关谷，，悠悠</td>    </tr>    <tr>      <td>4</td>      <td>没多少戏应该是请不起了</td>    </tr>  </tbody></table></div><h3 id="2-2怀念度（年龄）分析"><a href="#2-2怀念度（年龄）分析" class="headerlink" title="2.2怀念度（年龄）分析"></a>2.2怀念度（年龄）分析</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">dayicount = <span class="hljs-number">0</span></span><br><span class="line">daercount = <span class="hljs-number">0</span></span><br><span class="line">dasancount = <span class="hljs-number">0</span></span><br><span class="line">gaoyicount = <span class="hljs-number">0</span></span><br><span class="line">gaoercount = <span class="hljs-number">0</span></span><br><span class="line">gaosancount = <span class="hljs-number">0</span></span><br><span class="line">xiaoxuecount = <span class="hljs-number">0</span></span><br><span class="line">chuzhongcount = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-string">"大一"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        dayicount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"大二"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        daercount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"大三"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        dasancount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"高一"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        gaoyicount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"高二"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        gaoercount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"高三"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        gaosancount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"小学"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        xiaoxuecount += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">"初中"</span> <span class="hljs-keyword">in</span> data[<span class="hljs-string">"comments"</span>][i]:</span><br><span class="line">        chuzhongcount += <span class="hljs-number">1</span></span><br><span class="line">print(<span class="hljs-string">"大一："</span>,dayicount)</span><br><span class="line">print(<span class="hljs-string">"大二："</span>,daercount)</span><br><span class="line">print(<span class="hljs-string">"大三："</span>,dasancount)</span><br><span class="line">print(<span class="hljs-string">"高一："</span>,gaoyicount)</span><br><span class="line">print(<span class="hljs-string">"高二："</span>,gaoercount)</span><br><span class="line">print(<span class="hljs-string">"高三："</span>,gaosancount)</span><br><span class="line">print(<span class="hljs-string">"小学："</span>,xiaoxuecount)</span><br><span class="line">print(<span class="hljs-string">"初中："</span>,chuzhongcount)</span><br></pre></td></tr></table></figure><pre><code>大一： 60大二： 34大三： 19高一： 72高二： 59高三： 70小学： 5初中： 2</code></pre><p>1000条弹幕就有这么多怀念青春的人  哈哈哈</p><h2 id="3-源文件下载"><a href="#3-源文件下载" class="headerlink" title="3.源文件下载"></a>3.源文件下载</h2><p><a href="http://pan.sqdxwz.com/?/python/爱5分析/" target="_blank" rel="noopener">oneindex下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-数据爬取&quot;&gt;&lt;a href=&quot;#1-数据爬取&quot; class=&quot;headerlink&quot; title=&quot;1.数据爬取&quot;&gt;&lt;/a&gt;1.数据爬取&lt;/h2&gt;&lt;p&gt;借用cid&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="爱5分析" scheme="http://yoursite.com/tags/%E7%88%B15%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>排序动画演示</title>
    <link href="http://yoursite.com/2019/10/21/%E6%8E%92%E5%BA%8F%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/"/>
    <id>http://yoursite.com/2019/10/21/排序动画演示/</id>
    <published>2019-10-21T05:13:53.000Z</published>
    <updated>2019-10-21T05:22:41.736Z</updated>
    
    <content type="html"><![CDATA[<p>将杂乱无章的数据元素，通过一定的方法按关键字顺序排列的过程叫做排序。</p><a id="more"></a><h2 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1.插入排序"></a>1.插入排序</h2><p><a href="https://sm.ms/image/m2z5seKS1aACJ7q" target="_blank"><img src="https://i.loli.net/2019/10/21/m2z5seKS1aACJ7q.gif"></a></p><h2 id="2-堆排序"><a href="#2-堆排序" class="headerlink" title="2.堆排序"></a>2.堆排序</h2><p><a href="https://sm.ms/image/Vqiuv2fk8MjHtXY" target="_blank"><img src="https://i.loli.net/2019/10/21/Vqiuv2fk8MjHtXY.gif"></a></p><h2 id="3-希尔排序"><a href="#3-希尔排序" class="headerlink" title="3.希尔排序"></a>3.希尔排序</h2><p><a href="https://sm.ms/image/XloJV3h4YEgNLzQ" target="_blank"><img src="https://i.loli.net/2019/10/21/XloJV3h4YEgNLzQ.gif"></a></p><h2 id="4-计数排序"><a href="#4-计数排序" class="headerlink" title="4.计数排序"></a>4.计数排序</h2><p><a href="https://sm.ms/image/LGSPsg1Bq7h9TIC" target="_blank"><img src="https://i.loli.net/2019/10/21/LGSPsg1Bq7h9TIC.gif"></a></p><h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h2><p><a href="https://sm.ms/image/OcGeIQdLEt4hBz9" target="_blank"><img src="https://i.loli.net/2019/10/21/OcGeIQdLEt4hBz9.gif"></a></p><h2 id="6-桶排序"><a href="#6-桶排序" class="headerlink" title="6.桶排序"></a>6.桶排序</h2><p><a href="https://sm.ms/image/i3abyPQYw1lUNuo" target="_blank"><img src="https://i.loli.net/2019/10/21/i3abyPQYw1lUNuo.gif"></a></p><h2 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7.归并排序"></a>7.归并排序</h2><p><a href="https://sm.ms/image/zgFES3ZU14vGOXH" target="_blank"><img src="https://i.loli.net/2019/10/21/zgFES3ZU14vGOXH.gif"></a></p><h2 id="8-基数排序"><a href="#8-基数排序" class="headerlink" title="8.基数排序"></a>8.基数排序</h2><p><a href="https://sm.ms/image/3W1MEAQIp6r8bRi" target="_blank"><img src="https://i.loli.net/2019/10/21/3W1MEAQIp6r8bRi.gif"></a></p><h2 id="9-选择排序"><a href="#9-选择排序" class="headerlink" title="9.选择排序"></a>9.选择排序</h2><p><a href="https://sm.ms/image/Zd7spwWR6YJBvKV" target="_blank"><img src="https://i.loli.net/2019/10/21/Zd7spwWR6YJBvKV.gif"></a></p><h2 id="10-冒泡排序"><a href="#10-冒泡排序" class="headerlink" title="10.冒泡排序"></a>10.冒泡排序</h2><img src="http://pan.sqdxwz.com/?/%E6%96%87%E6%A1%A3/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/%E5%86%92%E6%B3%A1.gif">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将杂乱无章的数据元素，通过一定的方法按关键字顺序排列的过程叫做排序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>河南理工大学110周年校庆剪影</title>
    <link href="http://yoursite.com/2019/10/20/%E6%B2%B3%E5%8D%97%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6110%E5%91%A8%E5%B9%B4%E6%A0%A1%E5%BA%86%E5%89%AA%E5%BD%B1/"/>
    <id>http://yoursite.com/2019/10/20/河南理工大学110周年校庆剪影/</id>
    <published>2019-10-20T10:55:37.000Z</published>
    <updated>2019-10-20T11:37:02.935Z</updated>
    
    <content type="html"><![CDATA[<center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=511590282&auto=0&height=66"></iframe></center><a id="more"></a><p><a href="https://sm.ms/image/ubkC75Y6DsEmo49" target="_blank"><img src="https://i.loli.net/2019/10/20/ubkC75Y6DsEmo49.jpg"></a></p><p><a href="https://sm.ms/image/ujJnZ1fpBd3Am5h" target="_blank"><img src="https://i.loli.net/2019/10/20/ujJnZ1fpBd3Am5h.jpg"></a></p><p><a href="https://sm.ms/image/BVfp9ZwNO8I7kmU" target="_blank"><img src="https://i.loli.net/2019/10/20/BVfp9ZwNO8I7kmU.jpg"></a></p><p><a href="https://sm.ms/image/KCRmwLZY7pyQVXi" target="_blank"><img src="https://i.loli.net/2019/10/20/KCRmwLZY7pyQVXi.jpg"></a></p><p><a href="https://sm.ms/image/1U74qxnHrEMOLje" target="_blank"><img src="https://i.loli.net/2019/10/20/1U74qxnHrEMOLje.jpg"></a></p><p><a href="https://sm.ms/image/X6WKGrRzkSmnt1i" target="_blank"><img src="https://i.loli.net/2019/10/20/X6WKGrRzkSmnt1i.jpg"></a></p><p><a href="https://sm.ms/image/cokbJKUn3umrlwY" target="_blank"><img src="https://i.loli.net/2019/10/20/cokbJKUn3umrlwY.jpg"></a></p><p><a href="https://sm.ms/image/w3CFYrH9RNJ2o6L" target="_blank"><img src="https://i.loli.net/2019/10/20/w3CFYrH9RNJ2o6L.jpg"></a></p><p><a href="https://sm.ms/image/eLxRaXDBFiuYMpq" target="_blank"><img src="https://i.loli.net/2019/10/20/eLxRaXDBFiuYMpq.jpg"></a></p><p><a href="https://sm.ms/image/BRIJAegwuDOVEGn" target="_blank"><img src="https://i.loli.net/2019/10/20/BRIJAegwuDOVEGn.jpg"></a></p><p><a href="https://sm.ms/image/tLM3qeagwJGpbYy" target="_blank"><img src="https://i.loli.net/2019/10/20/tLM3qeagwJGpbYy.jpg"></a></p><p><a href="https://sm.ms/image/hcuYoy3rKWV4CLk" target="_blank"><img src="https://i.loli.net/2019/10/20/hcuYoy3rKWV4CLk.jpg"></a></p><p><a href="https://sm.ms/image/wI5A6blkn72K8zj" target="_blank"><img src="https://i.loli.net/2019/10/20/wI5A6blkn72K8zj.jpg"></a></p><p><a href="https://sm.ms/image/pxQhlMUiPsKRk8B" target="_blank"><img src="https://i.loli.net/2019/10/20/pxQhlMUiPsKRk8B.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=511590282&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="河南理工大学110周年" scheme="http://yoursite.com/tags/%E6%B2%B3%E5%8D%97%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6110%E5%91%A8%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用深度学习训练一个游戏</title>
    <link href="http://yoursite.com/2019/10/20/%E4%BD%BF%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/10/20/使用深度学习训练一个游戏/</id>
    <published>2019-10-20T04:52:28.000Z</published>
    <updated>2019-10-20T10:23:39.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ol><li><p>pygame</p></li><li><p>numpy</p></li><li><p>opencv</p></li><li><p><a href="https://uppez.github.io/2019/09/15/为Anaconda3安装tensorflow等/#more" target="_blank" rel="noopener">tensorflow</a></p></li></ol><a id="more"></a><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>运行报错<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: module 'tensorflow' has no attribute 'mul'</span><br></pre></td></tr></table></figure></li></ol><p>解决方案：</p><p>TensorFlow的“mul”函数变成“multiply”函数了。TensorFlow版本不同，使用的函数不同。</p><p>将mul改为multiply。</p><ol start="2"><li>运行报错</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver.save(sess, "model.ckpt")</span><br></pre></td></tr></table></figure><p>改为相对路径保存</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver.save(sess, "./model.ckpt")</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pygame</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"><span class="hljs-keyword">from</span> pygame.locals <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque</span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf  </span><br><span class="line"><span class="hljs-keyword">import</span> cv2               </span><br><span class="line"> </span><br><span class="line">BLACK     = (<span class="hljs-number">0</span>  ,<span class="hljs-number">0</span>  ,<span class="hljs-number">0</span>  )</span><br><span class="line">WHITE     = (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>)</span><br><span class="line"> </span><br><span class="line">SCREEN_SIZE = [<span class="hljs-number">320</span>,<span class="hljs-number">400</span>]</span><br><span class="line">BAR_SIZE = [<span class="hljs-number">50</span>, <span class="hljs-number">5</span>]</span><br><span class="line">BALL_SIZE = [<span class="hljs-number">15</span>, <span class="hljs-number">15</span>]</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># 神经网络的输出</span></span><br><span class="line">MOVE_STAY = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]</span><br><span class="line">MOVE_LEFT = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]</span><br><span class="line">MOVE_RIGHT = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Game</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">pygame.init()</span><br><span class="line">self.clock = pygame.time.Clock()</span><br><span class="line">self.screen = pygame.display.set_mode(SCREEN_SIZE)</span><br><span class="line">pygame.display.set_caption(<span class="hljs-string">'Simple Game'</span>)</span><br><span class="line"> </span><br><span class="line">self.ball_pos_x = SCREEN_SIZE[<span class="hljs-number">0</span>]//<span class="hljs-number">2</span> - BALL_SIZE[<span class="hljs-number">0</span>]/<span class="hljs-number">2</span></span><br><span class="line">self.ball_pos_y = SCREEN_SIZE[<span class="hljs-number">1</span>]//<span class="hljs-number">2</span> - BALL_SIZE[<span class="hljs-number">1</span>]/<span class="hljs-number">2</span></span><br><span class="line"> </span><br><span class="line">self.ball_dir_x = <span class="hljs-number">-1</span> <span class="hljs-comment"># -1 = left 1 = right  </span></span><br><span class="line">self.ball_dir_y = <span class="hljs-number">-1</span> <span class="hljs-comment"># -1 = up   1 = down</span></span><br><span class="line">self.ball_pos = pygame.Rect(self.ball_pos_x, self.ball_pos_y, BALL_SIZE[<span class="hljs-number">0</span>], BALL_SIZE[<span class="hljs-number">1</span>])</span><br><span class="line"> </span><br><span class="line">self.bar_pos_x = SCREEN_SIZE[<span class="hljs-number">0</span>]//<span class="hljs-number">2</span>-BAR_SIZE[<span class="hljs-number">0</span>]//<span class="hljs-number">2</span></span><br><span class="line">self.bar_pos = pygame.Rect(self.bar_pos_x, SCREEN_SIZE[<span class="hljs-number">1</span>]-BAR_SIZE[<span class="hljs-number">1</span>], BAR_SIZE[<span class="hljs-number">0</span>], BAR_SIZE[<span class="hljs-number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># action是MOVE_STAY、MOVE_LEFT、MOVE_RIGHT</span></span><br><span class="line"><span class="hljs-comment"># ai控制棒子左右移动；返回游戏界面像素数和对应的奖励。(像素-&gt;奖励-&gt;强化棒子往奖励高的方向移动)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step</span><span class="hljs-params">(self, action)</span>:</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">if</span> action == MOVE_LEFT:</span><br><span class="line">self.bar_pos_x = self.bar_pos_x - <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-keyword">elif</span> action == MOVE_RIGHT:</span><br><span class="line">self.bar_pos_x = self.bar_pos_x + <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line"><span class="hljs-keyword">pass</span></span><br><span class="line"><span class="hljs-keyword">if</span> self.bar_pos_x &lt; <span class="hljs-number">0</span>:</span><br><span class="line">self.bar_pos_x = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">if</span> self.bar_pos_x &gt; SCREEN_SIZE[<span class="hljs-number">0</span>] - BAR_SIZE[<span class="hljs-number">0</span>]:</span><br><span class="line">self.bar_pos_x = SCREEN_SIZE[<span class="hljs-number">0</span>] - BAR_SIZE[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line">self.screen.fill(BLACK)</span><br><span class="line">self.bar_pos.left = self.bar_pos_x</span><br><span class="line">pygame.draw.rect(self.screen, WHITE, self.bar_pos)</span><br><span class="line"> </span><br><span class="line">self.ball_pos.left += self.ball_dir_x * <span class="hljs-number">2</span></span><br><span class="line">self.ball_pos.bottom += self.ball_dir_y * <span class="hljs-number">3</span></span><br><span class="line">pygame.draw.rect(self.screen, WHITE, self.ball_pos)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">if</span> self.ball_pos.top &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> self.ball_pos.bottom &gt;= (SCREEN_SIZE[<span class="hljs-number">1</span>] - BAR_SIZE[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>):</span><br><span class="line">self.ball_dir_y = self.ball_dir_y * <span class="hljs-number">-1</span></span><br><span class="line"><span class="hljs-keyword">if</span> self.ball_pos.left &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> self.ball_pos.right &gt;= (SCREEN_SIZE[<span class="hljs-number">0</span>]):</span><br><span class="line">self.ball_dir_x = self.ball_dir_x * <span class="hljs-number">-1</span></span><br><span class="line"> </span><br><span class="line">reward = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">if</span> self.bar_pos.top &lt;= self.ball_pos.bottom <span class="hljs-keyword">and</span> (self.bar_pos.left &lt; self.ball_pos.right <span class="hljs-keyword">and</span> self.bar_pos.right &gt; self.ball_pos.left):</span><br><span class="line">reward = <span class="hljs-number">1</span>    <span class="hljs-comment"># 击中奖励</span></span><br><span class="line"><span class="hljs-keyword">elif</span> self.bar_pos.top &lt;= self.ball_pos.bottom <span class="hljs-keyword">and</span> (self.bar_pos.left &gt; self.ball_pos.right <span class="hljs-keyword">or</span> self.bar_pos.right &lt; self.ball_pos.left):</span><br><span class="line">reward = <span class="hljs-number">-1</span>   <span class="hljs-comment"># 没击中惩罚</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># 获得游戏界面像素</span></span><br><span class="line">screen_image = pygame.surfarray.array3d(pygame.display.get_surface())</span><br><span class="line">pygame.display.update()</span><br><span class="line"><span class="hljs-comment"># 返回游戏界面像素和对应的奖励</span></span><br><span class="line"><span class="hljs-keyword">return</span> reward, screen_image</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># learning_rate</span></span><br><span class="line">LEARNING_RATE = <span class="hljs-number">0.99</span></span><br><span class="line"><span class="hljs-comment"># 更新梯度</span></span><br><span class="line">INITIAL_EPSILON = <span class="hljs-number">1.0</span></span><br><span class="line">FINAL_EPSILON = <span class="hljs-number">0.05</span></span><br><span class="line"><span class="hljs-comment"># 测试观测次数</span></span><br><span class="line">EXPLORE = <span class="hljs-number">500000</span> </span><br><span class="line">OBSERVE = <span class="hljs-number">50000</span></span><br><span class="line"><span class="hljs-comment"># 存储过往经验大小</span></span><br><span class="line">REPLAY_MEMORY = <span class="hljs-number">500000</span></span><br><span class="line"> </span><br><span class="line">BATCH = <span class="hljs-number">100</span></span><br><span class="line"> </span><br><span class="line">output = <span class="hljs-number">3</span>  <span class="hljs-comment"># 输出层神经元数。代表3种操作-MOVE_STAY:[1, 0, 0]  MOVE_LEFT:[0, 1, 0]  MOVE_RIGHT:[0, 0, 1]</span></span><br><span class="line">input_image = tf.placeholder(<span class="hljs-string">"float"</span>, [<span class="hljs-literal">None</span>, <span class="hljs-number">80</span>, <span class="hljs-number">100</span>, <span class="hljs-number">4</span>])  <span class="hljs-comment"># 游戏像素</span></span><br><span class="line">action = tf.placeholder(<span class="hljs-string">"float"</span>, [<span class="hljs-literal">None</span>, output])     <span class="hljs-comment"># 操作</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># 定义CNN-卷积神经网络 参考:http://blog.topspeedsnail.com/archives/10451</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convolutional_neural_network</span><span class="hljs-params">(input_image)</span>:</span></span><br><span class="line">weights = &#123;<span class="hljs-string">'w_conv1'</span>:tf.Variable(tf.zeros([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">32</span>])),</span><br><span class="line">               <span class="hljs-string">'w_conv2'</span>:tf.Variable(tf.zeros([<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>])),</span><br><span class="line">               <span class="hljs-string">'w_conv3'</span>:tf.Variable(tf.zeros([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>])),</span><br><span class="line">               <span class="hljs-string">'w_fc4'</span>:tf.Variable(tf.zeros([<span class="hljs-number">3456</span>, <span class="hljs-number">784</span>])),</span><br><span class="line">               <span class="hljs-string">'w_out'</span>:tf.Variable(tf.zeros([<span class="hljs-number">784</span>, output]))&#125;</span><br><span class="line"> </span><br><span class="line">biases = &#123;<span class="hljs-string">'b_conv1'</span>:tf.Variable(tf.zeros([<span class="hljs-number">32</span>])),</span><br><span class="line">              <span class="hljs-string">'b_conv2'</span>:tf.Variable(tf.zeros([<span class="hljs-number">64</span>])),</span><br><span class="line">              <span class="hljs-string">'b_conv3'</span>:tf.Variable(tf.zeros([<span class="hljs-number">64</span>])),</span><br><span class="line">              <span class="hljs-string">'b_fc4'</span>:tf.Variable(tf.zeros([<span class="hljs-number">784</span>])),</span><br><span class="line">              <span class="hljs-string">'b_out'</span>:tf.Variable(tf.zeros([output]))&#125;</span><br><span class="line"> </span><br><span class="line">conv1 = tf.nn.relu(tf.nn.conv2d(input_image, weights[<span class="hljs-string">'w_conv1'</span>], strides = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>], padding = <span class="hljs-string">"VALID"</span>) + biases[<span class="hljs-string">'b_conv1'</span>])</span><br><span class="line">conv2 = tf.nn.relu(tf.nn.conv2d(conv1, weights[<span class="hljs-string">'w_conv2'</span>], strides = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], padding = <span class="hljs-string">"VALID"</span>) + biases[<span class="hljs-string">'b_conv2'</span>])</span><br><span class="line">conv3 = tf.nn.relu(tf.nn.conv2d(conv2, weights[<span class="hljs-string">'w_conv3'</span>], strides = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding = <span class="hljs-string">"VALID"</span>) + biases[<span class="hljs-string">'b_conv3'</span>])</span><br><span class="line">conv3_flat = tf.reshape(conv3, [<span class="hljs-number">-1</span>, <span class="hljs-number">3456</span>])</span><br><span class="line">fc4 = tf.nn.relu(tf.matmul(conv3_flat, weights[<span class="hljs-string">'w_fc4'</span>]) + biases[<span class="hljs-string">'b_fc4'</span>])</span><br><span class="line"> </span><br><span class="line">output_layer = tf.matmul(fc4, weights[<span class="hljs-string">'w_out'</span>]) + biases[<span class="hljs-string">'b_out'</span>]</span><br><span class="line"><span class="hljs-keyword">return</span> output_layer</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment"># 深度强化学习入门: https://www.nervanasys.com/demystifying-deep-reinforcement-learning/</span></span><br><span class="line"><span class="hljs-comment"># 训练神经网络</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_neural_network</span><span class="hljs-params">(input_image)</span>:</span></span><br><span class="line">predict_action = convolutional_neural_network(input_image)</span><br><span class="line"> </span><br><span class="line">argmax = tf.placeholder(<span class="hljs-string">"float"</span>, [<span class="hljs-literal">None</span>, output])</span><br><span class="line">gt = tf.placeholder(<span class="hljs-string">"float"</span>, [<span class="hljs-literal">None</span>])</span><br><span class="line"> </span><br><span class="line">action = tf.reduce_sum(tf.multiply(predict_action, argmax), reduction_indices = <span class="hljs-number">1</span>)</span><br><span class="line">cost = tf.reduce_mean(tf.square(action - gt))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(<span class="hljs-number">1e-6</span>).minimize(cost)</span><br><span class="line"> </span><br><span class="line">game = Game()</span><br><span class="line">D = deque()</span><br><span class="line"> </span><br><span class="line">_, image = game.step(MOVE_STAY)</span><br><span class="line"><span class="hljs-comment"># 转换为灰度值</span></span><br><span class="line">image = cv2.cvtColor(cv2.resize(image, (<span class="hljs-number">100</span>, <span class="hljs-number">80</span>)), cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="hljs-comment"># 转换为二值</span></span><br><span class="line">ret, image = cv2.threshold(image, <span class="hljs-number">1</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">input_image_data = np.stack((image, image, image, image), axis = <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:</span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">n = <span class="hljs-number">0</span></span><br><span class="line">epsilon = INITIAL_EPSILON</span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">action_t = predict_action.eval(feed_dict = &#123;input_image : [input_image_data]&#125;)[<span class="hljs-number">0</span>]</span><br><span class="line"> </span><br><span class="line">argmax_t = np.zeros([output], dtype=np.int)</span><br><span class="line"><span class="hljs-keyword">if</span>(random.random() &lt;= INITIAL_EPSILON):</span><br><span class="line">maxIndex = random.randrange(output)</span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">maxIndex = np.argmax(action_t)</span><br><span class="line">argmax_t[maxIndex] = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">if</span> epsilon &gt; FINAL_EPSILON:</span><br><span class="line">epsilon -= (INITIAL_EPSILON - FINAL_EPSILON) / EXPLORE</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">#for event in pygame.event.get():  macOS需要事件循环，否则白屏</span></span><br><span class="line"><span class="hljs-comment">#if event.type == QUIT:</span></span><br><span class="line"><span class="hljs-comment">#pygame.quit()</span></span><br><span class="line"><span class="hljs-comment">#sys.exit()</span></span><br><span class="line">reward, image = game.step(list(argmax_t))</span><br><span class="line"> </span><br><span class="line">image = cv2.cvtColor(cv2.resize(image, (<span class="hljs-number">100</span>, <span class="hljs-number">80</span>)), cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, image = cv2.threshold(image, <span class="hljs-number">1</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">image = np.reshape(image, (<span class="hljs-number">80</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>))</span><br><span class="line">input_image_data1 = np.append(image, input_image_data[:, :, <span class="hljs-number">0</span>:<span class="hljs-number">3</span>], axis = <span class="hljs-number">2</span>)</span><br><span class="line"> </span><br><span class="line">D.append((input_image_data, argmax_t, reward, input_image_data1))</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">if</span> len(D) &gt; REPLAY_MEMORY:</span><br><span class="line">D.popleft()</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">if</span> n &gt; OBSERVE:</span><br><span class="line">minibatch = random.sample(D, BATCH)</span><br><span class="line">input_image_data_batch = [d[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> minibatch]</span><br><span class="line">argmax_batch = [d[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> minibatch]</span><br><span class="line">reward_batch = [d[<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> minibatch]</span><br><span class="line">input_image_data1_batch = [d[<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> minibatch]</span><br><span class="line"> </span><br><span class="line">gt_batch = []</span><br><span class="line"> </span><br><span class="line">out_batch = predict_action.eval(feed_dict = &#123;input_image : input_image_data1_batch&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(minibatch)):</span><br><span class="line">gt_batch.append(reward_batch[i] + LEARNING_RATE * np.max(out_batch[i]))</span><br><span class="line"> </span><br><span class="line">optimizer.run(feed_dict = &#123;gt : gt_batch, argmax : argmax_batch, input_image : input_image_data_batch&#125;)</span><br><span class="line"> </span><br><span class="line">input_image_data = input_image_data1</span><br><span class="line">n = n+<span class="hljs-number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">if</span> n % <span class="hljs-number">10000</span> == <span class="hljs-number">0</span>:</span><br><span class="line">saver.save(sess, <span class="hljs-string">'./game.cpk'</span>, global_step = n)  <span class="hljs-comment"># 保存模型</span></span><br><span class="line"> </span><br><span class="line">print(n, <span class="hljs-string">"epsilon:"</span>, epsilon, <span class="hljs-string">" "</span> ,<span class="hljs-string">"action:"</span>, maxIndex, <span class="hljs-string">" "</span> ,<span class="hljs-string">"reward:"</span>, reward)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">train_neural_network(input_image)</span><br></pre></td></tr></table></figure><h2 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h2><p><a href="https://sm.ms/image/kB27m8RW1vbT6x4" target="_blank"><img src="https://i.loli.net/2019/10/20/kB27m8RW1vbT6x4.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;pygame&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;numpy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;opencv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://uppez.github.io/2019/09/15/为Anaconda3安装tensorflow等/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tensorflow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="Simple Game" scheme="http://yoursite.com/tags/Simple-Game/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统全数据集</title>
    <link href="http://yoursite.com/2019/10/17/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>http://yoursite.com/2019/10/17/推荐系统全数据集/</id>
    <published>2019-10-17T05:03:14.000Z</published>
    <updated>2019-10-17T05:09:41.758Z</updated>
    
    <content type="html"><![CDATA[<p>这些数据集在可作为基准的<strong>推荐系统</strong>中非常流行。</p><a id="more"></a><ul><li><p>Douban：<a href="http://socialcomputing.asu.edu/datasets/Douban" target="_blank" rel="noopener">http://socialcomputing.asu.edu/datasets/Douban</a> 这是一个匿名的豆瓣数据集，包含129,490个独立用户和58,541个独立电影条目。</p></li><li><p>Epinions：<a href="http://www.trustlet.org/epinions.html" target="_blank" rel="noopener">http://www.trustlet.org/epinions.html</a> Epinions是一个人们可以评论产品的网站。</p></li><li><p>Flixster：<a href="http://socialcomputing.asu.edu/datasets/Flixster" target="_blank" rel="noopener">http://socialcomputing.asu.edu/datasets/Flixster</a> Flixster是一个社交电影网站，允许用户分享电影评级，发现新电影，并与其他有类似电影品味的人见面。</p></li><li><p>CiaoDVD：<a href="https://www.librec.net/datasets.html" target="_blank" rel="noopener">https://www.librec.net/datasets.html</a> CiaoDVD是从dvd.ciao.co.中抓取的2013年12月英国网站整个dvd类别的数据集。</p></li><li><p>MACLab：<a href="http://mac.citi.sinica.edu.tw/LJ#.VRGYfOHlZ40" target="_blank" rel="noopener">http://mac.citi.sinica.edu.tw/LJ#.VRGYfOHlZ40</a> 这个项目的目的是研究用户的情绪和音乐情绪。</p></li><li><p>DEAPdataset：<a href="http://www.eecs.qmul.ac.uk/mmv/datasets/deap/index.html" target="_blank" rel="noopener">http://www.eecs.qmul.ac.uk/mmv/datasets/deap/index.html</a> 使用脑电图、生理和视频信号进行情绪分析的数据集。</p></li><li><p>MyPersonalityDataset：<a href="http://mypersonality.org/wiki/doku.php" target="_blank" rel="noopener">http://mypersonality.org/wiki/doku.php</a> myPersonality是一个很受欢迎的Facebook应用程序，它允许用户进行真实的心理测试，并允许我们(在征得同意的情况下)记录他们的心理和Facebook资料。目前，我们的数据库包含超过600万个测试结果，以及超过400万个Facebook个人简介。</p></li><li><p>Bibsonomy：<a href="http://www.kde.cs.uni-kassel.de/bibsonomy/dumps" target="_blank" rel="noopener">http://www.kde.cs.uni-kassel.de/bibsonomy/dumps</a> 社交书签系统中的标签推荐。</p></li><li><p>Delicious：<a href="http://www.dai-labor.de/en/competence_centers/irml/datasets/" target="_blank" rel="noopener">http://www.dai-labor.de/en/competence_centers/irml/datasets/</a> plista新闻推荐数据集，美味可口。</p></li><li><p>Movielens：<a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">https://grouplens.org/datasets/movielens/</a> 稳定的基准数据集。2000万个评分和46.5万个标签应用程序被13.8万用户应用于2.7万部电影。包括标签基因组数据，1100个标签的1200万个相关性得分。</p></li><li><p>Jester：<a href="http://eigentaste.berkeley.edu/dataset/" target="_blank" rel="noopener">http://eigentaste.berkeley.edu/dataset/</a> 来自小丑在线笑话推荐系统的匿名评级。</p></li><li><p>BookCrossing：<a href="http://www2.informatik.uni-freiburg.de/~cziegler/BX/" target="_blank" rel="noopener">http://www2.informatik.uni-freiburg.de/~cziegler/BX/</a> Book-Crossing数据集。</p></li><li><p>LastFM：<a href="https://grouplens.org/datasets/hetrec-2011/" target="_blank" rel="noopener">https://grouplens.org/datasets/hetrec-2011/</a> 来自1892个用户的92,800张艺术家录音。</p></li><li><p>Wikipedia：<a href="https://en.wikipedia.org/wiki/Wikipedia:Database_download#English-language_Wikipedia" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Wikipedia:Database_download#English-language_Wikipedia</a> 维基百科向感兴趣的用户提供所有可用内容的免费拷贝。这些数据库可用于镜像、个人使用、非正式备份、脱机使用或数据库查询。</p></li><li><p>OpenStreetMap：<a href="http://planet.openstreetmap.org/planet/full-history/" target="_blank" rel="noopener">http://planet.openstreetmap.org/planet/full-history/</a> 这里找到的文件是OpenStreetMap.org数据库的完整副本，包括编辑历史。这些都是在Open Data Commons Open Database License 1.0许可下发布的。</p></li><li><p>PythonGitCode：<a href="https://github.com/lab41/hermes" target="_blank" rel="noopener">https://github.com/lab41/hermes</a> Hermes是Lab41对推荐系统的一次尝试。通过分析多种推荐系统算法在不同数据集上的性能，探讨了如何为新的应用选择推荐系统。</p></li><li><p>Gist：<a href="https://gist.github.com/entaroadun/1653794" target="_blank" rel="noopener">https://gist.github.com/entaroadun/1653794</a> 为机器学习推荐和评级的公共数据集。</p></li><li><p>Yelp：<a href="https://www.yelp.com/dataset" target="_blank" rel="noopener">https://www.yelp.com/dataset</a> Yelp数据集是用于个人、教育和学术目的的业务、评论和用户数据的子集。可以在JSON和SQL文件中使用，在你学习如何制作移动应用程序时，可以使用它来教学生关于数据库、学习NLP或示例生产数据。</p></li><li><p>AmazonReviews：<a href="http://jmcauley.ucsd.edu/data/amazon/" target="_blank" rel="noopener">http://jmcauley.ucsd.edu/data/amazon/</a> 该数据集包含来自Amazon的产品评论和元数据，包括1996年5月至2014年7月期间的1.428亿个评论。这个数据集包括评论(评级、文本、帮助投票)、产品元数据(描述、类别信息、价格、品牌和图像特性)和链接(也查看/购买图表)。</p></li><li><p>CiteULike：<a href="http://www.citeulike.org/faq/data.adp" target="_blank" rel="noopener">http://www.citeulike.org/faq/data.adp</a> CiteULike数据库对不同领域的研究人员都有潜在的用处。物理学家和计算机科学家对分析数据结构表示了兴趣，并经常要求提供数据集。以前，这是在一个特别的基础上完成的，它依赖于我们记住更新数据文件。现在，有一个自动的过程，每天晚上运行，生成一个快照摘要，说明用哪些标签发布了哪些文章。</p></li><li><p>Taobao：<a href="https://tianchi.aliyun.com/datalab/dataSet.htm?spm=5176.100073.888.13.62f83f62aOlMEI&amp;id=1" target="_blank" rel="noopener">https://tianchi.aliyun.com/datalab/dataSet.htm?spm=5176.100073.888.13.62f83f62aOlMEI&amp;id=1</a> 该数据集包含了匿名用户在“双十一”前后6个月的购物记录，以及表明他们是否重复购买的标签信息。由于隐私问题，数据采集存在偏差，因此该数据集的统计结果会与天猫的实际情况相背离。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些数据集在可作为基准的&lt;strong&gt;推荐系统&lt;/strong&gt;中非常流行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="数据集-推荐系统" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E9%9B%86-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>全50张matplotlib图</title>
    <link href="http://yoursite.com/2019/10/16/%E5%85%A850%E5%BC%A0matplotlib%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/10/16/全50张matplotlib图/</id>
    <published>2019-10-16T12:23:32.000Z</published>
    <updated>2019-10-16T12:35:33.997Z</updated>
    
    <content type="html"><![CDATA[<p>不好说些什么…</p><a id="more"></a><h2 id="1-关联"><a href="#1-关联" class="headerlink" title="1.关联"></a>1.关联</h2><blockquote><p>散点图<br>带边界的气泡图<br>带线性回归最佳拟合线的散点图<br>抖动图<br>计数图<br>边缘直方图<br>边缘箱形图<br>相关图<br>矩阵图</p></blockquote><h2 id="2-偏差"><a href="#2-偏差" class="headerlink" title="2.偏差"></a>2.偏差</h2><blockquote><p>发散型条形图<br>发散型文本<br>发散型包点图<br>带标记的发散型棒棒糖图<br>面积图</p></blockquote><h2 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h2><blockquote><p>有序条形图<br>棒棒糖图<br>包点图<br>坡度图<br>哑铃图</p></blockquote><h2 id="4-分布"><a href="#4-分布" class="headerlink" title="4.分布"></a>4.分布</h2><blockquote><p>连续变量的直方图<br>类型变量的直方图<br>密度图<br>直方密度线图<br>Joy Plot<br>分布式包点图<br>包点+箱形图<br>Dot + Box Plot<br>小提琴图<br>人口金字塔<br>分类图</p></blockquote><h2 id="5-组成"><a href="#5-组成" class="headerlink" title="5.组成"></a>5.组成</h2><blockquote><p>华夫饼图<br>饼图<br>树形图<br>条形图</p></blockquote><h2 id="6-变化"><a href="#6-变化" class="headerlink" title="6.变化"></a>6.变化</h2><blockquote><p>时间序列图<br>带波峰波谷标记的时序图<br>自相关和部分自相关图<br>交叉相关图<br>时间序列分解图<br>多个时间序列<br>使用辅助Y轴来绘制不同范围的图形<br>带有误差带的时间序列<br>堆积面积图<br>未堆积的面积图<br>日历热力图<br>季节图</p></blockquote><h2 id="7-分组"><a href="#7-分组" class="headerlink" title="7.分组"></a>7.分组</h2><blockquote><p>树状图<br>簇状图<br>安德鲁斯曲线<br>平行坐标</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不好说些什么…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>阿里云栖大会-程序员吐槽大会</title>
    <link href="http://yoursite.com/2019/10/15/%E9%98%BF%E9%87%8C%E4%BA%91%E6%A0%96%E5%A4%A7%E4%BC%9A-%E7%A8%8B%E5%BA%8F%E5%91%98%E5%90%90%E6%A7%BD%E5%A4%A7%E4%BC%9A/"/>
    <id>http://yoursite.com/2019/10/15/阿里云栖大会-程序员吐槽大会/</id>
    <published>2019-10-15T10:07:33.000Z</published>
    <updated>2019-10-15T10:15:35.032Z</updated>
    
    <content type="html"><![CDATA[<p>啊~你的代码好强（你确实很弱，但我不能说）</p><a id="more"></a><center><iframe src="//player.bilibili.com/player.html?aid=69171100&cid=119877665&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="500px" width="580px"> </iframe></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啊~你的代码好强（你确实很弱，但我不能说）&lt;/p&gt;
    
    </summary>
    
    
      <category term="随记" scheme="http://yoursite.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="云栖大会" scheme="http://yoursite.com/tags/%E4%BA%91%E6%A0%96%E5%A4%A7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>python生成迷宫</title>
    <link href="http://yoursite.com/2019/10/14/python%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB/"/>
    <id>http://yoursite.com/2019/10/14/python生成迷宫/</id>
    <published>2019-10-14T12:54:32.000Z</published>
    <updated>2019-10-14T12:59:02.717Z</updated>
    
    <content type="html"><![CDATA[<p>算法简介:</p><ol><li><p>生成一张网格，把网格里面的所有边都存进一个列表edgeList里面.</p></li><li><p>从(0, 0)开始，做DFS。每次DFS的时候，随机地选择四周一个没有走过的格子，凿墙过去，把道路打通。凿墙的时候，把edgeList列表中相对应的那堵墙删除掉。</p></li><li><p>将剩下的没有凿开过的墙画出来，就是一个完整的迷宫了。</p></li></ol><a id="more"></a><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">WIDTH  = <span class="hljs-number">60</span></span><br><span class="line">HEIGHT = <span class="hljs-number">40</span></span><br><span class="line">sys.setrecursionlimit(WIDTH * HEIGHT)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initVisitedList</span><span class="hljs-params">()</span>:</span></span><br><span class="line">visited = []</span><br><span class="line"><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(HEIGHT):</span><br><span class="line">line = []</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(WIDTH):</span><br><span class="line">line.append(<span class="hljs-literal">False</span>)</span><br><span class="line">visited.append(line)</span><br><span class="line"><span class="hljs-keyword">return</span> visited</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span><span class="hljs-params">(x1, y1, x2, y2)</span>:</span></span><br><span class="line">plt.plot([x1, x2], [y1, y2], color=<span class="hljs-string">"black"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeLine</span><span class="hljs-params">(x1, y1, x2, y2)</span>:</span></span><br><span class="line">plt.plot([x1, x2], [y1, y2], color=<span class="hljs-string">"white"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_edges</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">result = []</span><br><span class="line">result.append((x, y, x, y+<span class="hljs-number">1</span>))</span><br><span class="line">result.append((x+<span class="hljs-number">1</span>, y, x+<span class="hljs-number">1</span>, y+<span class="hljs-number">1</span>))</span><br><span class="line">result.append((x, y, x+<span class="hljs-number">1</span>, y))</span><br><span class="line">result.append((x, y+<span class="hljs-number">1</span>, x+<span class="hljs-number">1</span>, y+<span class="hljs-number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawCell</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">edges = get_edges(x, y)</span><br><span class="line"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> edges:</span><br><span class="line">drawLine(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>], item[<span class="hljs-number">2</span>], item[<span class="hljs-number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCommonEdge</span><span class="hljs-params">(cell1_x, cell1_y, cell2_x, cell2_y)</span>:</span></span><br><span class="line">edges1 = get_edges(cell1_x, cell1_y)</span><br><span class="line">edges2 = set(get_edges(cell2_x, cell2_y))</span><br><span class="line"><span class="hljs-keyword">for</span> edge <span class="hljs-keyword">in</span> edges1:</span><br><span class="line"><span class="hljs-keyword">if</span> edge <span class="hljs-keyword">in</span> edges2:</span><br><span class="line"><span class="hljs-keyword">return</span> edge</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initEdgeList</span><span class="hljs-params">()</span>:</span></span><br><span class="line">edges = set()</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(WIDTH):</span><br><span class="line"><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(HEIGHT):</span><br><span class="line">cellEdges = get_edges(x, y)</span><br><span class="line"><span class="hljs-keyword">for</span> edge <span class="hljs-keyword">in</span> cellEdges:</span><br><span class="line">edges.add(edge)</span><br><span class="line"><span class="hljs-keyword">return</span> edges</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isValidPosition</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line"><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> x &gt;= WIDTH:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"><span class="hljs-keyword">elif</span> y &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y &gt;= HEIGHT:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(dX, dY)</span>:</span></span><br><span class="line"><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):</span><br><span class="line">i = randint(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)</span><br><span class="line">j = randint(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)</span><br><span class="line">dX[i], dX[j] = dX[j], dX[i]</span><br><span class="line">dY[i], dY[j] = dY[j], dY[i]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DFS</span><span class="hljs-params">(X, Y, edgeList, visited)</span>:</span></span><br><span class="line">dX = [<span class="hljs-number">0</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>]</span><br><span class="line">dY = [<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>]</span><br><span class="line">shuffle(dX, dY)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(dX)):</span><br><span class="line">nextX = X + dX[i]</span><br><span class="line">nextY = Y + dY[i]</span><br><span class="line"><span class="hljs-keyword">if</span> isValidPosition(nextX, nextY):</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> visited[nextY][nextX]:</span><br><span class="line">visited[nextY][nextX] = <span class="hljs-literal">True</span></span><br><span class="line">commonEdge = getCommonEdge(X, Y, nextX, nextY)</span><br><span class="line"><span class="hljs-keyword">if</span> commonEdge <span class="hljs-keyword">in</span> edgeList:</span><br><span class="line">edgeList.remove(commonEdge)</span><br><span class="line">DFS(nextX, nextY, edgeList, visited)</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="hljs-string">'equal'</span>)</span><br><span class="line">plt.title(<span class="hljs-string">'Maze'</span>)</span><br><span class="line">edgeList = initEdgeList()</span><br><span class="line">visited  = initVisitedList()</span><br><span class="line">DFS(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, edgeList, visited)</span><br><span class="line">edgeList.remove((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))</span><br><span class="line">edgeList.remove((WIDTH, HEIGHT<span class="hljs-number">-1</span>, WIDTH, HEIGHT))</span><br><span class="line"><span class="hljs-keyword">for</span> edge <span class="hljs-keyword">in</span> edgeList:</span><br><span class="line">drawLine(edge[<span class="hljs-number">0</span>], edge[<span class="hljs-number">1</span>], edge[<span class="hljs-number">2</span>], edge[<span class="hljs-number">3</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法简介:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生成一张网格，把网格里面的所有边都存进一个列表edgeList里面.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从(0, 0)开始，做DFS。每次DFS的时候，随机地选择四周一个没有走过的格子，凿墙过去，把道路打通。凿墙的时候，把edgeList列表中相对应的那堵墙删除掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将剩下的没有凿开过的墙画出来，就是一个完整的迷宫了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="迷宫" scheme="http://yoursite.com/tags/%E8%BF%B7%E5%AE%AB/"/>
    
  </entry>
  
  <entry>
    <title>十一种概率分布</title>
    <link href="http://yoursite.com/2019/10/14/%E5%8D%81%E4%B8%80%E7%A7%8D%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/"/>
    <id>http://yoursite.com/2019/10/14/十一种概率分布/</id>
    <published>2019-10-14T11:05:07.000Z</published>
    <updated>2019-10-14T12:36:06.285Z</updated>
    
    <content type="html"><![CDATA[<p>不是没你不行，而是有你更好</p><a id="more"></a><h2 id="1-均匀分布"><a href="#1-均匀分布" class="headerlink" title="1.均匀分布"></a>1.均匀分布</h2><p><a href="https://sm.ms/image/eAXEaIcLvVGnZpw" target="_blank"><img src="https://i.loli.net/2019/10/14/eAXEaIcLvVGnZpw.png"></a></p><h2 id="2-伯努利分布"><a href="#2-伯努利分布" class="headerlink" title="2.伯努利分布"></a>2.伯努利分布</h2><p><a href="https://sm.ms/image/VpnqC3ZkaegHc9A" target="_blank"><img src="https://i.loli.net/2019/10/14/VpnqC3ZkaegHc9A.png"></a></p><h2 id="3-二项分布"><a href="#3-二项分布" class="headerlink" title="3.二项分布"></a>3.二项分布</h2><p><a href="https://sm.ms/image/53yNimRTjOoLzV7" target="_blank"><img src="https://i.loli.net/2019/10/14/53yNimRTjOoLzV7.png"></a></p><h2 id="4-高斯分布"><a href="#4-高斯分布" class="headerlink" title="4.高斯分布"></a>4.高斯分布</h2><p><a href="https://sm.ms/image/Ejf65nxZUYHzClW" target="_blank"><img src="https://i.loli.net/2019/10/14/Ejf65nxZUYHzClW.png"></a></p><h2 id="5-拉普拉斯分布"><a href="#5-拉普拉斯分布" class="headerlink" title="5.拉普拉斯分布"></a>5.拉普拉斯分布</h2><p><a href="https://sm.ms/image/9F8yk4M1mVE2pJT" target="_blank"><img src="https://i.loli.net/2019/10/14/9F8yk4M1mVE2pJT.png"></a></p><h2 id="6-泊松分布"><a href="#6-泊松分布" class="headerlink" title="6.泊松分布"></a>6.泊松分布</h2><p><a href="https://sm.ms/image/aCoJVpO17rLFXAe" target="_blank"><img src="https://i.loli.net/2019/10/14/aCoJVpO17rLFXAe.png"></a></p><h2 id="7-指数分布"><a href="#7-指数分布" class="headerlink" title="7.指数分布"></a>7.指数分布</h2><p><a href="https://sm.ms/image/WPiw6vxuXYDs8I5" target="_blank"><img src="https://i.loli.net/2019/10/14/WPiw6vxuXYDs8I5.png"></a></p><h2 id="8-伽马分布"><a href="#8-伽马分布" class="headerlink" title="8.伽马分布"></a>8.伽马分布</h2><p><a href="https://sm.ms/image/fkl6WsZdEJmPgzF" target="_blank"><img src="https://i.loli.net/2019/10/14/fkl6WsZdEJmPgzF.png"></a></p><h2 id="9-贝塔分布"><a href="#9-贝塔分布" class="headerlink" title="9.贝塔分布"></a>9.贝塔分布</h2><p><a href="https://sm.ms/image/KZ1OMuaJBoWEs6A" target="_blank"><img src="https://i.loli.net/2019/10/14/KZ1OMuaJBoWEs6A.png"></a></p><h2 id="10-狄拉克分布"><a href="#10-狄拉克分布" class="headerlink" title="10.狄拉克分布"></a>10.狄拉克分布</h2><p><a href="https://sm.ms/image/XAMYkRhmVPvq2B9" target="_blank"><img src="https://i.loli.net/2019/10/14/XAMYkRhmVPvq2B9.png"></a></p><h2 id="11-多项式分布与狄里克雷分布"><a href="#11-多项式分布与狄里克雷分布" class="headerlink" title="11.多项式分布与狄里克雷分布"></a>11.多项式分布与狄里克雷分布</h2><p><a href="https://sm.ms/image/HfDoGi1khuCLSvW" target="_blank"><img src="https://i.loli.net/2019/10/14/HfDoGi1khuCLSvW.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不是没你不行，而是有你更好&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="概率分布" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>恐怖片里，人工智能大开杀戒?</title>
    <link href="http://yoursite.com/2019/10/13/%E6%81%90%E6%80%96%E7%89%87%E9%87%8C%EF%BC%8C%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%A4%A7%E5%BC%80%E6%9D%80%E6%88%92/"/>
    <id>http://yoursite.com/2019/10/13/恐怖片里，人工智能大开杀戒/</id>
    <published>2019-10-13T01:36:04.000Z</published>
    <updated>2019-10-13T02:01:03.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>场景描述：经典的杀人狂魔鬼娃恰吉，在 2019 年迎来了新版的制作。和之前几部不同，这一部里面，作祟的不再是恶魔幽灵，而是人工智能。那么这个噩梦级的杀人魔，在 AI 版本中又会是什么样，所带来的恐惧会升级吗？除了这些，在电影的背后，又会带来什么样的思考，AI 会比巫术更可怕吗？<br>关键词：鬼娃恰吉   恐怖电影   智能家居</p></blockquote><a id="more"></a><p>人工智能杀人了，而且一次杀了很多人。《鬼娃回魂》2019 重启版已经在北美和观众见面，这一部中恰吉化身成为被<strong>人工智能</strong>操控的娃娃，将各种<strong>物联网电器、自动驾驶、无人机</strong>等各种设备变成武器，大开杀戒。</p><p>这一系列恐怖片从 1988 年正式开启，造就了影史上一个最经典的杀人狂魔——鬼娃恰吉，成了许多观众心底的玩偶噩梦。而这部在北美市场深入人心的作品，在随后的 30 多年间陆续推出了多部续集。</p><p><a href="https://sm.ms/image/O5SB6cEzeR2KXCP" target="_blank"><img src="https://i.loli.net/2019/10/13/O5SB6cEzeR2KXCP.jpg"></a></p><p>该系列的第一部电影叫做<strong>《 Child’s Play》</strong>，中文译为<strong>《鬼娃回魂》</strong>。故事讲了一个杀人魔在临死时，用巫术将灵魂转移到一个叫恰吉（Chucky）的玩偶娃娃身上，这个凶横残忍的杀人娃娃，开启了它多年的杀戮之旅。</p><p>而在今年，这个系列推出了一版重启的电影，故事还是沿用了相同的设定，但这一次，让玩偶成为噩梦的内核不再是恶灵、巫术之类，而是当下发展如火如荼的人工智能。</p><p><a href="https://sm.ms/image/WYXfKs3zNtEkwFP" target="_blank"><img src="https://i.loli.net/2019/10/13/WYXfKs3zNtEkwFP.jpg"></a></p><h2 id="不受监管的-AI-，比恶灵还恐怖"><a href="#不受监管的-AI-，比恶灵还恐怖" class="headerlink" title="不受监管的 AI ，比恶灵还恐怖"></a>不受监管的 AI ，比恶灵还恐怖</h2><p>电影的设定是在一个智能化普及的时代，连电视广告里，都在不停地在宣传一款智能的 AI 娃娃，Buddi 。</p><p><a href="https://sm.ms/image/WqNSb79UwgmjtsB" target="_blank"><img src="https://i.loli.net/2019/10/13/WqNSb79UwgmjtsB.gif"></a></p><p>它有着 AI 内核，一套小巧的玩具躯体，能够和人进行无障碍的交流，并且可以控制该品牌下的一切智能设备，主要的职能是陪伴孩子的成长，俨然是一个<strong>智能管家</strong>和<strong>高级玩伴</strong>。</p><p><a href="https://sm.ms/image/TWZuI2i6UorsFk5" target="_blank"><img src="https://i.loli.net/2019/10/13/TWZuI2i6UorsFk5.jpg"></a></p><p>而故事的主角，是一个「不正常」的 AI 娃娃，和常规的玩具不同，在生产过程中，由于<strong>系统里的所有安全协议都被人为恶意移除</strong>，这个不受限制的娃娃可以说脏话，可以进行暴力行为，甚至会伤害到人，这些特殊的地方为它成为恶魔埋下了隐患。</p><p>经过一些波折之后，这个特殊的娃娃，带着退换货的标签，被主角安迪在超市工作的妈妈带回了家中。从此，噩梦在不知不觉中逼近。</p><h2 id="从玩伴到恶魔：AI-恰吉大开杀戒"><a href="#从玩伴到恶魔：AI-恰吉大开杀戒" class="headerlink" title="从玩伴到恶魔：AI 恰吉大开杀戒"></a>从玩伴到恶魔：AI 恰吉大开杀戒</h2><p>和经典的版本一样，这个智能娃娃的名字沿用了恰吉。在一开始，恰吉还是温和的，十分尽心地陪伴和安慰着安迪。</p><p><a href="https://sm.ms/image/zeVFkOsixY7qoSW" target="_blank"><img src="https://i.loli.net/2019/10/13/zeVFkOsixY7qoSW.gif"></a></p><p>但具有学习能力，并且没有约束的恰吉，在安迪不太健康的生活环境中，逐渐学会了一些怪异的行为，并走向了偏执的道路。</p><p>安迪和他的朋友们，<strong>会故意教唆恰吉使坏</strong>，比如扮鬼脸去吓人，偷东西，说脏话等。</p><p>除此以外，恰吉也在学习和模仿一些行为。比如安迪和朋友们在看惊悚电影的杀戮场面时，笑的前俯后仰的情景，就烙在了恰吉的认知里，恰吉以为杀人是一件令同伴开心的事。</p><p><a href="https://sm.ms/image/hZ6lPDY5owUANxB" target="_blank"><img src="https://i.loli.net/2019/10/13/hZ6lPDY5owUANxB.gif"></a></p><p>在这些综合因素之下，气氛逐渐开始变得恐怖起来。恰吉的 AI 系统并<strong>不能分辨善恶</strong>，它只知道被教的一些动作是讨喜的，并且开始了效仿电影中的极端行为。</p><p><strong>恰吉对人类语言以及情感的理解偏差</strong>，让事态变得不受控制，而它使用暴力的解决方式，则是将一切带向了不可挽回的地步。</p><p>对于安迪带有感情色彩的话语，如「我希望你去死」或者「我恨死你了」，到底代表了什么意义。人们出于滑稽和开心发出的笑容，在恰吉看来也是没有差别的。</p><p>最可怕的地方在于，恰吉会随时记录着主人的言行，并且以它理解的方式去践行。</p><p><a href="https://sm.ms/image/iagSVrRCHE3wztF" target="_blank"><img src="https://i.loli.net/2019/10/13/iagSVrRCHE3wztF.gif"></a></p><p>为了达到它的目的，恰吉的杀心开始显露。</p><p>起初，它用原始的手段和工具，杀掉了被安迪口上嫌弃的猫，被震惊的安迪把恰吉关了起来，但却对母亲隐瞒了它杀猫的事实。</p><p><a href="https://sm.ms/image/w5yvJnqW43FjNBx" target="_blank"><img src="https://i.loli.net/2019/10/13/w5yvJnqW43FjNBx.gif"></a></p><center><p>一杀：恰吉看到猫咪误伤安迪后，就准备将其杀害</p></center><p>接着，恰吉开始变本加厉，杀人的手段也开始走向高级。安迪一直讨厌他妈妈的新男友，所以恰吉也瞄准了他。趁他在梯子上安装灯饰之时，通过触碰梯子让他坠落，然后开动除草机，对其进行了虐杀，还割下了面皮送给了安迪。</p><p><a href="https://sm.ms/image/5vMeALKOcjQiIV3" target="_blank"><img src="https://i.loli.net/2019/10/13/5vMeALKOcjQiIV3.gif"></a></p><center><p>二杀：通过控制除草机 向安迪妈妈的新男友痛下杀手</p></center><p>在恰吉的认知里，没有善恶，它的主导是和安迪做朋友，要让安迪开心，而它的方式，就是清理掉那些令安迪不开心的人和物。</p><h2 id="无人机、智能家电、自动驾驶：皆可成为武器"><a href="#无人机、智能家电、自动驾驶：皆可成为武器" class="headerlink" title="无人机、智能家电、自动驾驶：皆可成为武器"></a>无人机、智能家电、自动驾驶：皆可成为武器</h2><p>在经历了两次事件之后，安迪被恰吉的邪恶所震惊，于是和他的两个朋友一起，拆除了恰吉的电芯，并丢到了垃圾堆里。</p><p><a href="https://sm.ms/image/Cm8bJuNc7TWEksv" target="_blank"><img src="https://i.loli.net/2019/10/13/Cm8bJuNc7TWEksv.gif"></a></p><center><p>对付 AI，果然还是要「拔电池」</p></center><p>但故事还没有结束，它被一个有偷窥癖的维修工捡到，并进行了修复。恰吉活了过来，并且进行了二度黑化。</p><p>此后，它分别除了自保，抢夺安迪，证明自己是对的三个目的，进行了三次屠杀。而这一次，恰吉运用了** AI 和物联网**的威力。</p><p>首先是在漆黑的地下室里，控制智能设备，对准备拿它换钱的修理工完成了反杀。</p><p>虽然恰吉身形和修理工相比不值一提，但恰吉却利用智能电器的控制，充分利用灯光的明暗、扫地机器人的移动，加热管道的温控等条件，让修理工乱了分寸，最终启动智能切割机设备，终结了他。</p><p><a href="https://sm.ms/image/Vv34GpuYeZRWcJs" target="_blank"><img src="https://i.loli.net/2019/10/13/Vv34GpuYeZRWcJs.gif"></a></p><center><p>三杀：恰吉连接温控器，并调到了最高，折磨修理工</p></center><p>随后恰吉出于柠檬精的心理，认为安迪的新朋友邻居老奶奶，是它和安迪朋友关系的一大绊脚石，必须要除去。而杀害她的方式，则是涉及到了自动驾驶。</p><p>在老奶奶在使用自动驾驶出租车的路程中，恰吉入侵了智能设备，并接管了车辆，随后控制汽车发生恶意的撞击，最令人恐怖的是，在剧烈撞击之前，恰吉控制车辆关闭了安全气囊、并解开了安全带。</p><p><a href="https://sm.ms/image/dN2W15te87SCcfq" target="_blank"><img src="https://i.loli.net/2019/10/13/dN2W15te87SCcfq.gif"></a></p><center><p>四杀：恰吉控制自动驾驶车辆，杀害了邻居奶奶</p></center><p>影片的高潮出现在了在新一代玩偶娃娃的发售商场。这一次，恰吉不在针对个人，而是对商场里的准备抢购的群众进行了无差别杀害。</p><p>但凡是可以联网控制的设备，恰吉都可以进行操纵，这也成了 AI 失控后最可怕的地方。</p><p>恰吉启动电动门，封锁住了出口，然后控制商店里的无人机，利用锋利的螺旋桨大杀四方，并互联了所有的 AI 娃娃，让它们都具备攻击性，扑向商场里的群众。</p><p><a href="https://sm.ms/image/uk9r1flNyJRL2Td" target="_blank"><img src="https://i.loli.net/2019/10/13/uk9r1flNyJRL2Td.gif"></a></p><center><p>多杀：恰吉遥控无人机等智能设备攻击商场里的人</p></center><p>在电影的逻辑里，恰吉的一切恶行，都是为了证明自己才是安迪值得托付的朋友，所以这些杀戮对它来说，只是一种必要的途径。</p><p>当然，和鬼娃回魂的电影系列一样，最终恰吉还是被主角一行人制服，并且进行了毁灭性打击，但恰吉真的就消失了吗？</p><h2 id="失控的-AI-，会有多可怕？"><a href="#失控的-AI-，会有多可怕？" class="headerlink" title="失控的 AI ，会有多可怕？"></a>失控的 AI ，会有多可怕？</h2><p>纵观整个电影，故事的最大看点，在于没有了之前那些玄乎的鬼怪之类，而是借用了 AI 系统的安全隐患，来制造出恐怖的效果。</p><p><a href="https://sm.ms/image/PWF2q6uDgEoXpds" target="_blank"><img src="https://i.loli.net/2019/10/13/PWF2q6uDgEoXpds.gif"></a></p><center><p>在一开始，安迪教恰吉扮鬼脸吓人的时候 应该没想到恰吉后来会如此恐怖</p></center><p>不过在思考之后发现， 影片中 AI 所造成的恐怖事件，更多的还在于环境的因素：在失衡的条件下成长而来的智能系统，如果被引向负面，又脱离了安全条款的保护，势必会造成不可估量的后果。</p><p>就像是微软曾经的<strong>语音机器人 Tay</strong>，原本是一个正常的 AI ，但在社交平台上开放聊天后，短短的 24 小时后就被彻底教坏，言语中夹杂着暴力倾向、性别歧视、种族歧视、污言秽语。</p><p><a href="https://sm.ms/image/GjLcVd6kMxv7bIz" target="_blank"><img src="https://i.loli.net/2019/10/13/GjLcVd6kMxv7bIz.jpg"></a></p><center><p>Tay 推出短短一天就被迫下线</p></center><p>细数科幻电影中的 AI 形象，比恰吉邪恶恐怖的，在西部世界、机械姬等作品中，要体现的更为深刻。这个已算不上「鬼娃」的恰吉，也许只是经典 IP 不甘被遗忘的尝试之作。</p><p>但电影也透露出了 AI 发展中的一些实际难题。<strong>比如对带有感情色彩的语言的理解，对人类的爱恨的把握，甚至是对于人类的道德体系， AI 模型还是不具备理解的能力的</strong>。</p><p>此外，为了便利把所任务都过快的交给 AI ，是否充分考虑了安全隐患，也同样值得深思。在整个事件之后，生产 Buddi 的公司立刻撇清关系，只是象征性地召回新品（出问题的是老款），态度也很值得玩味。</p><p>电影归电影，现实生活中，AI 的智能程度远没达到这个地步，而 AI 蒙上的这份恐怖色彩，人为因素也占据了很大的诱因。</p><p>至少目前看来，我们要担心的，还不是 AI 过于强大，而是在应用层面上不要那么ZZ。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;场景描述：经典的杀人狂魔鬼娃恰吉，在 2019 年迎来了新版的制作。和之前几部不同，这一部里面，作祟的不再是恶魔幽灵，而是人工智能。那么这个噩梦级的杀人魔，在 AI 版本中又会是什么样，所带来的恐惧会升级吗？除了这些，在电影的背后，又会带来什么样的思考，AI 会比巫术更可怕吗？&lt;br&gt;关键词：鬼娃恰吉   恐怖电影   智能家居&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Child’s Play" scheme="http://yoursite.com/tags/Child%E2%80%99s-Play/"/>
    
  </entry>
  
  <entry>
    <title>死磕c语言数据结构</title>
    <link href="http://yoursite.com/2019/10/13/%E6%AD%BB%E7%A3%95c%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/10/13/死磕c语言数据结构/</id>
    <published>2019-10-13T00:44:17.000Z</published>
    <updated>2019-10-19T07:22:43.938Z</updated>
    
    <content type="html"><![CDATA[<p><strong>持续更新…</strong></p><a id="more"></a><h1 id="一、排序"><a href="#一、排序" class="headerlink" title="一、排序"></a>一、排序</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,i,j,a[<span class="hljs-number">100</span>],temp;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<span class="hljs-comment">//输入的数字个数</span></span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]); <span class="hljs-comment">//输入 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-comment">//冒泡排序 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[j]&lt;a[j+<span class="hljs-number">1</span>])&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j+<span class="hljs-number">1</span>];</span><br><span class="line">a[j+<span class="hljs-number">1</span>] = temp; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,a[i]); <span class="hljs-comment">//输出 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-桶排序"><a href="#2-桶排序" class="headerlink" title="2.桶排序"></a>2.桶排序</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,i,j,a[<span class="hljs-number">100</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;</span><br><span class="line">a[i] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line">a[m]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;a[i];j++)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3.快速排序"></a>3.快速排序</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">为什么说  叫快速排序，顾名思义， 排序的速度很快。</span><br><span class="line">它的核心思想就是将 最左的数字 记为 基准值</span><br><span class="line">举个例子  假如</span><br><span class="line">6    1   2   7   9   3   4   5   10  8</span><br><span class="line">首先 定下 6为基准值接下来 想达到的目的是 6放在中间 左边都是小于6的右边都是大于6的</span><br><span class="line">从左到右找到 比6大的有  第一个为7</span><br><span class="line">同样从右到左 找到 比6小的 第一个数为 5</span><br><span class="line">两个交换 得到</span><br><span class="line">6    1   2   5   9   3   4   7   10  8</span><br><span class="line">同理 得到</span><br><span class="line">6    1   2   5   4   3   9   7   10  8</span><br><span class="line">将6送到中间去</span><br><span class="line">3    1   2   5   4   6   9   7   10  8</span><br><span class="line">得到之前的目的了把</span><br><span class="line">之后  6的左边 3 1 2 5 4 重复上述的方法 进行 排序（相当于把这五个数看做 一个新的排序将 3 设为基准）</span><br><span class="line">右边 的9 7 10 8 同样</span><br><span class="line">变化过程如下：</span><br><span class="line">3    1   2   5   4</span><br><span class="line">2    1   3   5   4</span><br><span class="line"></span><br><span class="line">9    7   10  8</span><br><span class="line">9    7   8   10</span><br><span class="line">8    7   9   10</span><br><span class="line"></span><br><span class="line">之后  基准值进入中间区域之后  依次进行以上操作 （其实就是个 递归操作）</span><br><span class="line"></span><br><span class="line">最后得到1    2   3   4   5   6   7   8   9   10</span><br><span class="line">上代码</span><br></pre></td></tr></table></figure><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> number[<span class="hljs-number">101</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">int</span> baseNumber;<span class="hljs-comment">// 基准值初始化 </span></span><br><span class="line">     <span class="hljs-keyword">int</span> i;</span><br><span class="line">     <span class="hljs-keyword">int</span> j;</span><br><span class="line">     <span class="hljs-keyword">int</span> t;</span><br><span class="line">     <span class="hljs-keyword">if</span> (left &gt; right) <span class="hljs-comment">// 向右找数 和向左找数 碰到 则结束 找数 </span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="hljs-keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     baseNumber = number[left];  <span class="hljs-comment">// 记住基准值 </span></span><br><span class="line">     i = left;</span><br><span class="line">     j = right;</span><br><span class="line">     <span class="hljs-keyword">while</span>(i != j)</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="hljs-comment">//  顺序很重要要先从右向左找 </span></span><br><span class="line">          <span class="hljs-keyword">while</span>((number[j] &gt;= baseNumber)&amp;&amp;(i&lt;j))</span><br><span class="line">          &#123;</span><br><span class="line">               j--;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="hljs-comment">//   从左向右找 </span></span><br><span class="line">          <span class="hljs-keyword">while</span>((number[i] &lt;= baseNumber)&amp;&amp;(i&lt;j))</span><br><span class="line">          &#123;</span><br><span class="line">               i++; </span><br><span class="line">          &#125; </span><br><span class="line">          <span class="hljs-comment">//  左右 找数没有碰到 </span></span><br><span class="line">          <span class="hljs-keyword">if</span>(i&lt;j)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="hljs-comment">//  比基准值大的数和基准值小的数  交换 </span></span><br><span class="line">              t = number[i];</span><br><span class="line">              number[i] = number[j];</span><br><span class="line">              number[j] = t;       </span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="hljs-comment">// while结束 则  i = j  则 到 中间 所以此时的i为中间的索引  </span></span><br><span class="line">     <span class="hljs-comment">// 中间数字  和  基准值交换  </span></span><br><span class="line">      number[left] = number[i];</span><br><span class="line">      number[i] = baseNumber;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">//递归   左面的 继续 sort   右边的同理 </span></span><br><span class="line">      quickSort(left, i<span class="hljs-number">-1</span>);</span><br><span class="line">      quickSort(i+<span class="hljs-number">1</span>, right); </span><br><span class="line">      <span class="hljs-keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span>  i, j;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span> ;i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;number[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(<span class="hljs-number">1</span>,n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(i =<span class="hljs-number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d   "</span>,number[i]);         </span><br><span class="line">    &#125;</span><br><span class="line">     system(<span class="hljs-string">"PAUSE"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python版的排序：<a href="https://zzdproject.netlify.com/#/sort" target="_blank" rel="noopener">https://zzdproject.netlify.com/#/sort</a></p><h1 id="二、队列、栈、链表"><a href="#二、队列、栈、链表" class="headerlink" title="二、队列、栈、链表"></a>二、队列、栈、链表</h1><h2 id="1-队列"><a href="#1-队列" class="headerlink" title="1.队列"></a>1.队列</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">队列顾名思义就像一群数字排成一个队列一样的性质</span><br><span class="line">所以它的最标志性性质就是  FIFO(First In First Out) <span class="hljs-string">"先进先出"</span></span><br><span class="line"></span><br><span class="line">这里规定 加入 队列数据为一个数组</span><br><span class="line">head指向第一个数字 tail指向 最后一个数字的下一个，这样是为了 <span class="hljs-literal">NULL</span>的操作判定</span><br><span class="line"></span><br><span class="line">只允许 在队列的头部（head）进行删除----出队</span><br><span class="line">只允许在队列的尾部（tail）进行插入---- 入队</span><br><span class="line">队列为 <span class="hljs-literal">NULL</span>时  head = tail</span><br><span class="line">删除一个数据 则  head++;</span><br><span class="line">插入一个数据则  q[tail] = data; tail++;</span><br></pre></td></tr></table></figure><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data[<span class="hljs-number">100</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> head;</span><br><span class="line"><span class="hljs-keyword">int</span> tail;       </span><br><span class="line">&#125;; <span class="hljs-comment">// ;别忘了</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span> <span class="hljs-title">q</span>;</span><span class="hljs-comment">//  有struct</span></span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    <span class="hljs-comment">// 此时为NULL </span></span><br><span class="line">    q.head = <span class="hljs-number">1</span>;</span><br><span class="line">    q.tail = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="hljs-comment">//   插入 </span></span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;q.data[q.tail]);</span><br><span class="line">        q.tail++;         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(q.head &lt; q.tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q.data[q.head]);</span><br><span class="line">        q.head++;</span><br><span class="line">        <span class="hljs-comment">//  插入 </span></span><br><span class="line">        q.data[q.tail] = q.data[q.head];</span><br><span class="line">        q.tail++;</span><br><span class="line">        <span class="hljs-comment">//删除 </span></span><br><span class="line">        q.head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">它的最标志性性质就是  LIFO(Last In First Out) "后进先出"</span><br><span class="line">1.一个数组+一个指向栈顶的变量top即可。</span><br><span class="line">2.top=0  为NULL</span><br><span class="line">3.进栈为 top++; s[top] = data</span><br><span class="line">4.出栈为 top--；</span><br><span class="line">以回文数 为例子</span><br></pre></td></tr></table></figure><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> a[<span class="hljs-number">101</span>]; <span class="hljs-comment">// 回文数 </span></span><br><span class="line">    <span class="hljs-keyword">char</span> <span class="hljs-built_in">stack</span>[<span class="hljs-number">101</span>]; <span class="hljs-comment">//栈 </span></span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    <span class="hljs-keyword">int</span> len, mid, top, next; </span><br><span class="line">    gets(a); <span class="hljs-comment">//得到字符串 </span></span><br><span class="line">    len = <span class="hljs-built_in">strlen</span>(a); <span class="hljs-comment">//得到长度 </span></span><br><span class="line">    mid = len/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">//中点 </span></span><br><span class="line">    top = <span class="hljs-number">0</span>; <span class="hljs-comment">// 栈顶指向 </span></span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;=mid; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">stack</span>[++top] = a[i]; <span class="hljs-comment">//入栈 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//判断数字长度为奇数还是偶数 </span></span><br><span class="line">    <span class="hljs-keyword">if</span>(len%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        next = mid + <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        next = mid + <span class="hljs-number">2</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 判断是否为回文数 </span></span><br><span class="line">    <span class="hljs-keyword">for</span>(i=next; i&lt;=len<span class="hljs-number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(a[i] != <span class="hljs-built_in">stack</span>[top])</span><br><span class="line">          <span class="hljs-keyword">break</span>;</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//  top = 0 相当于 全部出栈 即 为回文数 </span></span><br><span class="line">    <span class="hljs-keyword">if</span>(top == <span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"我觉得ok"</span>); </span><br><span class="line">    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"我觉得不行"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-链表"><a href="#3-链表" class="headerlink" title="3.链表"></a>3.链表</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//输入输出操作</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-comment">//节点结构体 </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">   <span class="hljs-keyword">int</span> data;</span><br><span class="line">   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;    </span><br><span class="line">     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span>, *<span class="hljs-title">p</span>, *<span class="hljs-title">q</span>, *<span class="hljs-title">t</span>;</span></span><br><span class="line">     <span class="hljs-keyword">int</span> i,n,data_input;</span><br><span class="line">     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<span class="hljs-comment">// 输入 数据的个数 </span></span><br><span class="line">     head = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//头结点 </span></span><br><span class="line">     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;data_input);</span><br><span class="line">         <span class="hljs-comment">//动态申请一个空间，用来存放一个结点，并用临时指针p指向这个结点 </span></span><br><span class="line">         p = (struct node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct node));</span><br><span class="line">         p-&gt;data = data_input;<span class="hljs-comment">// 将数据存储到当前 结点的 data中 </span></span><br><span class="line">         p-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//设置当前的结点 的后继指针为NULL，也就是当前结点的下一个结点为NULL </span></span><br><span class="line">         <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             head = p; <span class="hljs-comment">// 如果这个是第一个 创建的结点  则将 这个头指针指向这个结点 </span></span><br><span class="line">         &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">             q-&gt;next = p;<span class="hljs-comment">//如果不是第一个创建的结点，则将上一个结点的后继指针指向当前结点 </span></span><br><span class="line">         &#125;</span><br><span class="line">         q = p;<span class="hljs-comment">//q也指向当前结点 </span></span><br><span class="line">     &#125;  </span><br><span class="line"></span><br><span class="line">     t = head;</span><br><span class="line">     <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">         <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,t-&gt;data); <span class="hljs-comment">//输出所有的数 </span></span><br><span class="line">         t = t-&gt;next; </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//插入操作</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-comment">//节点结构体 </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">   <span class="hljs-keyword">int</span> data;</span><br><span class="line">   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;    </span><br><span class="line">     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span>, *<span class="hljs-title">p</span>, *<span class="hljs-title">q</span>, *<span class="hljs-title">t</span>;</span></span><br><span class="line">     <span class="hljs-keyword">int</span> i,n,data_input;</span><br><span class="line">     <span class="hljs-keyword">int</span> data_insert;</span><br><span class="line">     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<span class="hljs-comment">// 输入 数据的个数 </span></span><br><span class="line">     head = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//头结点 </span></span><br><span class="line">     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;data_input);</span><br><span class="line">         <span class="hljs-comment">//动态申请一个空间，用来存放一个结点，并用临时指针p指向这个结点 </span></span><br><span class="line">         p = (struct node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct node));</span><br><span class="line">         p-&gt;data = data_input;<span class="hljs-comment">// 将数据存储到当前 结点的 data中 </span></span><br><span class="line">         p-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//设置当前的结点 的后继指针为NULL，也就是当前结点的下一个结点为NULL </span></span><br><span class="line">         <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             head = p; <span class="hljs-comment">// 如果这个是第一个 创建的结点  则将 这个头指针指向这个结点 </span></span><br><span class="line">         &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">             q-&gt;next = p;<span class="hljs-comment">//如果不是第一个创建的结点，则将上一个结点的后继指针指向当前结点 </span></span><br><span class="line">         &#125;</span><br><span class="line">         q = p;<span class="hljs-comment">//q也指向当前结点 </span></span><br><span class="line">     &#125;  </span><br><span class="line"></span><br><span class="line">     <span class="hljs-comment">//************** 插入操作**********************//</span></span><br><span class="line">     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;data_insert); <span class="hljs-comment">//  输入插入的值 </span></span><br><span class="line">     t = head;  <span class="hljs-comment">//  链表头 </span></span><br><span class="line">     <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>) </span><br><span class="line">     &#123;</span><br><span class="line">          <span class="hljs-comment">// 如果 当前结点 是最后一个结点或者下一个结点 的值大于 插入数的时候插入 </span></span><br><span class="line">         <span class="hljs-keyword">if</span>((t-&gt;next==<span class="hljs-literal">NULL</span>)||(t-&gt;next-&gt;data &gt;data_insert))</span><br><span class="line">         &#123;</span><br><span class="line">              <span class="hljs-comment">// 创建 缓存 </span></span><br><span class="line">              p = (struct node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct node));</span><br><span class="line">              p-&gt;data = data_insert;</span><br><span class="line">              p-&gt;next = t-&gt;next;<span class="hljs-comment">// 新增结点的后继指针  等于 此时结点的后继结点的指向  即 新增结点 指向 此时结点的下一个指向 </span></span><br><span class="line">              <span class="hljs-comment">// 此时结点的后继指针指向  这个新增结点 </span></span><br><span class="line">              t-&gt;next = p;</span><br><span class="line">              <span class="hljs-keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-comment">//继续下一个结点（相当于遍历） </span></span><br><span class="line">         t = t-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     t = head;</span><br><span class="line">     <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,t-&gt;data);</span><br><span class="line">         t = t-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;持续更新…&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="死磕系列" scheme="http://yoursite.com/categories/%E6%AD%BB%E7%A3%95%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何不发疯的阅读论文</title>
    <link href="http://yoursite.com/2019/10/12/%E5%A6%82%E4%BD%95%E4%B8%8D%E5%8F%91%E7%96%AF%E7%9A%84%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2019/10/12/如何不发疯的阅读论文/</id>
    <published>2019-10-11T23:17:55.000Z</published>
    <updated>2019-10-12T04:39:52.551Z</updated>
    
    <content type="html"><![CDATA[<p>转载自新智元</p><a id="more"></a><blockquote><p>数学真的很重要！<br><strong>IcyBaba</strong>：很多论文所使用的数学是类似的，学术论文的海洋是无限的，但数学是有限的基石。学好数学，你会开始觉得所有的论文或多或少都是使用相同的积木搭建而成。<br><a href="https://sm.ms/image/RqguJSyakQLY3Di" target="_blank"><img src="https://i.loli.net/2019/10/12/RqguJSyakQLY3Di.jpg"></a><br><strong>approximately_wrong</strong>：我的一位导师告诉我，他曾经仔细阅读了一篇论文中的所有定理和证明，然后想到“数学家可能会认为这篇论文很烂”。乐观地说，我认为重要的不仅是数学的深度，还有你如何用它来解决在你的领域里有价值的问题:-)<br><strong>MaxMachineLearning</strong>：在工业界做了两年机器学习后，我开始攻读数学研究生。我的研究重点是将代数拓扑工具在机器学习中的应用。我的导师没有机器学习方面的背景，他所知的仅仅是我提出的一些关于这个领域的基本事实，然而他在几分钟之内就注意到了该领域真正的成果。另一位研究非交换几何的教授说，这些结果是从数学中得到的相对简单的结果，并对其进行解释/应用。<br><strong>IcyBaba</strong>：至少以粗略的方式阅读各种论文是件好事，因为即使你不了解如何实现这些论文，你也会知道有这样的方法/想法存在，并且当有机会或当它与你的研究相关性很大时，你可以回过头来深入阅读。将这些论文视为工具箱中的可能有用的工具就行。</p></blockquote><h2 id="论文应该这样读：读几百篇论文之后，就容易多了"><a href="#论文应该这样读：读几百篇论文之后，就容易多了" class="headerlink" title="论文应该这样读：读几百篇论文之后，就容易多了"></a>论文应该这样读：读几百篇论文之后，就容易多了</h2><p><strong>MikeVladimirov</strong>：如果你对阅读论文有“暴饮暴食”的情绪，我的建议是阅读<strong>综述</strong>。在40-60页的综述文章中，你通常能够以一种优美、整洁、结构化、条理清晰的方式获取100-200篇论文中的重要信息。</p><p>当你阅读了2-3篇最近(过去5年内)的综述论文后，你会发现三点：</p><ol><li><p>总是被引用的论文；</p></li><li><p>其具体工作听起来很酷或很相关的作者；</p></li><li><p>你感兴趣的子领域中相对较新的进展，以及关于这些主题的值得注意的论文。</p></li></ol><p>一旦有了这三点，那么你就很清楚接下来该读什么，为什么读，以及读的顺序了。</p><p>还有，我再怎么强调都不为过的是，一定要确保你在阅读的同时进行输出。哪怕只是在OneNote或思维导图应用中做笔记。只要确保将相关的思想联系在一起，并跟踪这些思想的准确引用即可。相信我，对关键概念做一点文献笔记很有必要，当你为了找到一个准确的引用需要回顾1-3年前读过的论文时，你会发现将两个关键思想联系在一起很有帮助。</p><p><a href="https://sm.ms/image/RE2YnwqHXUof1rp" target="_blank"><img src="https://i.loli.net/2019/10/12/RE2YnwqHXUof1rp.jpg"></a></p><p><strong>duckbill_principate</strong>：每个人都经历过这样的阶段。<strong>当你读了几百篇论文之后，就会变得容易多了</strong>。</p><p><strong>RememberToBackupData</strong>：最重要的是，你要回答一个具体的问题。提出这样一个问题，可以帮助你在一分钟内确定这篇论文是否包含答案。</p><p><strong>jurniss</strong>：标准的机器学习论文结构可以让你以不同的深度阅读论文：</p><ul><li><p>“<strong>摘要</strong>”可以帮助排除与你的兴趣无关的论文。</p></li><li><p>“<strong>引言</strong>”可以轻松阅读，能够告诉你：a)这个想法是否有趣，b)理论贡献是否重要，和/或c)实证结果是否强大。</p></li><li><p>“<strong>引言+方法</strong>”部分应该足够描述该理论的完整视图，而“<strong>引言+实验</strong>”应该能够给出关于“性能”的完整视图。你可以分别消化理论部分和实证部分。</p></li></ul><p>一旦你理解了该领域足够多的基本概念，并且更加明确自己的兴趣，那么你将只是偶尔仔细阅读论文的每个单词和公式。更常见的是略读，理解基本思想，然后认为它对你来说不够有趣而不用去深入阅读。</p><h2 id="学会放下：5分钟-1小时定律"><a href="#学会放下：5分钟-1小时定律" class="headerlink" title="学会放下：5分钟/1小时定律"></a>学会放下：5分钟/1小时定律</h2><p><strong>adventuringraw</strong>：我实际上跟up主有类似的困惑，这绝对也是我的挣扎。我意识到我的一些经验或许可以作为参考。</p><p>介绍一下<strong>5分钟/1小时定律</strong>。如果你能在5分钟内意识到一篇论文可能不是你现在需要学习的东西，非常棒！这样你只浪费了5分钟的时间就可以进行下一步操作了。</p><p>但如果你一旦决定要继续阅读这篇论文，那么就要开启战斗状态了。梦想着去学习所有知识不过是精神自嗨而已，战斗状态需要的是厘清并组织自己希望获得的收获，这一点很重要。</p><p>比如，你希望该论文具体回答哪些问题？记下来；到目前为止你获得了什么启发？写下来。因为在阅读过程中，你肯定会发现一些想法、见解和潜在的新论文（那些论文很难以有用的方式进行组织，因为从根本上来说，这是一种交叉注释的信息），如果不写下来就忘记了。</p><p>我是这样记笔记的：我会在Evernote中保存相当详细的笔记（可能是一到两页笔记），要研究的每篇论文都会写一个，这样搜索和查找以前想法会很容易。然后关闭当前的笔记，创建另一个笔记，复制标题、摘要和arxiv链接以及对我的最初问题进行梳理，这一切都让我感到非常痛苦。</p><p>接下来，我会问自己：我真的需要切换到另一篇论文吗？好的，该采取行动了；最好能有一个具体的项目或正在研究的问题，这将非常有用；现在真的是时候开始阅读图形嵌入了吗？这实际上与我正在从事的核心项目有关吗？我当前打开的“我需要回答这些问题”的清单在哪里？它们中的任何一个是否适用于这篇似乎挺有趣的论文？没有？好吧，继续前进。</p><p><strong>IndiaNgineer</strong>：<strong>随手列出问题清单</strong>，一定要抵制立即查找你遇到的不理解内容的冲动！并在获得答案时写下答案，仅在读完论文之后，才去查阅里面的知识点。</p><p>慢慢地，随着你的进步，你将开始了解更多，并且由于你已经积累了框架，很多让你早期感觉困惑的知识点开始变得不言而喻。对于我来说，很多时候我会浏览论文中的公式。因为人们的写作风格和某些单词背后的含义含糊不清，但是公式是清晰的。</p><p>另外，不要按论文大纲给出的顺序阅读该论文。对我而言，最有效的顺序是阅读摘要，然后是方法、结果、讨论、结论。前言最后看，或者甚至可以不用看，这取决于你对该领域的熟练程度。</p><p><strong>eviljelloman</strong>：不要“阅读”论文。听我说。</p><p>你应该有两种使用论文内容的模式：略读和精读。这些都不是硬着头皮从头读到尾然后说“完成了阅读”。当需要了解研究主体的背景时，你需要略读。浏览图表，阅读摘要和结论，记下你以后要看的论文。如果该论文似乎特别相关，请将其归档以供以后研究。</p><p>在精读模式下，你将深入研究那篇论文的内容，别在意对其他论文的引用。当你看到“带有一些推导…”的内容时，要在便条纸上做笔记，阅读注释，研究数学，然后列出公式。</p><p>这听起来似乎需要很大的工作量，事实也如此。这就是为什么你需要有选择性的阅读论文，大部分论文略读即可，少数论文需要精读。</p><p>当你执行任何大型，复杂的项目时，你就是你自己的项目经理。这意味着你需要学习项目管理技能。你可以使用任务组织/工作跟踪工具，甚至电子表格来计划和确定工作的优先级。</p><p><strong>Whitishcube</strong>：我认为你得<strong>学会“放下”</strong>，不用非得去知道所有的事情。在许多领域中，不可能阅读每篇研究论文，也不可能100％了解每篇论文的内容，这没关系。你应该将某个领域的某些方面发展自己的专业知识，对于其他部分，你应该与他人进行交谈或合作。</p><p>阅读论文是有策略的。最重要的是，你应该记住一个要回答的问题。这将帮助你缩小选择阅读的论文的范围。然后，一旦确定了几篇你认为会有所帮助的论文，可以略读，以了解其中的内容。不要一上来就从头读完，你的目标是在此浏览过程中清除无用的论文。</p><p>选择了几篇论文后，请阅读主要论点并尝试感受一下。至此，你只需要阅读少量内容，而不是不可能完成的长长的列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自新智元&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="论文-续" scheme="http://yoursite.com/tags/%E8%AE%BA%E6%96%87-%E7%BB%AD/"/>
    
  </entry>
  
</feed>
